
AVRASM ver. 2.1.17  C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm Wed Jan 16 19:09:31 2013

C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1028): warning: Register r4 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1029): warning: Register r3 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1030): warning: Register r5 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1031): warning: Register r7 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1032): warning: Register r10 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1033): warning: Register r11 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1034): warning: Register r13 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1035): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega168P
                 ;Program type           : Application
                 ;Clock frequency        : 0,460800 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : Yes
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : Yes
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega168P
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rxEnable=R4
                 	.DEF _txEnable=R3
                 	.DEF _calibration_point1=R5
                 	.DEF _calibration_point2=R7
                 	.DEF _rangeIndex=R10
                 	.DEF _tmp_calibration=R11
                 	.DEF _crc=R13
                 	.DEF _dataToSave=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0313 	JMP  __RESET
000002 940c 03d6 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 036d 	JMP  _timer0_ovf_isr
000022 940c 0421 	JMP  _spi_isr
000024 940c 0376 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 03b0 	JMP  _usart_tx_isr
00002a 940c 03fa 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _Parameter_mask:
000034 0100
000035 0302
000036 0504
000037 0706      	.DB  0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7
000038 0908
000039 0d0c
00003a 1511
00003b 1a19      	.DB  0x8,0x9,0xC,0xD,0x11,0x15,0x19,0x1A
00003c 3820
00003d 4744
00003e 4e4a
00003f 5652      	.DB  0x20,0x38,0x44,0x47,0x4A,0x4E,0x52,0x56
000040 5857
000041 605c
000042 6261
000043 6965      	.DB  0x57,0x58,0x5C,0x60,0x61,0x62,0x65,0x69
000044 716d
000045 7b75
000046 8786
000047 8988      	.DB  0x6D,0x71,0x75,0x7B,0x86,0x87,0x88,0x89
                 _Command_mask:
000048 0126
000049 0302
00004a 0504
00004b 0706      	.DB  0x26,0x1,0x2,0x3,0x4,0x5,0x6,0x7
00004c 0908
00004d 0909
00004e 0000
00004f 0000      	.DB  0x8,0x9,0x9,0x9,0x0,0x0,0x0,0x0
000050 0000
000051 0000
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000054 0a00
000055 0b0b
000056 0b0b
000057 0000      	.DB  0x0,0xA,0xB,0xB,0xB,0xB,0x0,0x0
000058 0000
000059 0000
00005a 0000
00005b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005c 0000
00005d 0000
00005e 0000
00005f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000060 0000
000061 0c0c
000062 0c0c
000063 0d0d      	.DB  0x0,0x0,0xC,0xC,0xC,0xC,0xD,0xD
000064 0d0d
000065 0000
000066 0000
000067 0000      	.DB  0xD,0xD,0x0,0x0,0x0,0x0,0x0,0x0
000068 0000
000069 0000
00006a 0000
00006b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006c 0000
00006d 0c00
00006e 0c0c
00006f 0a0c      	.DB  0x0,0x0,0x0,0xC,0xC,0xC,0xC,0xA
000070 0d0d
000071 0d0d
000072 0000
000073 0000      	.DB  0xD,0xD,0xD,0xD,0x0,0x0,0x0,0x0
000074 0000
000075 0000
000076 0000
000077 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000078 0000
000079 0000
00007a 000e
00007b 0000      	.DB  0x0,0x0,0x0,0x0,0xE,0x0,0x0,0x0
00007c 0000
00007d 0000
00007e 0000
00007f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000080 0000
000081 0000
000082 0000
000083 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000084 0000
000085 0000
000086 2600
000087 0201      	.DB  0x0,0x0,0x0,0x0,0x0,0x26,0x1,0x2
000088 0403
000089 0605
00008a 0807
00008b 0909      	.DB  0x3,0x4,0x5,0x6,0x7,0x8,0x9,0x9
00008c 0009
00008d 0000
00008e 0000
00008f 0000      	.DB  0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000090 0000
000091 0000
000092 0000
000093 1010      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10
000094 1010
000095 1010
000096 1010
000097 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
000098 1010
000099 1010
00009a 1010
00009b 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
00009c 1010
00009d 1010
00009e 1010
00009f 0f00      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x0,0xF
0000a0 0f0f
0000a1 0f0f
0000a2 110f
0000a3 1111      	.DB  0xF,0xF,0xF,0xF,0xF,0x11,0x11,0x11
0000a4 1111
0000a5 1111
0000a6 1111
0000a7 1111      	.DB  0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11
0000a8 1211
0000a9 1212
0000aa 0000
0000ab 0000      	.DB  0x11,0x12,0x12,0x12,0x0,0x0,0x0,0x0
0000ac 1313
0000ad 0a13
0000ae 1414
0000af 1414      	.DB  0x13,0x13,0x13,0xA,0x14,0x14,0x14,0x14
0000b0 1515
0000b1 1515
0000b2 1616
0000b3 1616      	.DB  0x15,0x15,0x15,0x15,0x16,0x16,0x16,0x16
0000b4 0000
0000b5 0000
0000b6 0000
0000b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b8 1700
0000b9 0a18
0000ba 1919
0000bb 1919      	.DB  0x0,0x17,0x18,0xA,0x19,0x19,0x19,0x19
0000bc 1a1a
0000bd 1a1a
0000be 2727
0000bf 2727      	.DB  0x1A,0x1A,0x1A,0x1A,0x27,0x27,0x27,0x27
0000c0 1c1b
0000c1 0000
0000c2 0000
0000c3 0000      	.DB  0x1B,0x1C,0x0,0x0,0x0,0x0,0x0,0x0
0000c4 0000
0000c5 1d1d
0000c6 001d
0000c7 0000      	.DB  0x0,0x0,0x1D,0x1D,0x1D,0x0,0x0,0x0
0000c8 0000
0000c9 0000
0000ca 0000
0000cb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000cc 0000
0000cd 0000
0000ce 0000
0000cf 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d0 0000
0000d1 1000
0000d2 1010
0000d3 1010      	.DB  0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x10
0000d4 1010
0000d5 1010
0000d6 1010
0000d7 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
0000d8 1010
0000d9 1010
0000da 1010
0000db 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
0000dc 1010
0000dd 0010
0000de 0f0f
0000df 0f0f      	.DB  0x10,0x10,0x10,0x0,0xF,0xF,0xF,0xF
0000e0 0f0f
0000e1 1111
0000e2 1111
0000e3 1111      	.DB  0xF,0xF,0x11,0x11,0x11,0x11,0x11,0x11
0000e4 1111
0000e5 1111
0000e6 1111
0000e7 1212      	.DB  0x11,0x11,0x11,0x11,0x11,0x11,0x12,0x12
0000e8 0012
0000e9 0000
0000ea 1d00
0000eb 1d1d      	.DB  0x12,0x0,0x0,0x0,0x0,0x1D,0x1D,0x1D
0000ec 0000
0000ed 0000
0000ee 0000
0000ef 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000f0 0000
0000f1 0000
0000f2 0000
0000f3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000f4 0000
0000f5 0000
0000f6 0000
0000f7 190a      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0xA,0x19
0000f8 1919
0000f9 1a19
0000fa 1a1a
0000fb 001a      	.DB  0x19,0x19,0x19,0x1A,0x1A,0x1A,0x1A,0x0
0000fc 0000
0000fd 0000
0000fe 0000
0000ff 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000100 0000
000101 0000
000102 0000
000103 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000104 0000
000105 0000
000106 0000
000107 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000108 0000
000109 0000
00010a 0000
00010b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00010c 0000
00010d 0000
00010e 0000
00010f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000110 0000
000111 0000
000112 0000
000113 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000114 0000
000115 0000
000116 0000
000117 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000118 0000
000119 0000
00011a 0000
00011b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00011c 0000
00011d 0000
00011e 0000
00011f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000120 0000
000121 0000
000122 0000
000123 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000124 0000
000125 0000
000126 0000
000127 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000128 0000
000129 001e
00012a 0000
00012b 0000      	.DB  0x0,0x0,0x1E,0x0,0x0,0x0,0x0,0x0
00012c 0000
00012d 0000
00012e 0000
00012f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000130 0000
000131 0000
000132 0000
000133 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000134 0000
000135 0000
000136 0000
000137 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000138 0000
000139 0000
00013a 0000
00013b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013c 0000
00013d 0000
00013e 0000
00013f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000140 0000
000141 0000
000142 0000
000143 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000144 0000
000145 0000
000146 0000
000147 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000148 0000
000149 0000
00014a 0000
00014b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00014c 0000
00014d 0000
00014e 0000
00014f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000150 0000
000151 0000
000152 0000
000153 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000154 0000
000155 0000
000156 0000
000157 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000158 0000
000159 0000
00015a 0000
00015b 000a      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0xA,0x0
00015c 0000
00015d 0000
00015e 0000
00015f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000160 0000
000161 0000
000162 0000
000163 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000164 0000
000165 0000
000166 0000
000167 1f00      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1F
000168 1f1f
000169 0000
00016a 0000
00016b 0000      	.DB  0x1F,0x1F,0x0,0x0,0x0,0x0,0x0,0x0
00016c 0000
00016d 0000
00016e 0000
00016f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000170 0000
000171 0000
000172 0000
000173 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000174 2020
000175 0020
000176 0000
000177 0000      	.DB  0x20,0x20,0x20,0x0,0x0,0x0,0x0,0x0
000178 0000
000179 0000
00017a 0000
00017b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00017c 0000
00017d 0000
00017e 0000
00017f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000180 2100
000181 0000
000182 0000
000183 0000      	.DB  0x0,0x21,0x0,0x0,0x0,0x0,0x0,0x0
000184 0000
000185 0000
000186 0000
000187 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000188 0000
000189 0000
00018a 0000
00018b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018c 0000
00018d 2222
00018e 2222
00018f 2222      	.DB  0x0,0x0,0x22,0x22,0x22,0x22,0x22,0x22
000190 2727
000191 2727
000192 2727
000193 2727      	.DB  0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27
000194 2323
000195 2323
000196 2323
000197 2323      	.DB  0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23
000198 2323
000199 1300
00019a 1313
00019b 0000      	.DB  0x23,0x23,0x0,0x13,0x13,0x13,0x0,0x0
00019c 0000
00019d 0000
00019e 0000
00019f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001a0 0000
0001a1 0000
0001a2 0000
0001a3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001a4 0000
0001a5 0000
0001a6 0003
0001a7 0000      	.DB  0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0
0001a8 0000
0001a9 0000
0001aa 0000
0001ab 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ac 0000
0001ad 0000
0001ae 0000
0001af 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b0 0000
0001b1 0000
0001b2 2400
0001b3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x24,0x0,0x0
0001b4 0000
0001b5 0000
0001b6 0000
0001b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b8 0000
0001b9 0000
0001ba 0000
0001bb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001bc 0000
0001bd 0000
0001be 0000
0001bf 0025      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x25,0x0
0001c0 0000
0001c1 0000
0001c2 0000
0001c3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001c4 0000
0001c5 0000
0001c6 0000
0001c7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001c8 0000
0001c9 0000
0001ca 0000
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1171): warning: .cseg .db misalignment - padding zero byte
0001cb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _Command_number:
0001cc 0100
0001cd 0302
0001ce 0b06
0001cf 0d0c      	.DB  0x0,0x1,0x2,0x3,0x6,0xB,0xC,0xD
0001d0 0f0e
0001d1 1110
0001d2 1312
0001d3 2423      	.DB  0xE,0xF,0x10,0x11,0x12,0x13,0x23,0x24
0001d4 2625
0001d5 2928
0001d6 2b2a
0001d7 2d2c      	.DB  0x25,0x26,0x28,0x29,0x2A,0x2B,0x2C,0x2D
0001d8 2f2e
0001d9 3130
0001da 6c3b
0001db 006d      	.DB  0x2E,0x2F,0x30,0x31,0x3B,0x6C,0x6D,0x0
0001dc 0000
0001dd 0100
0001de 0000
0001df 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0
0001e0 0000
0001e1 0101
0001e2 0101
0001e3 0101      	.DB  0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1
0001e4 0101
0001e5 0101
0001e6 0101
0001e7 0101      	.DB  0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1
0001e8 0001
0001e9 0101
0001ea 0101
0001eb 0100      	.DB  0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x1
0001ec 0101
0001ed 0000
0001ee 0000
0001ef 0000      	.DB  0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0
0001f0 0000
0001f1 0000
0001f2 0000
0001f3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f4 0000
0001f5 0000
0001f6 0000
0001f7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f8 0000
0001f9 0100
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1184): warning: .cseg .db misalignment - padding zero byte
0001fa 0001      	.DB  0x0,0x0,0x0,0x1,0x1
                 _crctable:
0001fb 0000
0001fc c1c0
0001fd 81c1
0001fe 4001      	.DB  0x0,0x0,0xC0,0xC1,0xC1,0x81,0x1,0x40
0001ff 01c3
000200 c003
000201 8002
000202 41c2      	.DB  0xC3,0x1,0x3,0xC0,0x2,0x80,0xC2,0x41
000203 01c6
000204 c006
000205 8007
000206 41c7      	.DB  0xC6,0x1,0x6,0xC0,0x7,0x80,0xC7,0x41
000207 0005
000208 c1c5
000209 81c4
00020a 4004      	.DB  0x5,0x0,0xC5,0xC1,0xC4,0x81,0x4,0x40
00020b 01cc
00020c c00c
00020d 800d
00020e 41cd      	.DB  0xCC,0x1,0xC,0xC0,0xD,0x80,0xCD,0x41
00020f 000f
000210 c1cf
000211 81ce
000212 400e      	.DB  0xF,0x0,0xCF,0xC1,0xCE,0x81,0xE,0x40
000213 000a
000214 c1ca
000215 81cb
000216 400b      	.DB  0xA,0x0,0xCA,0xC1,0xCB,0x81,0xB,0x40
000217 01c9
000218 c009
000219 8008
00021a 41c8      	.DB  0xC9,0x1,0x9,0xC0,0x8,0x80,0xC8,0x41
00021b 01d8
00021c c018
00021d 8019
00021e 41d9      	.DB  0xD8,0x1,0x18,0xC0,0x19,0x80,0xD9,0x41
00021f 001b
000220 c1db
000221 81da
000222 401a      	.DB  0x1B,0x0,0xDB,0xC1,0xDA,0x81,0x1A,0x40
000223 001e
000224 c1de
000225 81df
000226 401f      	.DB  0x1E,0x0,0xDE,0xC1,0xDF,0x81,0x1F,0x40
000227 01dd
000228 c01d
000229 801c
00022a 41dc      	.DB  0xDD,0x1,0x1D,0xC0,0x1C,0x80,0xDC,0x41
00022b 0014
00022c c1d4
00022d 81d5
00022e 4015      	.DB  0x14,0x0,0xD4,0xC1,0xD5,0x81,0x15,0x40
00022f 01d7
000230 c017
000231 8016
000232 41d6      	.DB  0xD7,0x1,0x17,0xC0,0x16,0x80,0xD6,0x41
000233 01d2
000234 c012
000235 8013
000236 41d3      	.DB  0xD2,0x1,0x12,0xC0,0x13,0x80,0xD3,0x41
000237 0011
000238 c1d1
000239 81d0
00023a 4010      	.DB  0x11,0x0,0xD1,0xC1,0xD0,0x81,0x10,0x40
00023b 01f0
00023c c030
00023d 8031
00023e 41f1      	.DB  0xF0,0x1,0x30,0xC0,0x31,0x80,0xF1,0x41
00023f 0033
000240 c1f3
000241 81f2
000242 4032      	.DB  0x33,0x0,0xF3,0xC1,0xF2,0x81,0x32,0x40
000243 0036
000244 c1f6
000245 81f7
000246 4037      	.DB  0x36,0x0,0xF6,0xC1,0xF7,0x81,0x37,0x40
000247 01f5
000248 c035
000249 8034
00024a 41f4      	.DB  0xF5,0x1,0x35,0xC0,0x34,0x80,0xF4,0x41
00024b 003c
00024c c1fc
00024d 81fd
00024e 403d      	.DB  0x3C,0x0,0xFC,0xC1,0xFD,0x81,0x3D,0x40
00024f 01ff
000250 c03f
000251 803e
000252 41fe      	.DB  0xFF,0x1,0x3F,0xC0,0x3E,0x80,0xFE,0x41
000253 01fa
000254 c03a
000255 803b
000256 41fb      	.DB  0xFA,0x1,0x3A,0xC0,0x3B,0x80,0xFB,0x41
000257 0039
000258 c1f9
000259 81f8
00025a 4038      	.DB  0x39,0x0,0xF9,0xC1,0xF8,0x81,0x38,0x40
00025b 0028
00025c c1e8
00025d 81e9
00025e 4029      	.DB  0x28,0x0,0xE8,0xC1,0xE9,0x81,0x29,0x40
00025f 01eb
000260 c02b
000261 802a
000262 41ea      	.DB  0xEB,0x1,0x2B,0xC0,0x2A,0x80,0xEA,0x41
000263 01ee
000264 c02e
000265 802f
000266 41ef      	.DB  0xEE,0x1,0x2E,0xC0,0x2F,0x80,0xEF,0x41
000267 002d
000268 c1ed
000269 81ec
00026a 402c      	.DB  0x2D,0x0,0xED,0xC1,0xEC,0x81,0x2C,0x40
00026b 01e4
00026c c024
00026d 8025
00026e 41e5      	.DB  0xE4,0x1,0x24,0xC0,0x25,0x80,0xE5,0x41
00026f 0027
000270 c1e7
000271 81e6
000272 4026      	.DB  0x27,0x0,0xE7,0xC1,0xE6,0x81,0x26,0x40
000273 0022
000274 c1e2
000275 81e3
000276 4023      	.DB  0x22,0x0,0xE2,0xC1,0xE3,0x81,0x23,0x40
000277 01e1
000278 c021
000279 8020
00027a 41e0      	.DB  0xE1,0x1,0x21,0xC0,0x20,0x80,0xE0,0x41
00027b 01a0
00027c c060
00027d 8061
00027e 41a1      	.DB  0xA0,0x1,0x60,0xC0,0x61,0x80,0xA1,0x41
00027f 0063
000280 c1a3
000281 81a2
000282 4062      	.DB  0x63,0x0,0xA3,0xC1,0xA2,0x81,0x62,0x40
000283 0066
000284 c1a6
000285 81a7
000286 4067      	.DB  0x66,0x0,0xA6,0xC1,0xA7,0x81,0x67,0x40
000287 01a5
000288 c065
000289 8064
00028a 41a4      	.DB  0xA5,0x1,0x65,0xC0,0x64,0x80,0xA4,0x41
00028b 006c
00028c c1ac
00028d 81ad
00028e 406d      	.DB  0x6C,0x0,0xAC,0xC1,0xAD,0x81,0x6D,0x40
00028f 01af
000290 c06f
000291 806e
000292 41ae      	.DB  0xAF,0x1,0x6F,0xC0,0x6E,0x80,0xAE,0x41
000293 01aa
000294 c06a
000295 806b
000296 41ab      	.DB  0xAA,0x1,0x6A,0xC0,0x6B,0x80,0xAB,0x41
000297 0069
000298 c1a9
000299 81a8
00029a 4068      	.DB  0x69,0x0,0xA9,0xC1,0xA8,0x81,0x68,0x40
00029b 0078
00029c c1b8
00029d 81b9
00029e 4079      	.DB  0x78,0x0,0xB8,0xC1,0xB9,0x81,0x79,0x40
00029f 01bb
0002a0 c07b
0002a1 807a
0002a2 41ba      	.DB  0xBB,0x1,0x7B,0xC0,0x7A,0x80,0xBA,0x41
0002a3 01be
0002a4 c07e
0002a5 807f
0002a6 41bf      	.DB  0xBE,0x1,0x7E,0xC0,0x7F,0x80,0xBF,0x41
0002a7 007d
0002a8 c1bd
0002a9 81bc
0002aa 407c      	.DB  0x7D,0x0,0xBD,0xC1,0xBC,0x81,0x7C,0x40
0002ab 01b4
0002ac c074
0002ad 8075
0002ae 41b5      	.DB  0xB4,0x1,0x74,0xC0,0x75,0x80,0xB5,0x41
0002af 0077
0002b0 c1b7
0002b1 81b6
0002b2 4076      	.DB  0x77,0x0,0xB7,0xC1,0xB6,0x81,0x76,0x40
0002b3 0072
0002b4 c1b2
0002b5 81b3
0002b6 4073      	.DB  0x72,0x0,0xB2,0xC1,0xB3,0x81,0x73,0x40
0002b7 01b1
0002b8 c071
0002b9 8070
0002ba 41b0      	.DB  0xB1,0x1,0x71,0xC0,0x70,0x80,0xB0,0x41
0002bb 0050
0002bc c190
0002bd 8191
0002be 4051      	.DB  0x50,0x0,0x90,0xC1,0x91,0x81,0x51,0x40
0002bf 0193
0002c0 c053
0002c1 8052
0002c2 4192      	.DB  0x93,0x1,0x53,0xC0,0x52,0x80,0x92,0x41
0002c3 0196
0002c4 c056
0002c5 8057
0002c6 4197      	.DB  0x96,0x1,0x56,0xC0,0x57,0x80,0x97,0x41
0002c7 0055
0002c8 c195
0002c9 8194
0002ca 4054      	.DB  0x55,0x0,0x95,0xC1,0x94,0x81,0x54,0x40
0002cb 019c
0002cc c05c
0002cd 805d
0002ce 419d      	.DB  0x9C,0x1,0x5C,0xC0,0x5D,0x80,0x9D,0x41
0002cf 005f
0002d0 c19f
0002d1 819e
0002d2 405e      	.DB  0x5F,0x0,0x9F,0xC1,0x9E,0x81,0x5E,0x40
0002d3 005a
0002d4 c19a
0002d5 819b
0002d6 405b      	.DB  0x5A,0x0,0x9A,0xC1,0x9B,0x81,0x5B,0x40
0002d7 0199
0002d8 c059
0002d9 8058
0002da 4198      	.DB  0x99,0x1,0x59,0xC0,0x58,0x80,0x98,0x41
0002db 0188
0002dc c048
0002dd 8049
0002de 4189      	.DB  0x88,0x1,0x48,0xC0,0x49,0x80,0x89,0x41
0002df 004b
0002e0 c18b
0002e1 818a
0002e2 404a      	.DB  0x4B,0x0,0x8B,0xC1,0x8A,0x81,0x4A,0x40
0002e3 004e
0002e4 c18e
0002e5 818f
0002e6 404f      	.DB  0x4E,0x0,0x8E,0xC1,0x8F,0x81,0x4F,0x40
0002e7 018d
0002e8 c04d
0002e9 804c
0002ea 418c      	.DB  0x8D,0x1,0x4D,0xC0,0x4C,0x80,0x8C,0x41
0002eb 0044
0002ec c184
0002ed 8185
0002ee 4045      	.DB  0x44,0x0,0x84,0xC1,0x85,0x81,0x45,0x40
0002ef 0187
0002f0 c047
0002f1 8046
0002f2 4186      	.DB  0x87,0x1,0x47,0xC0,0x46,0x80,0x86,0x41
0002f3 0182
0002f4 c042
0002f5 8043
0002f6 4183      	.DB  0x82,0x1,0x42,0xC0,0x43,0x80,0x83,0x41
0002f7 0041
0002f8 c181
0002f9 8180
0002fa 4040      	.DB  0x41,0x0,0x81,0xC1,0x80,0x81,0x40,0x40
                 
                 ;GPIOR0 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 
                 _0x3:
0002fb 0000
0002fc 3f80      	.DB  0x0,0x0,0x80,0x3F
                 _0x4:
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1257): warning: .cseg .db misalignment - padding zero byte
0002fd 0001      	.DB  0x1
                 _0x5:
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1259): warning: .cseg .db misalignment - padding zero byte
0002fe 0002      	.DB  0x2
                 _0x6:
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1261): warning: .cseg .db misalignment - padding zero byte
0002ff 0001      	.DB  0x1
                 _0x7:
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1263): warning: .cseg .db misalignment - padding zero byte
000300 0005      	.DB  0x5
                 _0x11C:
000301 0001      	.DB  0x1,0x0
                 _0x202005F:
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1267): warning: .cseg .db misalignment - padding zero byte
000302 0001      	.DB  0x1
                 _0x2020000:
000303 4e2d
000304 4e41
C:\Documents and Settings\Metelkin\Рабочий стол\flash\ttest\List\vt003spi+adc.asm(1269): warning: .cseg .db misalignment - padding zero byte
000305 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
000306 0001      	.DW  0x01
000307 027b      	.DW  _SPI_tEnd
000308 05fe      	.DW  _0x6*2
                 
000309 0001      	.DW  0x01
00030a 027d      	.DW  _preambula_bytes
00030b 0600      	.DW  _0x7*2
                 
00030c 0002      	.DW  0x02
00030d 0003      	.DW  0x03
00030e 0602      	.DW  _0x11C*2
                 
00030f 0001      	.DW  0x01
000310 02dc      	.DW  __seed_G101
000311 0604      	.DW  _0x202005F*2
                 
                 _0xFFFFFFFF:
000312 0000      	.DW  0
                 
                 __RESET:
000313 94f8      	CLI
000314 27ee      	CLR  R30
000315 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000316 e0f1      	LDI  R31,1
000317 bff5      	OUT  MCUCR,R31
000318 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000319 e1f8      	LDI  R31,0x18
00031a 95a8      	WDR
00031b b7a4      	IN   R26,MCUSR
00031c 7fa7      	CBR  R26,8
00031d bfa4      	OUT  MCUSR,R26
00031e 93f0 0060 	STS  WDTCSR,R31
000320 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000322 e08d      	LDI  R24,(14-2)+1
000323 e0a2      	LDI  R26,2
000324 27bb      	CLR  R27
                 __CLEAR_REG:
000325 93ed      	ST   X+,R30
000326 958a      	DEC  R24
000327 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000328 e080      	LDI  R24,LOW(0x400)
000329 e094      	LDI  R25,HIGH(0x400)
00032a e0a0      	LDI  R26,LOW(0x100)
00032b e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
00032c 93ed      	ST   X+,R30
00032d 9701      	SBIW R24,1
00032e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00032f e0ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000330 e0f6      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000331 9185      	LPM  R24,Z+
000332 9195      	LPM  R25,Z+
000333 9700      	SBIW R24,0
000334 f061      	BREQ __GLOBAL_INI_END
000335 91a5      	LPM  R26,Z+
000336 91b5      	LPM  R27,Z+
000337 9005      	LPM  R0,Z+
000338 9015      	LPM  R1,Z+
000339 01bf      	MOVW R22,R30
00033a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00033b 9005      	LPM  R0,Z+
00033c 920d      	ST   X+,R0
00033d 9701      	SBIW R24,1
00033e f7e1      	BRNE __GLOBAL_INI_LOOP
00033f 01fb      	MOVW R30,R22
000340 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000341 e0e0      	LDI  R30,__GPIOR0_INIT
000342 bbee      	OUT  GPIOR0,R30
                 
                 ;STACK POINTER INITIALIZATION
000343 efef      	LDI  R30,LOW(0x4FF)
000344 bfed      	OUT  SPL,R30
000345 e0e4      	LDI  R30,HIGH(0x4FF)
000346 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000347 e0c0      	LDI  R28,LOW(0x200)
000348 e0d2      	LDI  R29,HIGH(0x200)
                 
000349 940c 0d52 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.03.4 Standard
                 ;Automatic Program Generator
                 ;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2010
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type           : ATmega168P
                 ;Program type        : Application
                 ;Clock frequency     : 1 MHz
                 ;Memory model        : Small
                 ;External RAM size   : 0
                 ;Data Stack size     : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega168p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;//#include <stdio.h>
                 ;
                 ;#include <data_arrays.h>
                 ;
                 ;//#include <stdlib.h>
                 ;#include <math.h>
                 ;//#include <data_arrays.c>
                 ;
                 ;
                 ;char rxEnable=0, txEnable=1;
                 ;
                 ;
                 ;
                 ;
                 ;#define RXB8 1
                 ;#define TXB8 0
                 ;#define UPE 2
                 ;#define OVR 3
                 ;#define FE 4
                 ;#define UDRE 5
                 ;#define RXC 7
                 ;//#define disable_uart UCSR0B=0xc0
                 ;//#define enable_uart UCSR0B=0xd8
                 ;//#define disable_uart UCSR0B=0x00
                 ;//#define enable_uart UCSR0B=0x18
                 ;//#define enable_transmit UCSR0B=0x08
                 ;//#define enable_recieve UCSR0B=0x10
                 ;#define alarm3_75mA 0x3c00
                 ;#define alarm22mA 0x6000
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define RxEn UCSR0B=(UCSR0B&0xc0)|0x10
                 ;#define TxEn UCSR0B=(UCSR0B&0xc0)|0x08
                 ;#define Transmit PORTD.3=0//=PORTD&0xf7
                 ;#define Recieve PORTD.3=1//PORTD|0x08
                 ;#define wait_startOCD EICRA=0x03
                 ;#define wait_stopOCD EICRA=0x00
                 ;#define disable_uart UCSR0B=0xc0
                 ;#define disable_eints {EIMSK=0x00;EIFR=0x00;}
                 ;#define enable_eints {EIMSK=0x01;EIFR=0x01;}
                 ;//#define enable_led PORTD=PORTD|0x40
                 ;//#define disable_led PORTD=PORTD&0xbf
                 ;#define start_wait_Rx_timer {TIMSK0=0x01;TCCR0A=0x00;TCCR0B=0x04;TCNT0=0xA0;}
                 ;#define stop_wait_Rx_timer {TIMSK0=0x00;TCCR0A=0x00;TCCR0B=0x00;TCNT0=0x00;}
                 ;#define disable_SPI {SPCR=0x12;}
                 ;#define enable_SPI {SPCR=0x52;}
                 ;#define DAC_max_val 0xffc0
                 ;#define mamps_toDAC_default_ratio 0.00024437928
                 ;#define setlevel_0_10 {PORTD.7=0;PORTD.6=0;}
                 ;#define setlevel_0_20 {PORTD.7=0;PORTD.6=1;}
                 ;#define setlevel_0_30 {PORTD.7=1;PORTD.6=0;}
                 ;#define setlevel_0_50 {PORTD.7=1;PORTD.6=1;}
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_10;
                 ;//eeprom unsigned int buf;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_10;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_20;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_20;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_30;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_30;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_50;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_50;
                 ;float DAC_to_current_ratio=1;
                 
                 	.DSEG
                 ;unsigned int calibration_point1;
                 ;unsigned int calibration_point2;
                 ;eeprom unsigned int ADC_PV_calibration_point1[4];
                 ;eeprom unsigned int ADC_PV_calibration_point2[4];
                 ;eeprom char rangeIndexEep;
                 ;eeprom char CalibrationConfigChanged;
                 ;eeprom float calibrationKeep[4];
                 ;eeprom float calibrationBeep[4];
                 ;eeprom int crceep = 0x0000;
                 ;eeprom const int crcstatic = 0x15e3;
                 ;//eeprom unsigned int serial_address=0x0000;
                 ;//flash const unsigned long *serial @0x00100;
                 ;char rangeIndex;
                 ;float calibrationK;
                 ;float calibrationB;
                 ;unsigned int tmp_calibration, crc;
                 ;unsigned int ADC_PV_zero_val=0x0001;
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;char string_tmp[4];
                 ;//char *str[4];
                 ;char com_data_rx[25];
                 ;float dynamic_variables[3];         //0 - скорость, 1 - ток, 2 - %диапазона
                 ;char dataToSave,sensor_address=0x02,com_bytes_rx=0,update_args_flag=0,p_bank_addr=0;
                 ;void transmit_HART(void); int check_recieved_message(); int generate_command_data_array_answer(char command_recieved);
                 ;void update_eeprom_parameters(char update_flag);
                 ;void start_transmit(int transmit_param); void clear_buffer();
                 ;void CalculateCalibrationRates();
                 ;void ResetDeviceSettings(char notreset);
                 ;void  CRC_update(unsigned char d);
                 ;int read_program_memory (int adr);
                 ;#if RX_BUFFER_SIZE0<256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0,echo;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0,SPI_data;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0,printflag=0,RxTx=0,new_data=0,message_recieved=0,answering=0,burst_mode=0;
                 ;flash  int crctable[256]= {
                 ;        0x0000, 0xC1C0, 0x81C1, 0x4001, 0x01C3, 0xC003, 0x8002, 0x41C2, 0x01C6, 0xC006,
                 ;        0x8007, 0x41C7, 0x0005, 0xC1C5, 0x81C4, 0x4004, 0x01CC, 0xC00C, 0x800D, 0x41CD,
                 ;        0x000F, 0xC1CF, 0x81CE, 0x400E, 0x000A, 0xC1CA, 0x81CB, 0x400B, 0x01C9, 0xC009,
                 ;        0x8008, 0x41C8, 0x01D8, 0xC018, 0x8019, 0x41D9, 0x001B, 0xC1DB, 0x81DA, 0x401A,
                 ;        0x001E, 0xC1DE, 0x81DF, 0x401F, 0x01DD, 0xC01D, 0x801C, 0x41DC, 0x0014, 0xC1D4,
                 ;        0x81D5, 0x4015, 0x01D7, 0xC017, 0x8016, 0x41D6, 0x01D2, 0xC012, 0x8013, 0x41D3,
                 ;        0x0011, 0xC1D1, 0x81D0, 0x4010, 0x01F0, 0xC030, 0x8031, 0x41F1, 0x0033, 0xC1F3,
                 ;        0x81F2, 0x4032, 0x0036, 0xC1F6, 0x81F7, 0x4037, 0x01F5, 0xC035, 0x8034, 0x41F4,
                 ;        0x003C, 0xC1FC, 0x81FD, 0x403D, 0x01FF, 0xC03F, 0x803E, 0x41FE, 0x01FA, 0xC03A,
                 ;        0x803B, 0x41FB, 0x0039, 0xC1F9, 0x81F8, 0x4038, 0x0028, 0xC1E8, 0x81E9, 0x4029,
                 ;        0x01EB, 0xC02B, 0x802A, 0x41EA, 0x01EE, 0xC02E, 0x802F, 0x41EF, 0x002D, 0xC1ED,
                 ;        0x81EC, 0x402C, 0x01E4, 0xC024, 0x8025, 0x41E5, 0x0027, 0xC1E7, 0x81E6, 0x4026,
                 ;        0x0022, 0xC1E2, 0x81E3, 0x4023, 0x01E1, 0xC021, 0x8020, 0x41E0, 0x01A0, 0xC060,
                 ;        0x8061, 0x41A1, 0x0063, 0xC1A3, 0x81A2, 0x4062, 0x0066, 0xC1A6, 0x81A7, 0x4067,
                 ;        0x01A5, 0xC065, 0x8064, 0x41A4, 0x006C, 0xC1AC, 0x81AD, 0x406D, 0x01AF, 0xC06F,
                 ;        0x806E, 0x41AE, 0x01AA, 0xC06A, 0x806B, 0x41AB, 0x0069, 0xC1A9, 0x81A8, 0x4068,
                 ;        0x0078, 0xC1B8, 0x81B9, 0x4079, 0x01BB, 0xC07B, 0x807A, 0x41BA, 0x01BE, 0xC07E,
                 ;        0x807F, 0x41BF, 0x007D, 0xC1BD, 0x81BC, 0x407C, 0x01B4, 0xC074, 0x8075, 0x41B5,
                 ;        0x0077, 0xC1B7, 0x81B6, 0x4076, 0x0072, 0xC1B2, 0x81B3, 0x4073, 0x01B1, 0xC071,
                 ;        0x8070, 0x41B0, 0x0050, 0xC190, 0x8191, 0x4051, 0x0193, 0xC053, 0x8052, 0x4192,
                 ;        0x0196, 0xC056, 0x8057, 0x4197, 0x0055, 0xC195, 0x8194, 0x4054, 0x019C, 0xC05C,
                 ;	0x805D, 0x419D, 0x005F, 0xC19F, 0x819E, 0x405E, 0x005A, 0xC19A, 0x819B, 0x405B,
                 ;	0x0199, 0xC059, 0x8058, 0x4198, 0x0188, 0xC048, 0x8049, 0x4189, 0x004B, 0xC18B,
                 ;	0x818A, 0x404A, 0x004E, 0xC18E, 0x818F, 0x404F, 0x018D, 0xC04D, 0x804C, 0x418C,
                 ;	0x0044, 0xC184, 0x8185, 0x4045, 0x0187, 0xC047, 0x8046, 0x4186, 0x0182, 0xC042,
                 ;	0x8043, 0x4183, 0x0041, 0xC181, 0x8180, 0x4040};
                 ;long  adc_data, DAC_data, SPI_tData ;
                 ;char SPI_tEnd=1,checking_result=0,preambula_bytes=5,preambula_bytes_rec=0,bytes_quantity_ans=0,bytes_quantity_q=0,data_q=0, command_rx_val=0;
                 ;// USART Receiver interrupt service routine
                 ;char Command_data[25];
                 ;
                 ;int read_program_memory (int adr)
                 ; 0000 00A6 {
                 
                 	.CSEG
                 _read_program_memory:
                 ; 0000 00A7        #asm
                 ;	adr -> Y+0
                 ; 0000 00A8        LPM R22,Z+;//     загрузка в регистр R23 содержимого флеш по адресу Z с постинкрементом (мл. байт)
00034b 9165             LPM R22,Z+;//     загрузка в регистр R23 содержимого флеш по адресу Z с постинкрементом (мл. байт)
                 ; 0000 00A9        LPM R23,Z; //     загрузка в регистр R22 содержимого Flash  по адресу Z+1 (старший байт)
00034c 9174             LPM R23,Z; //     загрузка в регистр R22 содержимого Flash  по адресу Z+1 (старший байт)
                 ; 0000 00AA        MOV R30, R22;
00034d 2fe6             MOV R30, R22;
                 ; 0000 00AB        MOV R31, R23;
00034e 2ff7             MOV R31, R23;
                 ; 0000 00AC        #endasm
                 ; 0000 00AD }
00034f 9622      	ADIW R28,2
000350 9508      	RET
                 ;void  CRC_update(unsigned char d)
                 ; 0000 00AF {
                 _CRC_update:
                 ; 0000 00B0   //unsigned char uindex;
                 ; 0000 00B1   //uindex = CRCHigh^d;
                 ; 0000 00B2   //CRCHigh=CRCLow^((int)crctable[uindex]>>8);
                 ; 0000 00B3   //CRCLow=crctable[uindex];
                 ; 0000 00B4   //crc = CRCHigh;
                 ; 0000 00B5   //crc = ((int)crc)<<8+CRCLow;
                 ; 0000 00B6   crc = crctable[((crc>>8)^d)&0xFF] ^ (crc<<8);
                 ;	d -> Y+0
000351 2dee      	MOV  R30,R14
000352 70f0      	ANDI R31,HIGH(0x0)
000353 01df      	MOVW R26,R30
000354 81e8      	LD   R30,Y
000355 e0f0      	LDI  R31,0
000356 27ae      	EOR  R26,R30
000357 27bf      	EOR  R27,R31
000358 efef      	LDI  R30,LOW(255)
000359 e0f0      	LDI  R31,HIGH(255)
00035a 23ea      	AND  R30,R26
00035b 23fb      	AND  R31,R27
00035c efa6      	LDI  R26,LOW(_crctable*2)
00035d e0b3      	LDI  R27,HIGH(_crctable*2)
00035e 0fee      	LSL  R30
00035f 1fff      	ROL  R31
000360 0fea      	ADD  R30,R26
000361 1ffb      	ADC  R31,R27
000362 940e 0e55 	CALL __GETW1PF
000364 01df      	MOVW R26,R30
000365 2dfd      	MOV  R31,R13
000366 e0e0      	LDI  R30,LOW(0)
000367 27ea      	EOR  R30,R26
000368 27fb      	EOR  R31,R27
                +
000369 2ede     +MOV R13 , R30
00036a 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 00B7 }
00036b 9621      	ADIW R28,1
00036c 9508      	RET
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)     //таймер, который ждет необходимое число циклов, соответствующее появлению сигнала на детекторе несущей
                 ; 0000 00BA {
                 _timer0_ovf_isr:
00036d 93ea      	ST   -Y,R30
                 ; 0000 00BB enable_eints;
00036e e0e1      	LDI  R30,LOW(1)
00036f bbed      	OUT  0x1D,R30
000370 bbec      	OUT  0x1C,R30
                 ; 0000 00BC wait_stopOCD;
000371 e0e0      	LDI  R30,LOW(0)
000372 93e0 0069 	STS  105,R30
                 ; 0000 00BD }
000374 91e9      	LD   R30,Y+
000375 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;interrupt [USART_RXC] void usart_rx_isr(void)//прием по USART
                 ; 0000 00C1 {
                 _usart_rx_isr:
000376 93aa      	ST   -Y,R26
000377 93ba      	ST   -Y,R27
000378 93ea      	ST   -Y,R30
000379 93fa      	ST   -Y,R31
00037a b7ef      	IN   R30,SREG
00037b 93ea      	ST   -Y,R30
                 ; 0000 00C2 
                 ; 0000 00C3 char status,data;
                 ; 0000 00C4 #asm("cli")
00037c 931a      	ST   -Y,R17
00037d 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00037e 94f8      	cli
                 ; 0000 00C5 status=UCSR0A;
00037f 9110 00c0 	LDS  R17,192
                 ; 0000 00C6 
                 ; 0000 00C7 data=UDR0;
000381 9100 00c6 	LDS  R16,198
                 ; 0000 00C8 //#asm("sei")
                 ; 0000 00C9 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)//если нет ошибок, то читаем данные в буфере USART
000383 2fa1      	MOV  R26,R17
000384 e0b0      	LDI  R27,0
000385 e1ec      	LDI  R30,LOW(28)
000386 e0f0      	LDI  R31,HIGH(28)
000387 23ea      	AND  R30,R26
000388 23fb      	AND  R31,R27
000389 9730      	SBIW R30,0
00038a f4d9      	BRNE _0x8
                 ; 0000 00CA    {
                 ; 0000 00CB    rx_buffer0[rx_wr_index0]=data;
00038b 91e0 0270 	LDS  R30,_rx_wr_index0
00038d e0f0      	LDI  R31,0
00038e 5fe8      	SUBI R30,LOW(-_rx_buffer0)
00038f 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000390 8300      	ST   Z,R16
                 ; 0000 00CC    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000391 91a0 0270 	LDS  R26,_rx_wr_index0
000393 5faf      	SUBI R26,-LOW(1)
000394 93a0 0270 	STS  _rx_wr_index0,R26
000396 34a0      	CPI  R26,LOW(0x40)
000397 f419      	BRNE _0x9
000398 e0e0      	LDI  R30,LOW(0)
000399 93e0 0270 	STS  _rx_wr_index0,R30
                 ; 0000 00CD    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x9:
00039b 91a0 0272 	LDS  R26,_rx_counter0
00039d 5faf      	SUBI R26,-LOW(1)
00039e 93a0 0272 	STS  _rx_counter0,R26
0003a0 34a0      	CPI  R26,LOW(0x40)
0003a1 f421      	BRNE _0xA
                 ; 0000 00CE       {
                 ; 0000 00CF       rx_counter0=0;
0003a2 e0e0      	LDI  R30,LOW(0)
0003a3 93e0 0272 	STS  _rx_counter0,R30
                 ; 0000 00D0       rx_buffer_overflow0=1;
0003a5 9af0      	SBI  0x1E,0
                 ; 0000 00D1 
                 ; 0000 00D2      };
                 _0xA:
                 ; 0000 00D3    };
                 _0x8:
                 ; 0000 00D4  #asm("sei")
0003a6 9478      	sei
                 ; 0000 00D5 }
0003a7 9109      	LD   R16,Y+
0003a8 9119      	LD   R17,Y+
0003a9 91e9      	LD   R30,Y+
0003aa bfef      	OUT  SREG,R30
0003ab 91f9      	LD   R31,Y+
0003ac 91e9      	LD   R30,Y+
0003ad 91b9      	LD   R27,Y+
0003ae 91a9      	LD   R26,Y+
0003af 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) //не используется
                 ; 0000 00DC {
                 ; 0000 00DD char data;
                 ; 0000 00DE while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 00DF data=rx_buffer0[rx_rd_index0];
                 ; 0000 00E0 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 00E1 #asm("cli")
                 ; 0000 00E2 --rx_counter0;
                 ; 0000 00E3 #asm("sei")
                 ; 0000 00E4 return data;
                 ; 0000 00E5 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0<256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)//передача по USART соответственно
                 ; 0000 00F5 {
                 _usart_tx_isr:
0003b0 93aa      	ST   -Y,R26
0003b1 93ea      	ST   -Y,R30
0003b2 93fa      	ST   -Y,R31
0003b3 b7ef      	IN   R30,SREG
0003b4 93ea      	ST   -Y,R30
                 ; 0000 00F6 #asm("cli")
0003b5 94f8      	cli
                 ; 0000 00F7 if (tx_counter0)
0003b6 91e0 02db 	LDS  R30,_tx_counter0
0003b8 30e0      	CPI  R30,0
0003b9 f0a9      	BREQ _0x11
                 ; 0000 00F8    {
                 ; 0000 00F9    --tx_counter0;
0003ba 50e1      	SUBI R30,LOW(1)
0003bb 93e0 02db 	STS  _tx_counter0,R30
                 ; 0000 00FA 
                 ; 0000 00FB    UDR0=tx_buffer0[tx_rd_index0];
0003bd 91e0 02da 	LDS  R30,_tx_rd_index0
0003bf e0f0      	LDI  R31,0
0003c0 56e6      	SUBI R30,LOW(-_tx_buffer0)
0003c1 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0003c2 81e0      	LD   R30,Z
0003c3 93e0 00c6 	STS  198,R30
                 ; 0000 00FC 
                 ; 0000 00FD    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0003c5 91a0 02da 	LDS  R26,_tx_rd_index0
0003c7 5faf      	SUBI R26,-LOW(1)
0003c8 93a0 02da 	STS  _tx_rd_index0,R26
0003ca 34a0      	CPI  R26,LOW(0x40)
0003cb f419      	BRNE _0x12
0003cc e0e0      	LDI  R30,LOW(0)
0003cd 93e0 02da 	STS  _tx_rd_index0,R30
                 ; 0000 00FE    };
                 _0x12:
                 _0x11:
                 ; 0000 00FF    #asm("sei")
0003cf 9478      	sei
                 ; 0000 0100 }
0003d0 91e9      	LD   R30,Y+
0003d1 bfef      	OUT  SREG,R30
0003d2 91f9      	LD   R31,Y+
0003d3 91e9      	LD   R30,Y+
0003d4 91a9      	LD   R26,Y+
0003d5 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)                                       //не используется
                 ; 0000 0107 {
                 ; 0000 0108 //while (tx_counter0 == TX_BUFFER_SIZE0);
                 ; 0000 0109 //#asm("cli")
                 ; 0000 010A //if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 010B //   {
                 ; 0000 010C //   tx_buffer0[tx_wr_index0]=c;
                 ; 0000 010D //   if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 010E //   ++tx_counter0;
                 ; 0000 010F //   }
                 ; 0000 0110 //else
                 ; 0000 0111 while ((UCSR0A & DATA_REGISTER_EMPTY)==0)
                 ;	c -> Y+0
                 ; 0000 0112    UDR0=c;
                 ; 0000 0114 }
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)//первоначально прерывание работает по нарастающему уровню (set_rising_edge_int), а затем ловим низкий (set_falling_edge_int), это устанавливаем уже в таймере, с последующим запуском нашего любимого таймера.1-п                 рием, 0- передача.
                 ; 0000 0119 //изменено, таймер, отсчитывающий задержку, сейчас не активен, пользуемся только OCD ногой модема
                 ; 0000 011A {
0003d6 93aa      _ext_int0_isr:
0003d7 93ea      	ST   -Y,R26
0003d8 93fa      	ST   -Y,R30
0003d9 b7ef      	ST   -Y,R31
0003da 93ea      	IN   R30,SREG
                 	ST   -Y,R30
                 ; 0000 011B //RxTx=!RxTx;//RxTx=0 =>no recieve ||RxTx=1 => recieve||
                 ; 0000 011C //if(RxTx)Recieve;
0003db 91a0 0069 ; 0000 011D if(EICRA==0x03)                    //если сработало прерывание по верхнему уровню, то переключаемся на отлов нижнего уровня и наоборот
0003dd 30a3      	LDS  R26,105
0003de f471      	CPI  R26,LOW(0x3)
                 	BRNE _0x16
                 ; 0000 011E                 {
0003df 9a5b      ; 0000 011F                 Recieve;
                 	SBI  0xB,3
0003e0 91e0 00c1 ; 0000 0120                 RxEn;
0003e2 e0f0      	LDS  R30,193
0003e3 7ce0      	LDI  R31,0
0003e4 70f0      	ANDI R30,LOW(0xC0)
0003e5 61e0      	ANDI R31,HIGH(0xC0)
0003e6 93e0 00c1 	ORI  R30,0x10
                 	STS  193,R30
                 ; 0000 0121                 //wait_stopOCD;
                 ; 0000 0122                 //start_wait_Rx_timer;
                 ; 0000 0123                 //disable_eints;
0003e8 e0e0      ; 0000 0124                 wait_stopOCD;           //EICRA=0x00
0003e9 93e0 0069 	LDI  R30,LOW(0)
                 	STS  105,R30
0003eb 98f4      ; 0000 0125                 message_recieved=0;
                 	CBI  0x1E,4
                 ; 0000 0126                 //mono_channel_mode;
                 ; 0000 0127                 }
0003ec c007      ; 0000 0128 else
                 	RJMP _0x1B
                 _0x16:
                 ; 0000 0129                 {
                 ; 0000 012A                 //Transmit;
                 ; 0000 012B 
                 ; 0000 012C                 //stop_wait_Rx_timer;
0003ed e0e3      ; 0000 012D                 wait_startOCD;            //EICRA=0x03
0003ee 93e0 0069 	LDI  R30,LOW(3)
                 	STS  105,R30
0003f0 ece0      ; 0000 012E                 disable_uart;             //отключаем USART, переходим в режим приема
0003f1 93e0 00c1 	LDI  R30,LOW(192)
                 	STS  193,R30
0003f3 9af4      ; 0000 012F                 message_recieved=1;
                 	SBI  0x1E,4
                 ; 0000 0130 
                 ; 0000 0131                 }
                 _0x1B:
                 ; 0000 0132 //start_check_OCD_timer;//стартуем таймер отсчитывающий задержку 3.33 мс (4 цикла при минимальной частоте 1200Гц)
                 ; 0000 0133 
0003f4 91e9      ; 0000 0134 }
0003f5 bfef      	LD   R30,Y+
0003f6 91f9      	OUT  SREG,R30
0003f7 91e9      	LD   R31,Y+
0003f8 91a9      	LD   R30,Y+
0003f9 9518      	LD   R26,Y+
                 	RETI
                 ;
                 ;
                 ;#pragma used-
                 ;#endif
                 ;// ADC interrupt service routine
                 ;interrupt [ADC_INT] void adc_isr(void)//прерывания ацп по завершению преобразования
                 ; 0000 013B {
0003fa 936a      _adc_isr:
0003fb 937a      	ST   -Y,R22
0003fc 938a      	ST   -Y,R23
0003fd 93ea      	ST   -Y,R24
0003fe 93fa      	ST   -Y,R30
0003ff b7ef      	ST   -Y,R31
000400 93ea      	IN   R30,SREG
                 	ST   -Y,R30
                 ; 0000 013C //#asm("cli")
                +
000401 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000402 958a     +DEC R24
000403 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
                 ; 0000 013E adc_data=ADCW;
000404 91e0 0078 	LDS  R30,120
000406 91f0 0079 	LDS  R31,120+1
000408 2766      	CLR  R22
000409 2777      	CLR  R23
00040a 93e0 0273 	STS  _adc_data,R30
00040c 93f0 0274 	STS  _adc_data+1,R31
00040e 9360 0275 	STS  _adc_data+2,R22
000410 9370 0276 	STS  _adc_data+3,R23
                 ; 0000 013F printflag=1;
000412 9af1      	SBI  0x1E,1
                 ; 0000 0140 ADMUX=0x20;
000413 e2e0      	LDI  R30,LOW(32)
000414 93e0 007c 	STS  124,R30
                 ; 0000 0141 ADCSRA=0x4f;
000416 e4ef      	LDI  R30,LOW(79)
000417 93e0 007a 	STS  122,R30
                 ; 0000 0142 //#asm("sei")
                 ; 0000 0143 }
000419 91e9      	LD   R30,Y+
00041a bfef      	OUT  SREG,R30
00041b 91f9      	LD   R31,Y+
00041c 91e9      	LD   R30,Y+
00041d 9189      	LD   R24,Y+
00041e 9179      	LD   R23,Y+
00041f 9169      	LD   R22,Y+
000420 9518      	RETI
                 ;
                 ;
                 ;// SPI interrupt service routine
                 ;interrupt [SPI_STC] void spi_isr(void)       //прерывание по SPI, в случае, если один фрейм SPI отправлен, оно срабатывает
                 ; 0000 0148 {                                              // в случае необходимости, либо продлевает фрейм, либо финализирует
                 _spi_isr:
000421 93ea      	ST   -Y,R30
000422 b7ef      	IN   R30,SREG
000423 93ea      	ST   -Y,R30
                 ; 0000 0149 
                 ; 0000 014A //#asm
                 ; 0000 014B   //  in   r30,spsr
                 ; 0000 014C   //  in   r30,spdr
                 ; 0000 014D //#endasm
                 ; 0000 014E //data=SPDR;
                 ; 0000 014F //SPCR=0xD0;
                 ; 0000 0150 //SPSR=0x00;
                 ; 0000 0151 // Place your code here
                 ; 0000 0152 if(SPI_tEnd==0){
000424 91e0 027b 	LDS  R30,_SPI_tEnd
000426 30e0      	CPI  R30,0
000427 f431      	BRNE _0x20
                 ; 0000 0153 SPDR=0xff;
000428 efef      	LDI  R30,LOW(255)
000429 bdee      	OUT  0x2E,R30
                 ; 0000 0154 SPI_tEnd=1;
00042a e0e1      	LDI  R30,LOW(1)
00042b 93e0 027b 	STS  _SPI_tEnd,R30
                 ; 0000 0155 }
                 ; 0000 0156 else PORTB.2=0;
00042d c001      	RJMP _0x21
                 _0x20:
00042e 982a      	CBI  0x5,2
                 ; 0000 0157 ADCSRA=0xcf;
                 _0x21:
00042f ecef      	LDI  R30,LOW(207)
000430 93e0 007a 	STS  122,R30
                 ; 0000 0158 
                 ; 0000 0159 }
000432 91e9      	LD   R30,Y+
000433 bfef      	OUT  SREG,R30
000434 91e9      	LD   R30,Y+
000435 9518      	RETI
                 ;
                 ;void transmit_SPI(unsigned int SPI_data,char SPI_mode){//4 режима работы: 2-норма, 0-авария 3.75мА, 1-авария 22мА, 3-моноканал
                 ; 0000 015B void transmit_SPI(unsigned int SPI_data,char SPI_mode){
                 _transmit_SPI:
                 ; 0000 015C //#asm ("cli")                                          //прерывания мы здесь не используем, потому как с ними получается какой-то гемор
                 ; 0000 015D delay_us(10);
                 ;	SPI_data -> Y+1
                 ;	SPI_mode -> Y+0
                +
000436 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000437 958a     +DEC R24
000438 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
                 ; 0000 015E PORTB.2=0;
000439 982a      	CBI  0x5,2
                 ; 0000 015F if(SPI_mode<2)
00043a 81a8      	LD   R26,Y
00043b 30a2      	CPI  R26,LOW(0x2)
00043c f470      	BRSH _0x26
                 ; 0000 0160 {
                 ; 0000 0161 SPDR=SPI_mode;
00043d 81e8      	LD   R30,Y
00043e bdee      	OUT  0x2E,R30
                 ; 0000 0162 if(SPI_mode==0)SPI_data=alarm3_75mA;
00043f 30e0      	CPI  R30,0
000440 f419      	BRNE _0x27
000441 e0e0      	LDI  R30,LOW(15360)
000442 e3fc      	LDI  R31,HIGH(15360)
000443 c002      	RJMP _0x117
                 ; 0000 0163 else SPI_data=alarm22mA;
                 _0x27:
000444 e0e0      	LDI  R30,LOW(24576)
000445 e6f0      	LDI  R31,HIGH(24576)
                 _0x117:
000446 83e9      	STD  Y+1,R30
000447 83fa      	STD  Y+1+1,R31
                 ; 0000 0164 while(SPSR<0x80){;}
                 _0x29:
000448 b5ed      	IN   R30,0x2D
000449 38e0      	CPI  R30,LOW(0x80)
00044a f3e8      	BRLO _0x29
                 ; 0000 0165 }
                 ; 0000 0166 if(SPI_mode==3){
                 _0x26:
00044b 81a8      	LD   R26,Y
00044c 30a3      	CPI  R26,LOW(0x3)
00044d f419      	BRNE _0x2C
                 ; 0000 0167 SPI_data=0;}
00044e e0e0      	LDI  R30,0
00044f 83e9      	STD  Y+1,R30
000450 83ea      	STD  Y+1+1,R30
                 ; 0000 0168 if(SPI_mode==2)
                 _0x2C:
000451 81a8      	LD   R26,Y
000452 30a2      	CPI  R26,LOW(0x2)
000453 f479      	BRNE _0x2D
                 ; 0000 0169 {
                 ; 0000 016A SPDR=(long)(DAC_data>>16);
000454 91a0 0277 	LDS  R26,_DAC_data
000456 91b0 0278 	LDS  R27,_DAC_data+1
000458 9180 0279 	LDS  R24,_DAC_data+2
00045a 9190 027a 	LDS  R25,_DAC_data+3
00045c e1e0      	LDI  R30,LOW(16)
00045d 940e 0e19 	CALL __ASRD12
00045f bdee      	OUT  0x2E,R30
                 ; 0000 016B while(SPSR<0x80){;}
                 _0x2E:
000460 b5ed      	IN   R30,0x2D
000461 38e0      	CPI  R30,LOW(0x80)
000462 f3e8      	BRLO _0x2E
                 ; 0000 016C }
                 ; 0000 016D SPDR=SPI_data>>8;
                 _0x2D:
000463 81ea      	LDD  R30,Y+2
000464 70f0      	ANDI R31,HIGH(0x0)
000465 bdee      	OUT  0x2E,R30
                 ; 0000 016E PORTB.2=0;
000466 982a      	CBI  0x5,2
                 ; 0000 016F while(SPSR<0x80){;}
                 _0x33:
000467 b5ed      	IN   R30,0x2D
000468 38e0      	CPI  R30,LOW(0x80)
000469 f3e8      	BRLO _0x33
                 ; 0000 0170 SPDR=SPI_data;
00046a 81e9      	LDD  R30,Y+1
00046b 81fa      	LDD  R31,Y+1+1
00046c bdee      	OUT  0x2E,R30
                 ; 0000 0171 while(SPSR<0x80){;}
                 _0x36:
00046d b5ed      	IN   R30,0x2D
00046e 38e0      	CPI  R30,LOW(0x80)
00046f f3e8      	BRLO _0x36
                 ; 0000 0172 //#asm ("sei")
                 ; 0000 0173 }
000470 9623      	ADIW R28,3
000471 9508      	RET
                 ;
                 ;
                 ;void transmit_HART(void)//подпрограмма передачи в по HART
                 ; 0000 0177 {
                 _transmit_HART:
                 ; 0000 0178 int error_log;
                 ; 0000 0179 error_log=check_recieved_message();    //здесь проверяем корректность принятого сообщения и устанавливаем значение переменной "результат проверки"
000472 931a      	ST   -Y,R17
000473 930a      	ST   -Y,R16
                 ;	error_log -> R16,R17
000474 d325      	RCALL _check_recieved_message
000475 018f      	MOVW R16,R30
                 ; 0000 017A if(answering)                         //если нужен ответ
000476 9bf5      	SBIS 0x1E,5
000477 c01c      	RJMP _0x39
                 ; 0000 017B         {
                 ; 0000 017C         if (!error_log)               //ошибок нет
000478 2e00      	MOV  R0,R16
000479 2a01      	OR   R0,R17
00047a f469      	BRNE _0x3A
                 ; 0000 017D                 {
                 ; 0000 017E                 checking_result=0;                //сбрасываем "результат проверки"
00047b e0e0      	LDI  R30,LOW(0)
00047c 93e0 027c 	STS  _checking_result,R30
                 ; 0000 017F                 rx_wr_index0=0;
00047e 93e0 0270 	STS  _rx_wr_index0,R30
                 ; 0000 0180                 rx_buffer_overflow0=0;
000480 98f0      	CBI  0x1E,0
                 ; 0000 0181                 error_log=error_log|(generate_command_data_array_answer(command_rx_val));//здесь обращаемся в генератор массивов ответов по HART
000481 91e0 0280 	LDS  R30,_command_rx_val
000483 93ea      	ST   -Y,R30
000484 d19c      	RCALL _generate_command_data_array_answer
                +
000485 2b0e     +OR R16 , R30
000486 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0000 0182                 start_transmit(error_log);
000487 c008      	RJMP _0x118
                 ; 0000 0183                 }
                 ; 0000 0184         else
                 _0x3A:
                 ; 0000 0185                 { //соответственно, если ошибки есть
                 ; 0000 0186                 //PORTD=0x08;
                 ; 0000 0187                 Recieve;
000488 9a5b      	SBI  0xB,3
                 ; 0000 0188                 rx_buffer_overflow0=0;
000489 98f0      	CBI  0x1E,0
                 ; 0000 0189                 checking_result=0;
00048a e0e0      	LDI  R30,LOW(0)
00048b 93e0 027c 	STS  _checking_result,R30
                 ; 0000 018A                 rx_wr_index0=0;
00048d 93e0 0270 	STS  _rx_wr_index0,R30
                 ; 0000 018B                 message_recieved=0;
00048f 98f4      	CBI  0x1E,4
                 ; 0000 018C                 start_transmit(error_log);
                 _0x118:
000490 931a      	ST   -Y,R17
000491 930a      	ST   -Y,R16
000492 d014      	RCALL _start_transmit
                 ; 0000 018D                 }
                 ; 0000 018E         }
                 ; 0000 018F else                              //ответ по HART не нужен
000493 c00f      	RJMP _0x44
                 _0x39:
                 ; 0000 0190         {
                 ; 0000 0191         rx_buffer_overflow0=0;
000494 98f0      	CBI  0x1E,0
                 ; 0000 0192         checking_result=0;
000495 e0e0      	LDI  R30,LOW(0)
000496 93e0 027c 	STS  _checking_result,R30
                 ; 0000 0193         rx_wr_index0=0;
000498 93e0 0270 	STS  _rx_wr_index0,R30
                 ; 0000 0194         RxEn;
00049a 91e0 00c1 	LDS  R30,193
00049c e0f0      	LDI  R31,0
00049d 7ce0      	ANDI R30,LOW(0xC0)
00049e 70f0      	ANDI R31,HIGH(0xC0)
00049f 61e0      	ORI  R30,0x10
0004a0 93e0 00c1 	STS  193,R30
                 ; 0000 0195         Recieve;
0004a2 9a5b      	SBI  0xB,3
                 ; 0000 0196         }
                 _0x44:
                 ; 0000 0197 clear_buffer();
0004a3 d43d      	RCALL _clear_buffer
                 ; 0000 0198 }
0004a4 9109      	LD   R16,Y+
0004a5 9119      	LD   R17,Y+
0004a6 9508      	RET
                 ;
                 ;void start_transmit(int transmit_param)
                 ; 0000 019B {
                 _start_transmit:
                 ; 0000 019C char i=0,j=0;
                 ; 0000 019D char check_sum_tx=0;
                 ; 0000 019E while(UCSR0A<0x20){;}
0004a7 940e 1044 	CALL __SAVELOCR4
                 ;	transmit_param -> Y+4
                 ;	i -> R17
                 ;	j -> R16
                 ;	check_sum_tx -> R19
0004a9 e010      	LDI  R17,0
0004aa e000      	LDI  R16,0
0004ab e030      	LDI  R19,0
                 _0x49:
0004ac 91a0 00c0 	LDS  R26,192
0004ae 32a0      	CPI  R26,LOW(0x20)
0004af f3e0      	BRLO _0x49
                 ; 0000 019F //if(!RxTx){
                 ; 0000 01A0 preambula_bytes=Parameter_bank[3];
                +
0004b0 e0a3     +LDI R26 , LOW ( _Parameter_bank + 3 )
0004b1 e0b0     +LDI R27 , HIGH ( _Parameter_bank + 3 )
                 	__POINTW2MN _Parameter_bank,3
0004b2 940e 0e73 	CALL __EEPROMRDB
0004b4 93e0 027d 	STS  _preambula_bytes,R30
                 ; 0000 01A1 delay_ms(25);
0004b6 e1e9      	LDI  R30,LOW(25)
0004b7 e0f0      	LDI  R31,HIGH(25)
0004b8 93fa      	ST   -Y,R31
0004b9 93ea      	ST   -Y,R30
0004ba 940e 0e01 	CALL _delay_ms
                 ; 0000 01A2 Transmit;
0004bc 985b      	CBI  0xB,3
                 ; 0000 01A3 TxEn;
0004bd 91e0 00c1 	LDS  R30,193
0004bf e0f0      	LDI  R31,0
0004c0 7ce0      	ANDI R30,LOW(0xC0)
0004c1 70f0      	ANDI R31,HIGH(0xC0)
0004c2 60e8      	ORI  R30,8
0004c3 93e0 00c1 	STS  193,R30
                 ; 0000 01A4 delay_ms(15);
0004c5 e0ef      	LDI  R30,LOW(15)
0004c6 e0f0      	LDI  R31,HIGH(15)
0004c7 93fa      	ST   -Y,R31
0004c8 93ea      	ST   -Y,R30
0004c9 940e 0e01 	CALL _delay_ms
                 ; 0000 01A5 for (i=0;i<preambula_bytes;i++)
0004cb e010      	LDI  R17,LOW(0)
                 _0x4F:
0004cc 91e0 027d 	LDS  R30,_preambula_bytes
0004ce 171e      	CP   R17,R30
0004cf f468      	BRSH _0x50
                 ; 0000 01A6         {
                 ; 0000 01A7         tx_buffer0[i]=0xff;
0004d0 2fe1      	MOV  R30,R17
0004d1 e0f0      	LDI  R31,0
0004d2 56e6      	SUBI R30,LOW(-_tx_buffer0)
0004d3 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004d4 efaf      	LDI  R26,LOW(255)
0004d5 83a0      	STD  Z+0,R26
                 ; 0000 01A8         tx_counter0++;
0004d6 91e0 02db 	LDS  R30,_tx_counter0
0004d8 5fef      	SUBI R30,-LOW(1)
0004d9 93e0 02db 	STS  _tx_counter0,R30
                 ; 0000 01A9         }
0004db 5f1f      	SUBI R17,-1
0004dc cfef      	RJMP _0x4F
                 _0x50:
                 ; 0000 01AA //i++;
                 ; 0000 01AB if(burst_mode)tx_buffer0[i]=0x01;//стартовый байт
0004dd 9bf6      	SBIS 0x1E,6
0004de c006      	RJMP _0x51
0004df 2fe1      	MOV  R30,R17
0004e0 e0f0      	LDI  R31,0
0004e1 56e6      	SUBI R30,LOW(-_tx_buffer0)
0004e2 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004e3 e0a1      	LDI  R26,LOW(1)
0004e4 c005      	RJMP _0x119
                 ; 0000 01AC else tx_buffer0[i]=0x06;
                 _0x51:
0004e5 2fe1      	MOV  R30,R17
0004e6 e0f0      	LDI  R31,0
0004e7 56e6      	SUBI R30,LOW(-_tx_buffer0)
0004e8 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004e9 e0a6      	LDI  R26,LOW(6)
                 _0x119:
0004ea 83a0      	STD  Z+0,R26
                 ; 0000 01AD check_sum_tx=check_sum_tx^tx_buffer0[i];
0004eb 2fa3      	MOV  R26,R19
0004ec 27bb      	CLR  R27
0004ed 2fe1      	MOV  R30,R17
0004ee e0f0      	LDI  R31,0
0004ef 56e6      	SUBI R30,LOW(-_tx_buffer0)
0004f0 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004f1 81e0      	LD   R30,Z
0004f2 e0f0      	LDI  R31,0
0004f3 27ea      	EOR  R30,R26
0004f4 2f3e      	MOV  R19,R30
                 ; 0000 01AE i++;
0004f5 5f1f      	SUBI R17,-1
                 ; 0000 01AF tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i];//адрес
0004f6 2fe1      	MOV  R30,R17
0004f7 e0f0      	LDI  R31,0
0004f8 01bf      	MOVW R22,R30
0004f9 56e6      	SUBI R30,LOW(-_tx_buffer0)
0004fa 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004fb 010f      	MOVW R0,R30
0004fc 91a0 027e 	LDS  R26,_preambula_bytes_rec
0004fe 27bb      	CLR  R27
0004ff 91e0 027d 	LDS  R30,_preambula_bytes
000501 e0f0      	LDI  R31,0
000502 1bae      	SUB  R26,R30
000503 0bbf      	SBC  R27,R31
000504 01fb      	MOVW R30,R22
000505 0fea      	ADD  R30,R26
000506 1ffb      	ADC  R31,R27
000507 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000508 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000509 81e0      	LD   R30,Z
00050a 01d0      	MOVW R26,R0
00050b 93ec      	ST   X,R30
                 ; 0000 01B0 check_sum_tx=check_sum_tx^tx_buffer0[i];
00050c 2fa3      	MOV  R26,R19
00050d 27bb      	CLR  R27
00050e 2fe1      	MOV  R30,R17
00050f e0f0      	LDI  R31,0
000510 56e6      	SUBI R30,LOW(-_tx_buffer0)
000511 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000512 81e0      	LD   R30,Z
000513 e0f0      	LDI  R31,0
000514 27ea      	EOR  R30,R26
000515 2f3e      	MOV  R19,R30
                 ; 0000 01B1 i++;
000516 5f1f      	SUBI R17,-1
                 ; 0000 01B2 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i];//команда
000517 2fe1      	MOV  R30,R17
000518 e0f0      	LDI  R31,0
000519 01bf      	MOVW R22,R30
00051a 56e6      	SUBI R30,LOW(-_tx_buffer0)
00051b 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00051c 010f      	MOVW R0,R30
00051d 91a0 027e 	LDS  R26,_preambula_bytes_rec
00051f 27bb      	CLR  R27
000520 91e0 027d 	LDS  R30,_preambula_bytes
000522 e0f0      	LDI  R31,0
000523 1bae      	SUB  R26,R30
000524 0bbf      	SBC  R27,R31
000525 01fb      	MOVW R30,R22
000526 0fea      	ADD  R30,R26
000527 1ffb      	ADC  R31,R27
000528 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000529 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00052a 81e0      	LD   R30,Z
00052b 01d0      	MOVW R26,R0
00052c 93ec      	ST   X,R30
                 ; 0000 01B3 check_sum_tx=check_sum_tx^tx_buffer0[i];
00052d 2fa3      	MOV  R26,R19
00052e 27bb      	CLR  R27
00052f 2fe1      	MOV  R30,R17
000530 e0f0      	LDI  R31,0
000531 56e6      	SUBI R30,LOW(-_tx_buffer0)
000532 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000533 81e0      	LD   R30,Z
000534 e0f0      	LDI  R31,0
000535 27ea      	EOR  R30,R26
000536 2f3e      	MOV  R19,R30
                 ; 0000 01B4 i++;
000537 5f1f      	SUBI R17,-1
                 ; 0000 01B5 if(!transmit_param)
000538 81ec      	LDD  R30,Y+4
000539 81fd      	LDD  R31,Y+4+1
00053a 9730      	SBIW R30,0
00053b f011      	BREQ PC+3
00053c 940c 0592 	JMP _0x53
                 ; 0000 01B6         {
                 ; 0000 01B7         tx_buffer0[i]=bytes_quantity_ans+2;                                                  //число байт  //нужно создать массив с количеством байт для конкретной команды
00053e 2fa1      	MOV  R26,R17
00053f e0b0      	LDI  R27,0
000540 56a6      	SUBI R26,LOW(-_tx_buffer0)
000541 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
000542 91e0 027f 	LDS  R30,_bytes_quantity_ans
000544 e0f0      	LDI  R31,0
000545 9632      	ADIW R30,2
000546 93ec      	ST   X,R30
                 ; 0000 01B8         check_sum_tx=check_sum_tx^tx_buffer0[i];
000547 2fa3      	MOV  R26,R19
000548 27bb      	CLR  R27
000549 2fe1      	MOV  R30,R17
00054a e0f0      	LDI  R31,0
00054b 56e6      	SUBI R30,LOW(-_tx_buffer0)
00054c 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00054d 81e0      	LD   R30,Z
00054e e0f0      	LDI  R31,0
00054f 27ea      	EOR  R30,R26
000550 2f3e      	MOV  R19,R30
                 ; 0000 01B9         i++;
000551 5f1f      	SUBI R17,-1
                 ; 0000 01BA         tx_buffer0[i]=p_bank_addr;                                             //статус 1й байт
000552 2fe1      	MOV  R30,R17
000553 e0f0      	LDI  R31,0
000554 56e6      	SUBI R30,LOW(-_tx_buffer0)
000555 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000556 91a0 026f 	LDS  R26,_p_bank_addr
000558 83a0      	STD  Z+0,R26
                 ; 0000 01BB         check_sum_tx=check_sum_tx^tx_buffer0[i];
000559 2fa3      	MOV  R26,R19
00055a 27bb      	CLR  R27
00055b 2fe1      	MOV  R30,R17
00055c e0f0      	LDI  R31,0
00055d 56e6      	SUBI R30,LOW(-_tx_buffer0)
00055e 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00055f 81e0      	LD   R30,Z
000560 e0f0      	LDI  R31,0
000561 27ea      	EOR  R30,R26
000562 2f3e      	MOV  R19,R30
                 ; 0000 01BC         i++;
000563 5f1f      	SUBI R17,-1
                 ; 0000 01BD         tx_buffer0[i]=0x00;                                             //статус 2й байт
000564 2fe1      	MOV  R30,R17
000565 e0f0      	LDI  R31,0
000566 56e6      	SUBI R30,LOW(-_tx_buffer0)
000567 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000568 e0a0      	LDI  R26,LOW(0)
000569 83a0      	STD  Z+0,R26
                 ; 0000 01BE         check_sum_tx=check_sum_tx^tx_buffer0[i];
00056a 2fa3      	MOV  R26,R19
00056b 27bb      	CLR  R27
00056c 2fe1      	MOV  R30,R17
00056d e0f0      	LDI  R31,0
00056e 56e6      	SUBI R30,LOW(-_tx_buffer0)
00056f 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000570 81e0      	LD   R30,Z
000571 e0f0      	LDI  R31,0
000572 27ea      	EOR  R30,R26
000573 2f3e      	MOV  R19,R30
                 ; 0000 01BF         i++;
000574 5f1f      	SUBI R17,-1
                 ; 0000 01C0         for(j=0;j<bytes_quantity_ans;j++)
000575 e000      	LDI  R16,LOW(0)
                 _0x55:
000576 91e0 027f 	LDS  R30,_bytes_quantity_ans
000578 170e      	CP   R16,R30
000579 f4b8      	BRSH _0x56
                 ; 0000 01C1                 {
                 ; 0000 01C2                 tx_buffer0[i]=Command_data[j];                                                //данные //здесь нужно создать массив с данными для конкретной команды и перегружать его по запросу в буфер отправки
00057a 2fa1      	MOV  R26,R17
00057b e0b0      	LDI  R27,0
00057c 56a6      	SUBI R26,LOW(-_tx_buffer0)
00057d 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
00057e 2fe0      	MOV  R30,R16
00057f e0f0      	LDI  R31,0
000580 57ef      	SUBI R30,LOW(-_Command_data)
000581 4ffd      	SBCI R31,HIGH(-_Command_data)
000582 81e0      	LD   R30,Z
000583 93ec      	ST   X,R30
                 ; 0000 01C3                 check_sum_tx=check_sum_tx^tx_buffer0[i];
000584 2fa3      	MOV  R26,R19
000585 27bb      	CLR  R27
000586 2fe1      	MOV  R30,R17
000587 e0f0      	LDI  R31,0
000588 56e6      	SUBI R30,LOW(-_tx_buffer0)
000589 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00058a 81e0      	LD   R30,Z
00058b e0f0      	LDI  R31,0
00058c 27ea      	EOR  R30,R26
00058d 2f3e      	MOV  R19,R30
                 ; 0000 01C4                 i++;
00058e 5f1f      	SUBI R17,-1
                 ; 0000 01C5                 }
00058f 5f0f      	SUBI R16,-1
000590 cfe5      	RJMP _0x55
                 _0x56:
                 ; 0000 01C6         }
                 ; 0000 01C7 else {
000591 c06e      	RJMP _0x57
                 _0x53:
                 ; 0000 01C8         tx_buffer0[i]=com_bytes_rx+2;       //здесь просто берем количество байт из принятого сообщения                                           //число байт  //нужно создать массив с количеством байт для конкретной команды
000592 2fa1      	MOV  R26,R17
000593 e0b0      	LDI  R27,0
000594 56a6      	SUBI R26,LOW(-_tx_buffer0)
000595 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
000596 91e0 026d 	LDS  R30,_com_bytes_rx
000598 e0f0      	LDI  R31,0
000599 9632      	ADIW R30,2
00059a 93ec      	ST   X,R30
                 ; 0000 01C9         //bytes_quantity_ans=rx_buffer0[preambula_bytes_rec-preambula_bytes+i]+2;  //эту величину все же нужно сохранить, дабы юзать в цикле
                 ; 0000 01CA         check_sum_tx=check_sum_tx^tx_buffer0[i];
00059b 2fa3      	MOV  R26,R19
00059c 27bb      	CLR  R27
00059d 2fe1      	MOV  R30,R17
00059e e0f0      	LDI  R31,0
00059f 56e6      	SUBI R30,LOW(-_tx_buffer0)
0005a0 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005a1 81e0      	LD   R30,Z
0005a2 e0f0      	LDI  R31,0
0005a3 27ea      	EOR  R30,R26
0005a4 2f3e      	MOV  R19,R30
                 ; 0000 01CB         i++;
0005a5 5f1f      	SUBI R17,-1
                 ; 0000 01CC         tx_buffer0[i]=transmit_param>>8;                                       //статус 1й байт
0005a6 2fa1      	MOV  R26,R17
0005a7 e0b0      	LDI  R27,0
0005a8 56a6      	SUBI R26,LOW(-_tx_buffer0)
0005a9 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
0005aa 81ec      	LDD  R30,Y+4
0005ab 81fd      	LDD  R31,Y+4+1
0005ac 940e 0e2a 	CALL __ASRW8
0005ae 93ec      	ST   X,R30
                 ; 0000 01CD         check_sum_tx=check_sum_tx^tx_buffer0[i];
0005af 2fa3      	MOV  R26,R19
0005b0 27bb      	CLR  R27
0005b1 2fe1      	MOV  R30,R17
0005b2 e0f0      	LDI  R31,0
0005b3 56e6      	SUBI R30,LOW(-_tx_buffer0)
0005b4 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005b5 81e0      	LD   R30,Z
0005b6 e0f0      	LDI  R31,0
0005b7 27ea      	EOR  R30,R26
0005b8 2f3e      	MOV  R19,R30
                 ; 0000 01CE         i++;
0005b9 5f1f      	SUBI R17,-1
                 ; 0000 01CF         tx_buffer0[i]=transmit_param;                                          //статус 2й байт
0005ba 2fe1      	MOV  R30,R17
0005bb e0f0      	LDI  R31,0
0005bc 56e6      	SUBI R30,LOW(-_tx_buffer0)
0005bd 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005be 81ac      	LDD  R26,Y+4
0005bf 83a0      	STD  Z+0,R26
                 ; 0000 01D0         check_sum_tx=check_sum_tx^tx_buffer0[i];
0005c0 2fa3      	MOV  R26,R19
0005c1 27bb      	CLR  R27
0005c2 2fe1      	MOV  R30,R17
0005c3 e0f0      	LDI  R31,0
0005c4 56e6      	SUBI R30,LOW(-_tx_buffer0)
0005c5 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005c6 81e0      	LD   R30,Z
0005c7 e0f0      	LDI  R31,0
0005c8 27ea      	EOR  R30,R26
0005c9 2f3e      	MOV  R19,R30
                 ; 0000 01D1         i++;
0005ca 5f1f      	SUBI R17,-1
                 ; 0000 01D2         j=i;
0005cb 2f01      	MOV  R16,R17
                 ; 0000 01D3         for(i=j;i<com_bytes_rx+j;i++)
0005cc 2f10      	MOV  R17,R16
                 _0x59:
0005cd 91a0 026d 	LDS  R26,_com_bytes_rx
0005cf 27bb      	CLR  R27
0005d0 2fe0      	MOV  R30,R16
0005d1 e0f0      	LDI  R31,0
0005d2 0fea      	ADD  R30,R26
0005d3 1ffb      	ADC  R31,R27
0005d4 2fa1      	MOV  R26,R17
0005d5 e0b0      	LDI  R27,0
0005d6 17ae      	CP   R26,R30
0005d7 07bf      	CPC  R27,R31
0005d8 f53c      	BRGE _0x5A
                 ; 0000 01D4                 {
                 ; 0000 01D5                 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i-2];                                                //данные прямо из массива принятых данных
0005d9 2fe1      	MOV  R30,R17
0005da e0f0      	LDI  R31,0
0005db 56e6      	SUBI R30,LOW(-_tx_buffer0)
0005dc 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005dd 01bf      	MOVW R22,R30
0005de 91a0 027e 	LDS  R26,_preambula_bytes_rec
0005e0 27bb      	CLR  R27
0005e1 91e0 027d 	LDS  R30,_preambula_bytes
0005e3 e0f0      	LDI  R31,0
0005e4 1bae      	SUB  R26,R30
0005e5 0bbf      	SBC  R27,R31
0005e6 27ee      	CLR  R30
0005e7 0fa1      	ADD  R26,R17
0005e8 1fbe      	ADC  R27,R30
0005e9 e0e2      	LDI  R30,LOW(2)
0005ea e0f0      	LDI  R31,HIGH(2)
0005eb 940e 0e64 	CALL __SWAPW12
0005ed 1bea      	SUB  R30,R26
0005ee 0bfb      	SBC  R31,R27
0005ef 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0005f0 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0005f1 81e0      	LD   R30,Z
0005f2 01db      	MOVW R26,R22
0005f3 93ec      	ST   X,R30
                 ; 0000 01D6                 check_sum_tx=check_sum_tx^tx_buffer0[i];
0005f4 2fa3      	MOV  R26,R19
0005f5 27bb      	CLR  R27
0005f6 2fe1      	MOV  R30,R17
0005f7 e0f0      	LDI  R31,0
0005f8 56e6      	SUBI R30,LOW(-_tx_buffer0)
0005f9 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005fa 81e0      	LD   R30,Z
0005fb e0f0      	LDI  R31,0
0005fc 27ea      	EOR  R30,R26
0005fd 2f3e      	MOV  R19,R30
                 ; 0000 01D7                 //i++;
                 ; 0000 01D8                 }
0005fe 5f1f      	SUBI R17,-1
0005ff cfcd      	RJMP _0x59
                 _0x5A:
                 ; 0000 01D9         }
                 _0x57:
                 ; 0000 01DA         //i++;
                 ; 0000 01DB tx_buffer0[i]=check_sum_tx;
000600 2fe1      	MOV  R30,R17
000601 e0f0      	LDI  R31,0
000602 56e6      	SUBI R30,LOW(-_tx_buffer0)
000603 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000604 8330      	ST   Z,R19
                 ; 0000 01DC tx_rd_index0=1;
000605 e0e1      	LDI  R30,LOW(1)
000606 93e0 02da 	STS  _tx_rd_index0,R30
                 ; 0000 01DD //if(!transmit_param){
                 ; 0000 01DE //for(i=0;i<=rx_counter0;i++)tx_buffer0[i]=rx_buffer0[i]; }
                 ; 0000 01DF //tx_rd_index0=1;
                 ; 0000 01E0 tx_counter0=i;
000608 9310 02db 	STS  _tx_counter0,R17
                 ; 0000 01E1 UDR0=tx_buffer0[0];
00060a 91e0 029a 	LDS  R30,_tx_buffer0
00060c 93e0 00c6 	STS  198,R30
                 ; 0000 01E2 while(tx_counter0){;}
                 _0x5B:
00060e 91e0 02db 	LDS  R30,_tx_counter0
000610 30e0      	CPI  R30,0
000611 f7e1      	BRNE _0x5B
                 ; 0000 01E3 delay_ms(15);
000612 e0ef      	LDI  R30,LOW(15)
000613 e0f0      	LDI  R31,HIGH(15)
000614 93fa      	ST   -Y,R31
000615 93ea      	ST   -Y,R30
000616 940e 0e01 	CALL _delay_ms
                 ; 0000 01E4 //RxEn;
                 ; 0000 01E5 Recieve;
000618 9a5b      	SBI  0xB,3
                 ; 0000 01E6 message_recieved=0;
000619 98f4      	CBI  0x1E,4
                 ; 0000 01E7 rx_counter0=0;
00061a e0e0      	LDI  R30,LOW(0)
00061b 93e0 0272 	STS  _rx_counter0,R30
                 ; 0000 01E8 
                 ; 0000 01E9 }
00061d 940e 104b 	CALL __LOADLOCR4
00061f 9626      	ADIW R28,6
000620 9508      	RET
                 ;
                 ;int generate_command_data_array_answer(char command_recieved)//загружаем из эсппзу сохраненный массив параметров (Parameter_bank) и записываем его в динамический массив команд (Command_data) с помощью связывающего массива (Command_mask)
                 ; 0000 01EC {
                 _generate_command_data_array_answer:
                 ; 0000 01ED char i=0,j=0,k=0;
                 ; 0000 01EE char dynamic_parameter=0, writing_command=0, error=1, parameter_tmp=0,parameter_tmp_length=0,tmp_command_number=0;
                 ; 0000 01EF union ieeesender      //это объединение создано специально для передачи числа в формате плавающей точки в виде 4х байт
                 ; 0000 01F0         {
                 ; 0000 01F1         float value;
                 ; 0000 01F2         char byte[4];
                 ; 0000 01F3         }floatsend;
                 ; 0000 01F4 //for (i=0;i<4;i++)
                 ; 0000 01F5 //        {
                 ; 0000 01F6 //        str[i]=&string_tmp[i];
                 ; 0000 01F7 //        }
                 ; 0000 01F8 //        i=0;
                 ; 0000 01F9 
                 ; 0000 01FA for (i=0;i<31;i++)//счетчик № команды
000621 9727      	SBIW R28,7
000622 e0e0      	LDI  R30,LOW(0)
000623 83ec      	STD  Y+4,R30
000624 83ed      	STD  Y+5,R30
000625 83ee      	STD  Y+6,R30
000626 940e 1042 	CALL __SAVELOCR6
                 ;	command_recieved -> Y+13
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	dynamic_parameter -> R18
                 ;	writing_command -> R21
                 ;	error -> R20
                 ;	parameter_tmp -> Y+12
                 ;	parameter_tmp_length -> Y+11
                 ;	tmp_command_number -> Y+10
                 ;	ieeesender -> Y+13
                 ;	floatsend -> Y+6
000628 e010      	LDI  R17,0
000629 e000      	LDI  R16,0
00062a e030      	LDI  R19,0
00062b e020      	LDI  R18,0
00062c e050      	LDI  R21,0
00062d e041      	LDI  R20,1
00062e e010      	LDI  R17,LOW(0)
                 _0x63:
00062f 311f      	CPI  R17,31
000630 f468      	BRSH _0x64
                 ; 0000 01FB                 {
                 ; 0000 01FC                 if(Command_number[0][i]==command_recieved)
000631 2fe1      	MOV  R30,R17
000632 e0f0      	LDI  R31,0
000633 56e8      	SUBI R30,LOW(-_Command_number*2)
000634 4ffc      	SBCI R31,HIGH(-_Command_number*2)
000635 91e4      	LPM  R30,Z
000636 2fae      	MOV  R26,R30
000637 85ed      	LDD  R30,Y+13
000638 17ea      	CP   R30,R26
000639 f411      	BRNE _0x65
                 ; 0000 01FD                                 {
                 ; 0000 01FE                                 error=0;//отсутствие совпадений соответствует ошибке "команда не поддерживается"
00063a e040      	LDI  R20,LOW(0)
                 ; 0000 01FF                                 tmp_command_number=i;
00063b 871a      	STD  Y+10,R17
                 ; 0000 0200                                 }
                 ; 0000 0201                 }
                 _0x65:
00063c 5f1f      	SUBI R17,-1
00063d cff1      	RJMP _0x63
                 _0x64:
                 ; 0000 0202 if(!error)      {//если ошибок нет, формируем команду
00063e 3040      	CPI  R20,0
00063f f011      	BREQ PC+3
000640 940c 071c 	JMP _0x66
                 ; 0000 0203                 writing_command=Command_number[1][tmp_command_number];//команда записи=1
                +
000642 ebe7     +LDI R30 , LOW ( 2 * _Command_number + 31 )
000643 e0f3     +LDI R31 , HIGH ( 2 * _Command_number + 31 )
                 	__POINTW1FN _Command_number,31
000644 01df      	MOVW R26,R30
000645 85ea      	LDD  R30,Y+10
000646 e0f0      	LDI  R31,0
000647 0fea      	ADD  R30,R26
000648 1ffb      	ADC  R31,R27
000649 9154      	LPM  R21,Z
                 ; 0000 0204                 dynamic_parameter=Command_number[2][tmp_command_number];//динамический параметр=2
                +
00064a ede6     +LDI R30 , LOW ( 2 * _Command_number + 62 )
00064b e0f3     +LDI R31 , HIGH ( 2 * _Command_number + 62 )
                 	__POINTW1FN _Command_number,62
00064c 01df      	MOVW R26,R30
00064d 85ea      	LDD  R30,Y+10
00064e e0f0      	LDI  R31,0
00064f 0fea      	ADD  R30,R26
000650 1ffb      	ADC  R31,R27
000651 9124      	LPM  R18,Z
                 ; 0000 0205                         if(writing_command)
000652 3050      	CPI  R21,0
000653 f0e9      	BREQ _0x67
                 ; 0000 0206                                 {
                 ; 0000 0207                                 for(j=0;j<com_bytes_rx+1;j++)
000654 e000      	LDI  R16,LOW(0)
                 _0x69:
000655 91e0 026d 	LDS  R30,_com_bytes_rx
000657 e0f0      	LDI  R31,0
000658 9631      	ADIW R30,1
000659 2fa0      	MOV  R26,R16
00065a e0b0      	LDI  R27,0
00065b 17ae      	CP   R26,R30
00065c 07bf      	CPC  R27,R31
00065d f464      	BRGE _0x6A
                 ; 0000 0208                                         {
                 ; 0000 0209                                         Command_data[j]=com_data_rx[j];
00065e 2fa0      	MOV  R26,R16
00065f e0b0      	LDI  R27,0
000660 57af      	SUBI R26,LOW(-_Command_data)
000661 4fbd      	SBCI R27,HIGH(-_Command_data)
000662 2fe0      	MOV  R30,R16
000663 e0f0      	LDI  R31,0
000664 5be8      	SUBI R30,LOW(-_com_data_rx)
000665 4ffd      	SBCI R31,HIGH(-_com_data_rx)
000666 81e0      	LD   R30,Z
000667 93ec      	ST   X,R30
                 ; 0000 020A                                         //Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];//Command_data[k]=Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];
                 ; 0000 020B                                         }
000668 5f0f      	SUBI R16,-1
000669 cfeb      	RJMP _0x69
                 _0x6A:
                 ; 0000 020C                                 update_args_flag=tmp_command_number;
00066a 85ea      	LDD  R30,Y+10
00066b 93e0 026e 	STS  _update_args_flag,R30
                 ; 0000 020D                                 update_eeprom_parameters(tmp_command_number);
00066d 93ea      	ST   -Y,R30
00066e d0b3      	RCALL _update_eeprom_parameters
                 ; 0000 020E                                 j=0;
00066f e000      	LDI  R16,LOW(0)
                 ; 0000 020F                                 }
                 ; 0000 0210                         else
000670 c0ab      	RJMP _0x6B
                 _0x67:
                 ; 0000 0211                                 {
                 ; 0000 0212                                  //представленный ниже код работает только для команд чтения, нединамических и динамических.
                 ; 0000 0213                                  /* приведенный ниже код работает следующим образом: сперва мы обращаемся к массиву Command_mask
                 ; 0000 0214                                  с помощью которого получаем представление о том, какой параметр соответствует какому байту в команде,
                 ; 0000 0215                                  а также какова его длина в байтах, затем поочередно перезагружаем из массива Parameter_bank данные(которые хранятся в нем последовательно) в
                 ; 0000 0216                                  массив Command_data, используя для этого массив Parameter_mask (в этом массиве каждому элементу поставлен в прямое соответствие номер параметра
                 ; 0000 0217                                 , который мы берем из массива Command_mask, а содержимое каждой ячейки определяет, с какой ячейки начинаются данные соответствующего параметра*/
                 ; 0000 0218                                  parameter_tmp=Command_mask[tmp_command_number][j];
000671 85ea      	LDD  R30,Y+10
000672 e1a9      	LDI  R26,LOW(25)
000673 9fea      	MUL  R30,R26
000674 01f0      	MOVW R30,R0
000675 57e0      	SUBI R30,LOW(-_Command_mask*2)
000676 4fff      	SBCI R31,HIGH(-_Command_mask*2)
000677 01df      	MOVW R26,R30
000678 2fe0      	MOV  R30,R16
000679 e0f0      	LDI  R31,0
00067a 0fea      	ADD  R30,R26
00067b 1ffb      	ADC  R31,R27
00067c 9004      	LPM  R0,Z
00067d 860c      	STD  Y+12,R0
                 ; 0000 0219 
                 ; 0000 021A                                  for(j=0;j<24;j++)
00067e e000      	LDI  R16,LOW(0)
                 _0x6D:
00067f 3108      	CPI  R16,24
000680 f010      	BRLO PC+3
000681 940c 0719 	JMP _0x6E
                 ; 0000 021B                                          {
                 ; 0000 021C                                          if(parameter_tmp!=Command_mask[tmp_command_number][j])
000683 85ea      	LDD  R30,Y+10
000684 e1a9      	LDI  R26,LOW(25)
000685 9fea      	MUL  R30,R26
000686 01f0      	MOVW R30,R0
000687 57e0      	SUBI R30,LOW(-_Command_mask*2)
000688 4fff      	SBCI R31,HIGH(-_Command_mask*2)
000689 01df      	MOVW R26,R30
00068a 2fe0      	MOV  R30,R16
00068b e0f0      	LDI  R31,0
00068c 0fea      	ADD  R30,R26
00068d 1ffb      	ADC  R31,R27
00068e 91e4      	LPM  R30,Z
00068f 85ac      	LDD  R26,Y+12
000690 17ea      	CP   R30,R26
000691 f411      	BRNE PC+3
000692 940c 06f8 	JMP _0x6F
                 ; 0000 021D                                                      {
                 ; 0000 021E                                                      for(k=(j-parameter_tmp_length);k<j;k++)
000694 2fa0      	MOV  R26,R16
000695 27bb      	CLR  R27
000696 85eb      	LDD  R30,Y+11
000697 e0f0      	LDI  R31,0
000698 940e 0e64 	CALL __SWAPW12
00069a 1bea      	SUB  R30,R26
00069b 2f3e      	MOV  R19,R30
                 _0x71:
00069c 1730      	CP   R19,R16
00069d f010      	BRLO PC+3
00069e 940c 06f6 	JMP _0x72
                 ; 0000 021F                                                                 {
                 ; 0000 0220                                                                 if((parameter_tmp<11)|(parameter_tmp>13))
0006a0 85ac      	LDD  R26,Y+12
0006a1 e0eb      	LDI  R30,LOW(11)
0006a2 940e 0e34 	CALL __LTB12U
0006a4 2e0e      	MOV  R0,R30
0006a5 e0ed      	LDI  R30,LOW(13)
0006a6 940e 0e39 	CALL __GTB12U
0006a8 29e0      	OR   R30,R0
0006a9 f109      	BREQ _0x73
                 ; 0000 0221                                                                         {
                 ; 0000 0222                                                                         Command_data[k]=Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];
0006aa 2fe3      	MOV  R30,R19
0006ab e0f0      	LDI  R31,0
0006ac 57ef      	SUBI R30,LOW(-_Command_data)
0006ad 4ffd      	SBCI R31,HIGH(-_Command_data)
0006ae 01cf      	MOVW R24,R30
0006af 85ec      	LDD  R30,Y+12
0006b0 e0f0      	LDI  R31,0
0006b1 59e8      	SUBI R30,LOW(-_Parameter_mask*2)
0006b2 4fff      	SBCI R31,HIGH(-_Parameter_mask*2)
0006b3 9164      	LPM  R22,Z
0006b4 2777      	CLR  R23
0006b5 2fa3      	MOV  R26,R19
0006b6 27bb      	CLR  R27
0006b7 85eb      	LDD  R30,Y+11
0006b8 e0f0      	LDI  R31,0
0006b9 0fae      	ADD  R26,R30
0006ba 1fbf      	ADC  R27,R31
0006bb 2fe0      	MOV  R30,R16
0006bc e0f0      	LDI  R31,0
0006bd 940e 0e64 	CALL __SWAPW12
0006bf 1bea      	SUB  R30,R26
0006c0 0bfb      	SBC  R31,R27
0006c1 0fe6      	ADD  R30,R22
0006c2 1ff7      	ADC  R31,R23
0006c3 50e0      	SUBI R30,LOW(-_Parameter_bank)
0006c4 40f0      	SBCI R31,HIGH(-_Parameter_bank)
0006c5 01df      	MOVW R26,R30
0006c6 940e 0e73 	CALL __EEPROMRDB
0006c8 01dc      	MOVW R26,R24
0006c9 93ec      	ST   X,R30
                 ; 0000 0223                                                                         }
                 ; 0000 0224                                                                 else
0006ca c029      	RJMP _0x74
                 _0x73:
                 ; 0000 0225                                                                         {
                 ; 0000 0226                                                                          //ttest=(long)dynamic_variables[0];
                 ; 0000 0227                                                                         #asm ("cli")
0006cb 94f8      	cli
                 ; 0000 0228                                                                         floatsend.value=dynamic_variables[parameter_tmp-11];
0006cc 85ec      	LDD  R30,Y+12
0006cd e0f0      	LDI  R31,0
0006ce 973b      	SBIW R30,11
0006cf e6a1      	LDI  R26,LOW(_dynamic_variables)
0006d0 e0b2      	LDI  R27,HIGH(_dynamic_variables)
0006d1 940e 0e25 	CALL __LSLW2
0006d3 0fae      	ADD  R26,R30
0006d4 1fbf      	ADC  R27,R31
0006d5 940e 0e4a 	CALL __GETD1P
                +
0006d7 83ee     +STD Y + 6 , R30
0006d8 83ff     +STD Y + 6 + 1 , R31
0006d9 8768     +STD Y + 6 + 2 , R22
0006da 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 0229                                                                         //test=*str[k-1];
                 ; 0000 022A                                                                         Command_data[k]=floatsend.byte[k+parameter_tmp_length-j]; //(char)(test>>8*(k-1)); //(char)((long)((dynamic_variables[Parameter_mask[parameter_tmp]+(k+parameter_tmp_len0006db 2fe3      gth-j)-11])<<8*(k+parameter_tmp_length-j)));
0006dc e0f0      	MOV  R30,R19
0006dd 57ef      	LDI  R31,0
0006de 4ffd      	SUBI R30,LOW(-_Command_data)
0006df 01bf      	SBCI R31,HIGH(-_Command_data)
0006e0 2fa3      	MOVW R22,R30
0006e1 27bb      	MOV  R26,R19
0006e2 85eb      	CLR  R27
0006e3 e0f0      	LDD  R30,Y+11
0006e4 0fae      	LDI  R31,0
0006e5 1fbf      	ADD  R26,R30
0006e6 2fe0      	ADC  R27,R31
0006e7 e0f0      	MOV  R30,R16
0006e8 940e 0e64 	LDI  R31,0
0006ea 1bea      	CALL __SWAPW12
0006eb 0bfb      	SUB  R30,R26
0006ec 01de      	SBC  R31,R27
0006ed 9616      	MOVW R26,R28
0006ee 0fae      	ADIW R26,6
0006ef 1fbf      	ADD  R26,R30
0006f0 91ec      	ADC  R27,R31
0006f1 01db      	LD   R30,X
0006f2 93ec      	MOVW R26,R22
                 	ST   X,R30
0006f3 9478      ; 0000 022B                                                                         #asm("sei")
                 	sei
                 ; 0000 022C                                                                         }
                 _0x74:
0006f4 5f3f      ; 0000 022D                                                                 }
0006f5 cfa6      	SUBI R19,-1
                 	RJMP _0x71
                 _0x72:
0006f6 e0e0      ; 0000 022E                                                       parameter_tmp_length=0;
0006f7 87eb      	LDI  R30,LOW(0)
                 	STD  Y+11,R30
                 ; 0000 022F                                                      }
                 ; 0000 0230                                          parameter_tmp=Command_mask[tmp_command_number][j];
0006f8 85ea      _0x6F:
0006f9 e1a9      	LDD  R30,Y+10
0006fa 9fea      	LDI  R26,LOW(25)
0006fb 01f0      	MUL  R30,R26
0006fc 57e0      	MOVW R30,R0
0006fd 4fff      	SUBI R30,LOW(-_Command_mask*2)
0006fe 01df      	SBCI R31,HIGH(-_Command_mask*2)
0006ff 2fe0      	MOVW R26,R30
000700 e0f0      	MOV  R30,R16
000701 0fea      	LDI  R31,0
000702 1ffb      	ADD  R30,R26
000703 9004      	ADC  R31,R27
000704 860c      	LPM  R0,Z
                 	STD  Y+12,R0
000705 85eb      ; 0000 0231                                          parameter_tmp_length++;
000706 5fef      	LDD  R30,Y+11
000707 87eb      	SUBI R30,-LOW(1)
                 	STD  Y+11,R30
000708 85ea      ; 0000 0232                                          if(!Command_mask[tmp_command_number][j])j=24;
000709 e1a9      	LDD  R30,Y+10
00070a 9fea      	LDI  R26,LOW(25)
00070b 01f0      	MUL  R30,R26
00070c 57e0      	MOVW R30,R0
00070d 4fff      	SUBI R30,LOW(-_Command_mask*2)
00070e 01df      	SBCI R31,HIGH(-_Command_mask*2)
00070f 2fe0      	MOVW R26,R30
000710 e0f0      	MOV  R30,R16
000711 0fea      	LDI  R31,0
000712 1ffb      	ADD  R30,R26
000713 91e4      	ADC  R31,R27
000714 30e0      	LPM  R30,Z
000715 f409      	CPI  R30,0
000716 e108      	BRNE _0x75
                 	LDI  R16,LOW(24)
                 ; 0000 0233                                          }
000717 5f0f      _0x75:
000718 cf66      	SUBI R16,-1
                 	RJMP _0x6D
                 _0x6E:
000719 9330 027f ; 0000 0234                                  bytes_quantity_ans=k;
                 	STS  _bytes_quantity_ans,R19
00071b e030      ; 0000 0235                                  k=0;
                 	LDI  R19,LOW(0)
                 ; 0000 0236                                 }
                 _0x6B:
                 ; 0000 0237                         }
                 ; 0000 0238 
                 ; 0000 0239 return error;
00071c 2fe4      _0x66:
00071d e0f0      	MOV  R30,R20
00071e 940e 1049 	LDI  R31,0
000720 962e      	CALL __LOADLOCR6
000721 9508      	ADIW R28,14
                 	RET
                 ; 0000 023A }
                 ;
                 ;void update_eeprom_parameters(char update_flag)
                 ; 0000 023D {
                 _update_eeprom_parameters:
                 ; 0000 023E char i=0,j=0,k=0,parameter_tmp=0,parameter_tmp_length=0;
000722 940e 1042 ; 0000 023F parameter_tmp=Command_mask[update_flag][0];
                 	CALL __SAVELOCR6
                 ;	update_flag -> Y+6
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	parameter_tmp -> R18
000724 e010      ;	parameter_tmp_length -> R21
000725 e000      	LDI  R17,0
000726 e030      	LDI  R16,0
000727 e020      	LDI  R19,0
000728 e050      	LDI  R18,0
000729 81ee      	LDI  R21,0
00072a e1a9      	LDD  R30,Y+6
00072b 9fea      	LDI  R26,LOW(25)
00072c 01f0      	MUL  R30,R26
00072d 57e0      	MOVW R30,R0
00072e 4fff      	SUBI R30,LOW(-_Command_mask*2)
00072f 9124      	SBCI R31,HIGH(-_Command_mask*2)
                 	LPM  R18,Z
                 ; 0000 0240 
000730 e000      ; 0000 0241 for(j=0;j<com_bytes_rx+1;j++)
                 	LDI  R16,LOW(0)
000731 91e0 026d _0x77:
000733 e0f0      	LDS  R30,_com_bytes_rx
000734 9631      	LDI  R31,0
000735 2fa0      	ADIW R30,1
000736 e0b0      	MOV  R26,R16
000737 17ae      	LDI  R27,0
000738 07bf      	CP   R26,R30
000739 f014      	CPC  R27,R31
00073a 940c 0796 	BRLT PC+3
                 	JMP _0x78
                 ; 0000 0242         {
00073c 81ee      ; 0000 0243                     if(parameter_tmp!=Command_mask[update_flag][j])
00073d e1a9      	LDD  R30,Y+6
00073e 9fea      	LDI  R26,LOW(25)
00073f 01f0      	MUL  R30,R26
000740 57e0      	MOVW R30,R0
000741 4fff      	SUBI R30,LOW(-_Command_mask*2)
000742 01df      	SBCI R31,HIGH(-_Command_mask*2)
000743 2fe0      	MOVW R26,R30
000744 e0f0      	MOV  R30,R16
000745 0fea      	LDI  R31,0
000746 1ffb      	ADD  R30,R26
000747 91e4      	ADC  R31,R27
000748 17e2      	LPM  R30,Z
000749 f151      	CP   R30,R18
                 	BREQ _0x79
                 ; 0000 0244                              {
00074a 2fa0      ; 0000 0245                              for(k=(j-parameter_tmp_length);k<j;k++)
00074b 27bb      	MOV  R26,R16
00074c 2fe5      	CLR  R27
00074d e0f0      	MOV  R30,R21
00074e 940e 0e64 	LDI  R31,0
000750 1bea      	CALL __SWAPW12
000751 2f3e      	SUB  R30,R26
                 	MOV  R19,R30
000752 1730      _0x7B:
000753 f4f8      	CP   R19,R16
                 	BRSH _0x7C
                 ; 0000 0246                                     {
000754 2fe2      ; 0000 0247                                     Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)]=Command_data[k];
000755 e0f0      	MOV  R30,R18
000756 59e8      	LDI  R31,0
000757 4fff      	SUBI R30,LOW(-_Parameter_mask*2)
000758 9164      	SBCI R31,HIGH(-_Parameter_mask*2)
000759 2777      	LPM  R22,Z
00075a 2fa3      	CLR  R23
00075b 27bb      	MOV  R26,R19
00075c 27ee      	CLR  R27
00075d 0fa5      	CLR  R30
00075e 1fbe      	ADD  R26,R21
00075f 2fe0      	ADC  R27,R30
000760 e0f0      	MOV  R30,R16
000761 940e 0e64 	LDI  R31,0
000763 1bea      	CALL __SWAPW12
000764 0bfb      	SUB  R30,R26
000765 0fe6      	SBC  R31,R27
000766 1ff7      	ADD  R30,R22
000767 50e0      	ADC  R31,R23
000768 40f0      	SUBI R30,LOW(-_Parameter_bank)
000769 01df      	SBCI R31,HIGH(-_Parameter_bank)
00076a 2fe3      	MOVW R26,R30
00076b e0f0      	MOV  R30,R19
00076c 57ef      	LDI  R31,0
00076d 4ffd      	SUBI R30,LOW(-_Command_data)
00076e 81e0      	SBCI R31,HIGH(-_Command_data)
00076f 940e 0e8f 	LD   R30,Z
                 	CALL __EEPROMWRB
000771 5f3f      ; 0000 0248                                     }
000772 cfdf      	SUBI R19,-1
                 	RJMP _0x7B
                 _0x7C:
000773 e050      ; 0000 0249                                parameter_tmp_length=0;
                 	LDI  R21,LOW(0)
                 ; 0000 024A                              }
                 ; 0000 024B 
                 ; 0000 024C                     parameter_tmp=Command_mask[update_flag][j];
000774 81ee      _0x79:
000775 e1a9      	LDD  R30,Y+6
000776 9fea      	LDI  R26,LOW(25)
000777 01f0      	MUL  R30,R26
000778 57e0      	MOVW R30,R0
000779 4fff      	SUBI R30,LOW(-_Command_mask*2)
00077a 01df      	SBCI R31,HIGH(-_Command_mask*2)
00077b 2fe0      	MOVW R26,R30
00077c e0f0      	MOV  R30,R16
00077d 0fea      	LDI  R31,0
00077e 1ffb      	ADD  R30,R26
00077f 9124      	ADC  R31,R27
                 	LPM  R18,Z
000780 5f5f      ; 0000 024D                     parameter_tmp_length++;
                 	SUBI R21,-1
000781 81ee      ; 0000 024E                     if(!Command_mask[update_flag][j])j=com_bytes_rx+1;
000782 e1a9      	LDD  R30,Y+6
000783 9fea      	LDI  R26,LOW(25)
000784 01f0      	MUL  R30,R26
000785 57e0      	MOVW R30,R0
000786 4fff      	SUBI R30,LOW(-_Command_mask*2)
000787 01df      	SBCI R31,HIGH(-_Command_mask*2)
000788 2fe0      	MOVW R26,R30
000789 e0f0      	MOV  R30,R16
00078a 0fea      	LDI  R31,0
00078b 1ffb      	ADD  R30,R26
00078c 91e4      	ADC  R31,R27
00078d 30e0      	LPM  R30,Z
00078e f429      	CPI  R30,0
00078f 91e0 026d 	BRNE _0x7D
000791 e0f0      	LDS  R30,_com_bytes_rx
000792 9631      	LDI  R31,0
000793 2f0e      	ADIW R30,1
                 	MOV  R16,R30
                 ; 0000 024F         }
000794 5f0f      _0x7D:
000795 cf9b      	SUBI R16,-1
                 	RJMP _0x77
                 _0x78:
000796 940e 1049 ; 0000 0250 }
000798 9627      	CALL __LOADLOCR6
000799 9508      	ADIW R28,7
                 	RET
                 ;
                 ;
                 ;
                 ;int check_recieved_message(){
                 ; 0000 0254 int check_recieved_message(){
                 _check_recieved_message:
                 ; 0000 0255 char i=0,j=0,k=0,l=0, tmp_i=0;//здесь i - счетчик всех байт j- счетчик байт преамбул
                 ; 0000 0256 
                 ; 0000 0257 int check_sum=0;
00079a 9722      ; 0000 0258 checking_result=0;
00079b e0e0      	SBIW R28,2
00079c 83e8      	LDI  R30,LOW(0)
00079d 83e9      	ST   Y,R30
00079e 940e 1042 	STD  Y+1,R30
                 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	l -> R18
                 ;	tmp_i -> R21
0007a0 e010      ;	check_sum -> Y+6
0007a1 e000      	LDI  R17,0
0007a2 e030      	LDI  R16,0
0007a3 e020      	LDI  R19,0
0007a4 e050      	LDI  R18,0
0007a5 93e0 027c 	LDI  R21,0
                 	STS  _checking_result,R30
0007a7 9af5      ; 0000 0259 answering=1;
                 	SBI  0x1E,5
                 ; 0000 025A while ((rx_buffer0[j])==0xff)
0007a8 2fe0      _0x80:
0007a9 e0f0      	MOV  R30,R16
0007aa 5fe8      	LDI  R31,0
0007ab 4ffd      	SUBI R30,LOW(-_rx_buffer0)
0007ac 81e0      	SBCI R31,HIGH(-_rx_buffer0)
0007ad 3fef      	LD   R30,Z
0007ae f441      	CPI  R30,LOW(0xFF)
                 	BRNE _0x82
                 ; 0000 025B         {
0007af 3009      ; 0000 025C         if(8<j)
0007b0 f020      	CPI  R16,9
                 	BRLO _0x83
0007b1 e9e0      ; 0000 025D                 {checking_result=0x90;//ошибка формирования фрейма, если количество преамбул больше либо равно количеству символов
0007b2 93e0 027c 	LDI  R30,LOW(144)
                 	STS  _checking_result,R30
                 ; 0000 025E                  //rx_buffer0[i+1]=0x00;
0007b4 c125      ; 0000 025F                  return checking_result;
                 	RJMP _0x2080002
                 ; 0000 0260                  }
                 ; 0000 0261          j++;
0007b5 5f0f      _0x83:
                 	SUBI R16,-1
0007b6 cff1      ; 0000 0262         }
                 	RJMP _0x80
                 _0x82:
0007b7 9300 027e ; 0000 0263         preambula_bytes_rec=j;
                 	STS  _preambula_bytes_rec,R16
0007b9 2f10      ; 0000 0264         i=j;
                 	MOV  R17,R16
0007ba 2fe0      ; 0000 0265 if ((rx_buffer0[j])!=0x02)
0007bb e0f0      	MOV  R30,R16
0007bc 5fe8      	LDI  R31,0
0007bd 4ffd      	SUBI R30,LOW(-_rx_buffer0)
0007be 81e0      	SBCI R31,HIGH(-_rx_buffer0)
0007bf 30e2      	LD   R30,Z
0007c0 f019      	CPI  R30,LOW(0x2)
                 	BREQ _0x84
                 ; 0000 0266 //if ((rx_buffer0[i])!=0x02)
                 ; 0000 0267         {
0007c1 e0e2      ; 0000 0268         checking_result=0x02;
0007c2 93e0 027c 	LDI  R30,LOW(2)
                 	STS  _checking_result,R30
                 ; 0000 0269         //return checking_result;
                 ; 0000 026A         }//диагностируем ошибку команд "неверный выбор", если не от главного устройства
                 ; 0000 026B //else    {
                 ; 0000 026C         check_sum=check_sum^rx_buffer0[i];
0007c4 2fe1      _0x84:
0007c5 e0f0      	MOV  R30,R17
0007c6 5fe8      	LDI  R31,0
0007c7 4ffd      	SUBI R30,LOW(-_rx_buffer0)
0007c8 81e0      	SBCI R31,HIGH(-_rx_buffer0)
0007c9 e0f0      	LD   R30,Z
0007ca 81ae      	LDI  R31,0
0007cb 81bf      	LDD  R26,Y+6
0007cc 27ea      	LDD  R27,Y+6+1
0007cd 27fb      	EOR  R30,R26
0007ce 83ee      	EOR  R31,R27
0007cf 83ff      	STD  Y+6,R30
                 	STD  Y+6+1,R31
                 ; 0000 026D //        }
0007d0 5f1f      ; 0000 026E i++;
                 	SUBI R17,-1
0007d1 2fe1      ; 0000 026F if (((rx_buffer0[i])&0x30)!=0x00)
0007d2 e0f0      	MOV  R30,R17
0007d3 5fe8      	LDI  R31,0
0007d4 4ffd      	SUBI R30,LOW(-_rx_buffer0)
0007d5 81e0      	SBCI R31,HIGH(-_rx_buffer0)
0007d6 e0f0      	LD   R30,Z
0007d7 73e0      	LDI  R31,0
0007d8 f019      	ANDI R30,LOW(0x30)
                 	BREQ _0x85
0007d9 e9e0      ; 0000 0270         {checking_result=0x90;
0007da 93e0 027c 	LDI  R30,LOW(144)
                 	STS  _checking_result,R30
                 ; 0000 0271         //return checking_result;
                 ; 0000 0272         }
                 ; 0000 0273 //burst_mode=(rx_buffer0[i]&0x40)>>6;                          //burst_mode нужно вообще-то прописывать в команде
                 ; 0000 0274 if((rx_buffer0[i]&0x0f)==Parameter_bank[25])answering=1;       //это проверка адреса, если адрес не тот, датчик молчит
0007dc 2fe1      _0x85:
0007dd e0f0      	MOV  R30,R17
0007de 5fe8      	LDI  R31,0
0007df 4ffd      	SUBI R30,LOW(-_rx_buffer0)
0007e0 81e0      	SBCI R31,HIGH(-_rx_buffer0)
0007e1 e0f0      	LD   R30,Z
0007e2 70ef      	LDI  R31,0
0007e3 70f0      	ANDI R30,LOW(0xF)
0007e4 010f      	ANDI R31,HIGH(0xF)
                +
0007e5 e1a9     +LDI R26 , LOW ( _Parameter_bank + 25 )
0007e6 e0b0     +LDI R27 , HIGH ( _Parameter_bank + 25 )
                 	__POINTW2MN _Parameter_bank,25
0007e7 940e 0e73 	CALL __EEPROMRDB
0007e9 01d0      	MOVW R26,R0
0007ea e0f0      	LDI  R31,0
0007eb 17ea      	CP   R30,R26
0007ec 07fb      	CPC  R31,R27
0007ed f411      	BRNE _0x86
0007ee 9af5      	SBI  0x1E,5
                 ; 0000 0275 else answering=0;
0007ef c001      	RJMP _0x89
                 _0x86:
0007f0 98f5      	CBI  0x1E,5
                 ; 0000 0276 check_sum=check_sum^rx_buffer0[i];
                 _0x89:
0007f1 2fe1      	MOV  R30,R17
0007f2 e0f0      	LDI  R31,0
0007f3 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0007f4 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0007f5 81e0      	LD   R30,Z
0007f6 e0f0      	LDI  R31,0
0007f7 81ae      	LDD  R26,Y+6
0007f8 81bf      	LDD  R27,Y+6+1
0007f9 27ea      	EOR  R30,R26
0007fa 27fb      	EOR  R31,R27
0007fb 83ee      	STD  Y+6,R30
0007fc 83ff      	STD  Y+6+1,R31
                 ; 0000 0277 i++;
0007fd 5f1f      	SUBI R17,-1
                 ; 0000 0278 command_rx_val=rx_buffer0[i];// здесь сделаем проверку команды: если она состоит в листе команд, то ошибку не выдаем, если нет => checking_result=0x0600;
0007fe 2fe1      	MOV  R30,R17
0007ff e0f0      	LDI  R31,0
000800 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000801 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000802 81e0      	LD   R30,Z
000803 93e0 0280 	STS  _command_rx_val,R30
                 ; 0000 0279 //if(command_rx_val==35)
                 ; 0000 027A //        {
                 ; 0000 027B //
                 ; 0000 027C //        for(l=0;l<4;l++)
                 ; 0000 027D //                {
                 ; 0000 027E //                Parameter_bank[88+l]=rx_buffer0[i+3+l];
                 ; 0000 027F //                Parameter_bank[92+l]=rx_buffer0[i+7+l];
                 ; 0000 0280 //                }
                 ; 0000 0281 //        }
                 ; 0000 0282 //if(command_rx_val==36)for(l=0;l<4;l++)Parameter_bank[88+l]=rx_buffer0[i+2+l];
                 ; 0000 0283 //if(command_rx_val==37)for(l=0;l<4;l++)Parameter_bank[92+l]=rx_buffer0[i+2+l];
                 ; 0000 0284 //if(command_rx_val==38)configuration_changed_flag=0;
                 ; 0000 0285 //if(command_rx_val==40)enter_fixed_current_mode(float(rx_buffer0[i+2])||float(rx_buffer0[i+3]<<8)||float(rx_buffer0[i+4]<<16)||float(rx_buffer0[i+5]<<24));
                 ; 0000 0286 //if(command_rx_val==41)perform_device_self_test();
                 ; 0000 0287 //if(command_rx_val==42)perform_device_reset();
                 ; 0000 0288 if(command_rx_val==38)ResetDeviceSettings(0);
000805 91a0 0280 	LDS  R26,_command_rx_val
000807 32a6      	CPI  R26,LOW(0x26)
000808 f419      	BRNE _0x8C
000809 e0e0      	LDI  R30,LOW(0)
00080a 93ea      	ST   -Y,R30
00080b d406      	RCALL _ResetDeviceSettings
                 ; 0000 0289 if(command_rx_val==43){
                 _0x8C:
00080c 91a0 0280 	LDS  R26,_command_rx_val
00080e 32ab      	CPI  R26,LOW(0x2B)
00080f f4d1      	BRNE _0x8D
                 ; 0000 028A                         #asm ("cli")
000810 94f8      	cli
                 ; 0000 028B                         ADC_PV_calibration_point1[rangeIndex]=adc_data;//ADC_PV_zero_val=adc_data;
000811 2dea      	MOV  R30,R10
000812 e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000813 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000814 e0f0      	LDI  R31,0
000815 0fee      	LSL  R30
000816 1fff      	ROL  R31
000817 0fae      	ADD  R26,R30
000818 1fbf      	ADC  R27,R31
000819 91e0 0273 	LDS  R30,_adc_data
00081b 91f0 0274 	LDS  R31,_adc_data+1
00081d 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 028C                         calibration_point1=adc_data;
                +
00081f 9050 0273+LDS R5 , 0 + _adc_data
000821 9060 0274+LDS R6 , 0 + _adc_data + 1
                 	__GETWRMN 5,6,0,_adc_data
                 ; 0000 028D                         CalibrationConfigChanged=1;
000823 e2a5      	LDI  R26,LOW(_CalibrationConfigChanged)
000824 e0b1      	LDI  R27,HIGH(_CalibrationConfigChanged)
000825 e0e1      	LDI  R30,LOW(1)
000826 940e 0e8f 	CALL __EEPROMWRB
                 ; 0000 028E                         #asm ("sei")
000828 9478      	sei
                 ; 0000 028F                         CalculateCalibrationRates();
000829 d375      	RCALL _CalculateCalibrationRates
                 ; 0000 0290                         }
                 ; 0000 0291 if(command_rx_val==45)for(l=0;l<4;l++)Parameter_bank[105+l]=rx_buffer0[i+2+l];    //записываем соответствующий току битовый код АЦП
                 _0x8D:
00082a 91a0 0280 	LDS  R26,_command_rx_val
00082c 32ad      	CPI  R26,LOW(0x2D)
00082d f4b1      	BRNE _0x8E
00082e e020      	LDI  R18,LOW(0)
                 _0x90:
00082f 3024      	CPI  R18,4
000830 f498      	BRSH _0x91
000831 2fe2      	MOV  R30,R18
000832 e0f0      	LDI  R31,0
000833 01bf      	MOVW R22,R30
                +
000834 59e7     +SUBI R30 , LOW ( - _Parameter_bank - ( 105 ) )
000835 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 105 ) )
                 	__ADDW1MN _Parameter_bank,105
000836 010f      	MOVW R0,R30
000837 2fe1      	MOV  R30,R17
000838 e0f0      	LDI  R31,0
000839 9632      	ADIW R30,2
00083a 0fe6      	ADD  R30,R22
00083b 1ff7      	ADC  R31,R23
00083c 5fe8      	SUBI R30,LOW(-_rx_buffer0)
00083d 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00083e 81e0      	LD   R30,Z
00083f 01d0      	MOVW R26,R0
000840 940e 0e8f 	CALL __EEPROMWRB
000842 5f2f      	SUBI R18,-1
000843 cfeb      	RJMP _0x90
                 _0x91:
                 ; 0000 0292 if(command_rx_val==46)for(l=0;l<4;l++)Parameter_bank[109+l]=rx_buffer0[i+2+l];
                 _0x8E:
000844 91a0 0280 	LDS  R26,_command_rx_val
000846 32ae      	CPI  R26,LOW(0x2E)
000847 f4b1      	BRNE _0x92
000848 e020      	LDI  R18,LOW(0)
                 _0x94:
000849 3024      	CPI  R18,4
00084a f498      	BRSH _0x95
00084b 2fe2      	MOV  R30,R18
00084c e0f0      	LDI  R31,0
00084d 01bf      	MOVW R22,R30
                +
00084e 59e3     +SUBI R30 , LOW ( - _Parameter_bank - ( 109 ) )
00084f 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 109 ) )
                 	__ADDW1MN _Parameter_bank,109
000850 010f      	MOVW R0,R30
000851 2fe1      	MOV  R30,R17
000852 e0f0      	LDI  R31,0
000853 9632      	ADIW R30,2
000854 0fe6      	ADD  R30,R22
000855 1ff7      	ADC  R31,R23
000856 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000857 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000858 81e0      	LD   R30,Z
000859 01d0      	MOVW R26,R0
00085a 940e 0e8f 	CALL __EEPROMWRB
00085c 5f2f      	SUBI R18,-1
00085d cfeb      	RJMP _0x94
                 _0x95:
                 ; 0000 0293 if(command_rx_val==111){
                 _0x92:
00085e 91a0 0280 	LDS  R26,_command_rx_val
000860 36af      	CPI  R26,LOW(0x6F)
000861 f4d1      	BRNE _0x96
                 ; 0000 0294                         #asm ("cli")
000862 94f8      	cli
                 ; 0000 0295                         ADC_PV_calibration_point2[rangeIndex]=adc_data;
000863 2dea      	MOV  R30,R10
000864 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000865 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000866 e0f0      	LDI  R31,0
000867 0fee      	LSL  R30
000868 1fff      	ROL  R31
000869 0fae      	ADD  R26,R30
00086a 1fbf      	ADC  R27,R31
00086b 91e0 0273 	LDS  R30,_adc_data
00086d 91f0 0274 	LDS  R31,_adc_data+1
00086f 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 0296                         calibration_point2=adc_data;
                +
000871 9070 0273+LDS R7 , 0 + _adc_data
000873 9080 0274+LDS R8 , 0 + _adc_data + 1
                 	__GETWRMN 7,8,0,_adc_data
                 ; 0000 0297                         CalibrationConfigChanged=1;
000875 e2a5      	LDI  R26,LOW(_CalibrationConfigChanged)
000876 e0b1      	LDI  R27,HIGH(_CalibrationConfigChanged)
000877 e0e1      	LDI  R30,LOW(1)
000878 940e 0e8f 	CALL __EEPROMWRB
                 ; 0000 0298                         #asm ("sei")
00087a 9478      	sei
                 ; 0000 0299                         CalculateCalibrationRates();
00087b d323      	RCALL _CalculateCalibrationRates
                 ; 0000 029A                         }
                 ; 0000 029B check_sum=check_sum^rx_buffer0[i];
                 _0x96:
00087c 2fe1      	MOV  R30,R17
00087d e0f0      	LDI  R31,0
00087e 5fe8      	SUBI R30,LOW(-_rx_buffer0)
00087f 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000880 81e0      	LD   R30,Z
000881 e0f0      	LDI  R31,0
000882 81ae      	LDD  R26,Y+6
000883 81bf      	LDD  R27,Y+6+1
000884 27ea      	EOR  R30,R26
000885 27fb      	EOR  R31,R27
000886 83ee      	STD  Y+6,R30
000887 83ff      	STD  Y+6+1,R31
                 ; 0000 029C i++;
000888 5f1f      	SUBI R17,-1
                 ; 0000 029D com_bytes_rx=rx_buffer0[i];                    //количество байт, зная их проверяем число байт данных и если оно не совпадает, диагностируем как раз-таки ошибку формирования фрейма 0х9000
000889 2fe1      	MOV  R30,R17
00088a e0f0      	LDI  R31,0
00088b 5fe8      	SUBI R30,LOW(-_rx_buffer0)
00088c 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00088d 81e0      	LD   R30,Z
00088e 93e0 026d 	STS  _com_bytes_rx,R30
                 ; 0000 029E check_sum=check_sum^rx_buffer0[i];
000890 2fe1      	MOV  R30,R17
000891 e0f0      	LDI  R31,0
000892 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000893 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000894 81e0      	LD   R30,Z
000895 e0f0      	LDI  R31,0
000896 81ae      	LDD  R26,Y+6
000897 81bf      	LDD  R27,Y+6+1
000898 27ea      	EOR  R30,R26
000899 27fb      	EOR  R31,R27
00089a 83ee      	STD  Y+6,R30
00089b 83ff      	STD  Y+6+1,R31
                 ; 0000 029F i++;
00089c 5f1f      	SUBI R17,-1
                 ; 0000 02A0 tmp_i=i;
00089d 2f51      	MOV  R21,R17
                 ; 0000 02A1 j=tmp_i;
00089e 2f05      	MOV  R16,R21
                 ; 0000 02A2 for (i=tmp_i;i<tmp_i+com_bytes_rx;i++)
00089f 2f15      	MOV  R17,R21
                 _0x98:
0008a0 2fa5      	MOV  R26,R21
0008a1 27bb      	CLR  R27
0008a2 91e0 026d 	LDS  R30,_com_bytes_rx
0008a4 e0f0      	LDI  R31,0
0008a5 0fea      	ADD  R30,R26
0008a6 1ffb      	ADC  R31,R27
0008a7 2fa1      	MOV  R26,R17
0008a8 e0b0      	LDI  R27,0
0008a9 17ae      	CP   R26,R30
0008aa 07bf      	CPC  R27,R31
0008ab f4d4      	BRGE _0x99
                 ; 0000 02A3        {
                 ; 0000 02A4        j++;
0008ac 5f0f      	SUBI R16,-1
                 ; 0000 02A5        com_data_rx[k]=rx_buffer0[i];
0008ad 2fa3      	MOV  R26,R19
0008ae e0b0      	LDI  R27,0
0008af 5ba8      	SUBI R26,LOW(-_com_data_rx)
0008b0 4fbd      	SBCI R27,HIGH(-_com_data_rx)
0008b1 2fe1      	MOV  R30,R17
0008b2 e0f0      	LDI  R31,0
0008b3 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008b4 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008b5 81e0      	LD   R30,Z
0008b6 93ec      	ST   X,R30
                 ; 0000 02A6        check_sum=check_sum^rx_buffer0[i];
0008b7 2fe1      	MOV  R30,R17
0008b8 e0f0      	LDI  R31,0
0008b9 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008ba 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008bb 81e0      	LD   R30,Z
0008bc e0f0      	LDI  R31,0
0008bd 81ae      	LDD  R26,Y+6
0008be 81bf      	LDD  R27,Y+6+1
0008bf 27ea      	EOR  R30,R26
0008c0 27fb      	EOR  R31,R27
0008c1 83ee      	STD  Y+6,R30
0008c2 83ff      	STD  Y+6+1,R31
                 ; 0000 02A7        k++;
0008c3 5f3f      	SUBI R19,-1
                 ; 0000 02A8        }
0008c4 5f1f      	SUBI R17,-1
0008c5 cfda      	RJMP _0x98
                 _0x99:
                 ; 0000 02A9                 //j++;
                 ; 0000 02AA //        if(com_bytes_rx!=0)i--;
                 ; 0000 02AB if (j!=i)
0008c6 1710      	CP   R17,R16
0008c7 f019      	BREQ _0x9A
                 ; 0000 02AC        {checking_result=0x90;
0008c8 e9e0      	LDI  R30,LOW(144)
0008c9 93e0 027c 	STS  _checking_result,R30
                 ; 0000 02AD        //return checking_result;
                 ; 0000 02AE        }
                 ; 0000 02AF //i++;
                 ; 0000 02B0 if(rx_buffer0[i]!=check_sum)
                 _0x9A:
0008cb 2fe1      	MOV  R30,R17
0008cc e0f0      	LDI  R31,0
0008cd 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008ce 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008cf 81e0      	LD   R30,Z
0008d0 2fae      	MOV  R26,R30
0008d1 81ee      	LDD  R30,Y+6
0008d2 81ff      	LDD  R31,Y+6+1
0008d3 e0b0      	LDI  R27,0
0008d4 17ea      	CP   R30,R26
0008d5 07fb      	CPC  R31,R27
0008d6 f019      	BREQ _0x9B
                 ; 0000 02B1         {
                 ; 0000 02B2         checking_result=0x88;
0008d7 e8e8      	LDI  R30,LOW(136)
0008d8 93e0 027c 	STS  _checking_result,R30
                 ; 0000 02B3         //return checking_result;
                 ; 0000 02B4         }
                 ; 0000 02B5 return checking_result;
                 _0x9B:
                 _0x2080002:
0008da 91e0 027c 	LDS  R30,_checking_result
0008dc e0f0      	LDI  R31,0
0008dd 940e 1049 	CALL __LOADLOCR6
0008df 9628      	ADIW R28,8
0008e0 9508      	RET
                 ; 0000 02B6 }
                 ;
                 ;void clear_buffer()
                 ; 0000 02B9 {
                 _clear_buffer:
                 ; 0000 02BA char i=0;
                 ; 0000 02BB for (i=0;i<RX_BUFFER_SIZE0;i++)
0008e1 931a      	ST   -Y,R17
                 ;	i -> R17
0008e2 e010      	LDI  R17,0
0008e3 e010      	LDI  R17,LOW(0)
                 _0x9D:
0008e4 3410      	CPI  R17,64
0008e5 f468      	BRSH _0x9E
                 ; 0000 02BC         {
                 ; 0000 02BD         rx_buffer0[i]=0;
0008e6 2fe1      	MOV  R30,R17
0008e7 e0f0      	LDI  R31,0
0008e8 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008e9 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008ea e0a0      	LDI  R26,LOW(0)
0008eb 83a0      	STD  Z+0,R26
                 ; 0000 02BE         tx_buffer0[i]=0;
0008ec 2fe1      	MOV  R30,R17
0008ed e0f0      	LDI  R31,0
0008ee 56e6      	SUBI R30,LOW(-_tx_buffer0)
0008ef 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0008f0 83a0      	STD  Z+0,R26
                 ; 0000 02BF         }
0008f1 5f1f      	SUBI R17,-1
0008f2 cff1      	RJMP _0x9D
                 _0x9E:
                 ; 0000 02C0 for (i=0;i<25;i++)
0008f3 e010      	LDI  R17,LOW(0)
                 _0xA0:
0008f4 3119      	CPI  R17,25
0008f5 f468      	BRSH _0xA1
                 ; 0000 02C1         {
                 ; 0000 02C2         com_data_rx[i]=0;
0008f6 2fe1      	MOV  R30,R17
0008f7 e0f0      	LDI  R31,0
0008f8 5be8      	SUBI R30,LOW(-_com_data_rx)
0008f9 4ffd      	SBCI R31,HIGH(-_com_data_rx)
0008fa e0a0      	LDI  R26,LOW(0)
0008fb 83a0      	STD  Z+0,R26
                 ; 0000 02C3         Command_data[i]=0;
0008fc 2fe1      	MOV  R30,R17
0008fd e0f0      	LDI  R31,0
0008fe 57ef      	SUBI R30,LOW(-_Command_data)
0008ff 4ffd      	SBCI R31,HIGH(-_Command_data)
000900 83a0      	STD  Z+0,R26
                 ; 0000 02C4         }
000901 5f1f      	SUBI R17,-1
000902 cff1      	RJMP _0xA0
                 _0xA1:
                 ; 0000 02C5 }
000903 9119      	LD   R17,Y+
000904 9508      	RET
                 ;// Declare your global variables here
                 ;void system_init_(char initVar){
                 ; 0000 02C7 void system_init_(char initVar){
                 ; 0000 02C8 #asm("wdr")
                 ;	initVar -> Y+0
                 ; 0000 02C9 WDTCSR=0x38;
                 ; 0000 02CA WDTCSR=0x0E;
                 ; 0000 02CB // Crystal Oscillator division factor: 1
                 ; 0000 02CC /*#pragma optsize-
                 ; 0000 02CD CLKPR=0x80;
                 ; 0000 02CE CLKPR=0x00;
                 ; 0000 02CF #ifdef _OPTIMIZE_SIZE_
                 ; 0000 02D0 #pragma optsize+
                 ; 0000 02D1 #endif
                 ; 0000 02D2   */
                 ; 0000 02D3 // Input/Output Ports initialization
                 ; 0000 02D4 // Port B initialization
                 ; 0000 02D5 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 02D6 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 02D7 PORTB=0x00;
                 ; 0000 02D8 DDRB=0x2c;
                 ; 0000 02D9 
                 ; 0000 02DA // Port C initialization
                 ; 0000 02DB // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 02DC // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 02DD PORTC=0x00;
                 ; 0000 02DE DDRC=0x00;
                 ; 0000 02DF 
                 ; 0000 02E0 // Port D initialization
                 ; 0000 02E1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 02E2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 02E3 //PORTD=0x00;
                 ; 0000 02E4 DDRD.3=1;
                 ; 0000 02E5 PORTD.3=1;
                 ; 0000 02E6 DDRD.6=1;
                 ; 0000 02E7 DDRD.7=1;
                 ; 0000 02E8 PORTD.6=0;
                 ; 0000 02E9 PORTD.7=0;
                 ; 0000 02EA // Timer/Counter 0 initialization
                 ; 0000 02EB // Clock source: System Clock
                 ; 0000 02EC // Clock value: Timer 0 Stopped
                 ; 0000 02ED // Mode: Normal top=FFh
                 ; 0000 02EE // OC0A output: Disconnected
                 ; 0000 02EF // OC0B output: Disconnected
                 ; 0000 02F0 //TCCR0A=0x00;
                 ; 0000 02F1 //TCCR0B=0x04;
                 ; 0000 02F2 //TCNT0=0xA5;
                 ; 0000 02F3 //OCR0A=0x00;
                 ; 0000 02F4 //OCR0B=0x00;
                 ; 0000 02F5 stop_wait_Rx_timer;
                 ; 0000 02F6 /*USART predefinition: 1200 baud rate, tx enable, all interrutpts enabled 8bit buffer*/
                 ; 0000 02F7 UCSR0A=0x00;
                 ; 0000 02F8 UCSR0B=0xc0;
                 ; 0000 02F9 UCSR0C=0x06;
                 ; 0000 02FA UBRR0H=0x00;
                 ; 0000 02FB UBRR0L=0x17;
                 ; 0000 02FC 
                 ; 0000 02FD // Timer/Counter 1 initialization
                 ; 0000 02FE // Clock source: System Clock
                 ; 0000 02FF // Clock value: Timer 1 Stopped
                 ; 0000 0300 // Mode: Normal top=FFFFh
                 ; 0000 0301 // OC1A output: Discon.
                 ; 0000 0302 // OC1B output: Discon.
                 ; 0000 0303 // Noise Canceler: Off
                 ; 0000 0304 // Input Capture on Falling Edge
                 ; 0000 0305 // Timer 1 Overflow Interrupt: Off
                 ; 0000 0306 // Input Capture Interrupt: Off
                 ; 0000 0307 // Compare A Match Interrupt: Off
                 ; 0000 0308 // Compare B Match Interrupt: Off
                 ; 0000 0309 TCCR1A=0x00;
                 ; 0000 030A TCCR1B=0x00;
                 ; 0000 030B TCNT1H=0x00;
                 ; 0000 030C TCNT1L=0x00;
                 ; 0000 030D ICR1H=0x00;
                 ; 0000 030E ICR1L=0x00;
                 ; 0000 030F OCR1AH=0x00;
                 ; 0000 0310 OCR1AL=0x00;
                 ; 0000 0311 OCR1BH=0x00;
                 ; 0000 0312 OCR1BL=0x00;
                 ; 0000 0313 
                 ; 0000 0314 // Timer/Counter 2 initialization
                 ; 0000 0315 // Clock source: System Clock
                 ; 0000 0316 // Clock value: Timer 2 Stopped
                 ; 0000 0317 // Mode: Normal top=FFh
                 ; 0000 0318 // OC2A output: Disconnected
                 ; 0000 0319 // OC2B output: Disconnected
                 ; 0000 031A ASSR=0x00;
                 ; 0000 031B TCCR2A=0x00;
                 ; 0000 031C TCCR2B=0x00;
                 ; 0000 031D TCNT2=0x00;
                 ; 0000 031E OCR2A=0x00;
                 ; 0000 031F OCR2B=0x00;
                 ; 0000 0320 
                 ; 0000 0321 // External Interrupt(s) initialization
                 ; 0000 0322 // INT0: On
                 ; 0000 0323 // INT0 Mode: Any change
                 ; 0000 0324 // INT1: Off
                 ; 0000 0325 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0326 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 0327 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0328 wait_startOCD;
                 ; 0000 0329 EIMSK=0x01;
                 ; 0000 032A EIFR=0x01;
                 ; 0000 032B PCICR=0x00;
                 ; 0000 032C 
                 ; 0000 032D 
                 ; 0000 032E // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 032F TIMSK0=0x00;
                 ; 0000 0330 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0331 TIMSK1=0x00;
                 ; 0000 0332 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0333 TIMSK2=0x00;
                 ; 0000 0334 
                 ; 0000 0335 // Analog Comparator initialization
                 ; 0000 0336 // Analog Comparator: Off
                 ; 0000 0337 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0338 ACSR=0x80;
                 ; 0000 0339 ADCSRB=0x00;
                 ; 0000 033A 
                 ; 0000 033B // ADC initialization
                 ; 0000 033C // ADC Clock frequency: 230,400 kHz
                 ; 0000 033D // ADC Voltage Reference: AREF pin
                 ; 0000 033E // ADC Auto Trigger Source: Free Running
                 ; 0000 033F // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 0340 // ADC4: Off, ADC5: Off
                 ; 0000 0341 if(initVar==1)
                 ; 0000 0342 {
                 ; 0000 0343 DIDR0=0x3f;
                 ; 0000 0344 ADMUX=0x20;
                 ; 0000 0345 ADCSRA=0xcf;
                 ; 0000 0346 ADCSRB=ADCSRB||0x00;
                 ; 0000 0347 }
                 ; 0000 0348 else
                 ; 0000 0349 {
                 ; 0000 034A DIDR0=0x3f;
                 ; 0000 034B ADMUX=0x00;
                 ; 0000 034C ADCSRA=0x0f;
                 ; 0000 034D ADCSRB=ADCSRB||0x00;
                 ; 0000 034E 
                 ; 0000 034F }
                 ; 0000 0350 // SPI initialization
                 ; 0000 0351 // SPI Type: Master
                 ; 0000 0352 // SPI Clock Rate: 2*115,200 kHz
                 ; 0000 0353 // SPI Clock Phase: Cycle Half
                 ; 0000 0354 // SPI Clock Polarity: Low
                 ; 0000 0355 // SPI Data Order: MSB First
                 ; 0000 0356 SPCR=0x53;
                 ; 0000 0357 SPSR=0x00;
                 ; 0000 0358 //SPDR=0x00;
                 ; 0000 0359 //enable_SPI;
                 ; 0000 035A }
                 ;
                 ;void system_init(){
                 ; 0000 035C void system_init(){
                 _system_init:
                 ; 0000 035D #asm("wdr")
000905 95a8      	wdr
                 ; 0000 035E WDTCSR=0x38;
000906 e3e8      	LDI  R30,LOW(56)
000907 93e0 0060 	STS  96,R30
                 ; 0000 035F WDTCSR=0x0E;
000909 e0ee      	LDI  R30,LOW(14)
00090a 93e0 0060 	STS  96,R30
                 ; 0000 0360 // Crystal Oscillator division factor: 1
                 ; 0000 0361 /*#pragma optsize-
                 ; 0000 0362 CLKPR=0x80;
                 ; 0000 0363 CLKPR=0x00;
                 ; 0000 0364 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0365 #pragma optsize+
                 ; 0000 0366 #endif
                 ; 0000 0367   */
                 ; 0000 0368 // Input/Output Ports initialization
                 ; 0000 0369 // Port B initialization
                 ; 0000 036A // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 036B // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 036C PORTB=0x00;
00090c e0e0      	LDI  R30,LOW(0)
00090d b9e5      	OUT  0x5,R30
                 ; 0000 036D DDRB=0x2c;
00090e e2ec      	LDI  R30,LOW(44)
00090f b9e4      	OUT  0x4,R30
                 ; 0000 036E 
                 ; 0000 036F // Port C initialization
                 ; 0000 0370 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0371 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0372 PORTC=0x00;
000910 e0e0      	LDI  R30,LOW(0)
000911 b9e8      	OUT  0x8,R30
                 ; 0000 0373 DDRC=0x00;
000912 b9e7      	OUT  0x7,R30
                 ; 0000 0374 
                 ; 0000 0375 // Port D initialization
                 ; 0000 0376 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0377 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0378 //PORTD=0x00;
                 ; 0000 0379 DDRD.3=1;
000913 9a53      	SBI  0xA,3
                 ; 0000 037A PORTD.3=1;
000914 9a5b      	SBI  0xB,3
                 ; 0000 037B DDRD.6=1;
000915 9a56      	SBI  0xA,6
                 ; 0000 037C DDRD.7=1;
000916 9a57      	SBI  0xA,7
                 ; 0000 037D PORTD.6=0;
000917 985e      	CBI  0xB,6
                 ; 0000 037E PORTD.7=0;
000918 985f      	CBI  0xB,7
                 ; 0000 037F // Timer/Counter 0 initialization
                 ; 0000 0380 // Clock source: System Clock
                 ; 0000 0381 // Clock value: Timer 0 Stopped
                 ; 0000 0382 // Mode: Normal top=FFh
                 ; 0000 0383 // OC0A output: Disconnected
                 ; 0000 0384 // OC0B output: Disconnected
                 ; 0000 0385 //TCCR0A=0x00;
                 ; 0000 0386 //TCCR0B=0x04;
                 ; 0000 0387 //TCNT0=0xA5;
                 ; 0000 0388 //OCR0A=0x00;
                 ; 0000 0389 //OCR0B=0x00;
                 ; 0000 038A stop_wait_Rx_timer;
000919 93e0 006e 	STS  110,R30
00091b bde4      	OUT  0x24,R30
00091c bde5      	OUT  0x25,R30
00091d bde6      	OUT  0x26,R30
                 ; 0000 038B /*USART predefinition: 1200 baud rate, tx enable, all interrutpts enabled 8bit buffer*/
                 ; 0000 038C UCSR0A=0x00;
00091e 93e0 00c0 	STS  192,R30
                 ; 0000 038D UCSR0B=0xc0;
000920 ece0      	LDI  R30,LOW(192)
000921 93e0 00c1 	STS  193,R30
                 ; 0000 038E UCSR0C=0x06;
000923 e0e6      	LDI  R30,LOW(6)
000924 93e0 00c2 	STS  194,R30
                 ; 0000 038F UBRR0H=0x00;
000926 e0e0      	LDI  R30,LOW(0)
000927 93e0 00c5 	STS  197,R30
                 ; 0000 0390 UBRR0L=0x17;
000929 e1e7      	LDI  R30,LOW(23)
00092a 93e0 00c4 	STS  196,R30
                 ; 0000 0391 
                 ; 0000 0392 // Timer/Counter 1 initialization
                 ; 0000 0393 // Clock source: System Clock
                 ; 0000 0394 // Clock value: Timer 1 Stopped
                 ; 0000 0395 // Mode: Normal top=FFFFh
                 ; 0000 0396 // OC1A output: Discon.
                 ; 0000 0397 // OC1B output: Discon.
                 ; 0000 0398 // Noise Canceler: Off
                 ; 0000 0399 // Input Capture on Falling Edge
                 ; 0000 039A // Timer 1 Overflow Interrupt: Off
                 ; 0000 039B // Input Capture Interrupt: Off
                 ; 0000 039C // Compare A Match Interrupt: Off
                 ; 0000 039D // Compare B Match Interrupt: Off
                 ; 0000 039E TCCR1A=0x00;
00092c e0e0      	LDI  R30,LOW(0)
00092d 93e0 0080 	STS  128,R30
                 ; 0000 039F TCCR1B=0x00;
00092f 93e0 0081 	STS  129,R30
                 ; 0000 03A0 TCNT1H=0x00;
000931 93e0 0085 	STS  133,R30
                 ; 0000 03A1 TCNT1L=0x00;
000933 93e0 0084 	STS  132,R30
                 ; 0000 03A2 ICR1H=0x00;
000935 93e0 0087 	STS  135,R30
                 ; 0000 03A3 ICR1L=0x00;
000937 93e0 0086 	STS  134,R30
                 ; 0000 03A4 OCR1AH=0x00;
000939 93e0 0089 	STS  137,R30
                 ; 0000 03A5 OCR1AL=0x00;
00093b 93e0 0088 	STS  136,R30
                 ; 0000 03A6 OCR1BH=0x00;
00093d 93e0 008b 	STS  139,R30
                 ; 0000 03A7 OCR1BL=0x00;
00093f 93e0 008a 	STS  138,R30
                 ; 0000 03A8 
                 ; 0000 03A9 // Timer/Counter 2 initialization
                 ; 0000 03AA // Clock source: System Clock
                 ; 0000 03AB // Clock value: Timer 2 Stopped
                 ; 0000 03AC // Mode: Normal top=FFh
                 ; 0000 03AD // OC2A output: Disconnected
                 ; 0000 03AE // OC2B output: Disconnected
                 ; 0000 03AF ASSR=0x00;
000941 93e0 00b6 	STS  182,R30
                 ; 0000 03B0 TCCR2A=0x00;
000943 93e0 00b0 	STS  176,R30
                 ; 0000 03B1 TCCR2B=0x00;
000945 93e0 00b1 	STS  177,R30
                 ; 0000 03B2 TCNT2=0x00;
000947 93e0 00b2 	STS  178,R30
                 ; 0000 03B3 OCR2A=0x00;
000949 93e0 00b3 	STS  179,R30
                 ; 0000 03B4 OCR2B=0x00;
00094b 93e0 00b4 	STS  180,R30
                 ; 0000 03B5 
                 ; 0000 03B6 // External Interrupt(s) initialization
                 ; 0000 03B7 // INT0: On
                 ; 0000 03B8 // INT0 Mode: Any change
                 ; 0000 03B9 // INT1: Off
                 ; 0000 03BA // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 03BB // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 03BC // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 03BD wait_startOCD;
00094d e0e3      	LDI  R30,LOW(3)
00094e 93e0 0069 	STS  105,R30
                 ; 0000 03BE EIMSK=0x01;
000950 e0e1      	LDI  R30,LOW(1)
000951 bbed      	OUT  0x1D,R30
                 ; 0000 03BF EIFR=0x01;
000952 bbec      	OUT  0x1C,R30
                 ; 0000 03C0 PCICR=0x00;
000953 e0e0      	LDI  R30,LOW(0)
000954 93e0 0068 	STS  104,R30
                 ; 0000 03C1 
                 ; 0000 03C2 
                 ; 0000 03C3 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 03C4 TIMSK0=0x00;
000956 93e0 006e 	STS  110,R30
                 ; 0000 03C5 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 03C6 TIMSK1=0x00;
000958 93e0 006f 	STS  111,R30
                 ; 0000 03C7 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 03C8 TIMSK2=0x00;
00095a 93e0 0070 	STS  112,R30
                 ; 0000 03C9 
                 ; 0000 03CA // Analog Comparator initialization
                 ; 0000 03CB // Analog Comparator: Off
                 ; 0000 03CC // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 03CD ACSR=0x80;
00095c e8e0      	LDI  R30,LOW(128)
00095d bfe0      	OUT  0x30,R30
                 ; 0000 03CE ADCSRB=0x00;
00095e e0e0      	LDI  R30,LOW(0)
00095f 93e0 007b 	STS  123,R30
                 ; 0000 03CF 
                 ; 0000 03D0 // ADC initialization
                 ; 0000 03D1 // ADC Clock frequency: 230,400 kHz
                 ; 0000 03D2 // ADC Voltage Reference: AREF pin
                 ; 0000 03D3 // ADC Auto Trigger Source: Free Running
                 ; 0000 03D4 // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 03D5 // ADC4: Off, ADC5: Off
                 ; 0000 03D6 DIDR0=0x3f;
000961 e3ef      	LDI  R30,LOW(63)
000962 93e0 007e 	STS  126,R30
                 ; 0000 03D7 ADMUX=0x20;
000964 e2e0      	LDI  R30,LOW(32)
000965 93e0 007c 	STS  124,R30
                 ; 0000 03D8 ADCSRA=0xcf;
000967 ecef      	LDI  R30,LOW(207)
000968 93e0 007a 	STS  122,R30
                 ; 0000 03D9 ADCSRB=ADCSRB||0x00;
00096a 91e0 007b 	LDS  R30,123
00096c 30e0      	CPI  R30,0
00096d f429      	BRNE _0xC0
00096e e0e0      	LDI  R30,LOW(0)
00096f 30e0      	CPI  R30,0
000970 f411      	BRNE _0xC0
000971 e0e0      	LDI  R30,0
000972 c001      	RJMP _0xC1
                 _0xC0:
000973 e0e1      	LDI  R30,1
                 _0xC1:
000974 93e0 007b 	STS  123,R30
                 ; 0000 03DA 
                 ; 0000 03DB // SPI initialization
                 ; 0000 03DC // SPI Type: Master
                 ; 0000 03DD // SPI Clock Rate: 2*115,200 kHz
                 ; 0000 03DE // SPI Clock Phase: Cycle Half
                 ; 0000 03DF // SPI Clock Polarity: Low
                 ; 0000 03E0 // SPI Data Order: MSB First
                 ; 0000 03E1 SPCR=0x53;
000976 e5e3      	LDI  R30,LOW(83)
000977 bdec      	OUT  0x2C,R30
                 ; 0000 03E2 SPSR=0x00;
000978 e0e0      	LDI  R30,LOW(0)
000979 bded      	OUT  0x2D,R30
                 ; 0000 03E3 //SPDR=0x00;
                 ; 0000 03E4 //enable_SPI;
                 ; 0000 03E5 }
00097a 9508      	RET
                 ;
                 ;void update_dynamic_vars()
                 ; 0000 03E8 {
                 _update_dynamic_vars:
                 ; 0000 03E9 float DAC_zero_current, DAC_measured_current, Lower_Range_value, Upper_Range_value,tmp;
                 ; 0000 03EA char i,j=0;
                 ; 0000 03EB long tmp_adc=0;
                 ; 0000 03EC 
                 ; 0000 03ED union DAC_char_to_float
                 ; 0000 03EE         {
                 ; 0000 03EF         float value_float;
                 ; 0000 03F0         char value_char[4];
                 ; 0000 03F1         }DAC_val;
                 ; 0000 03F2 
                 ; 0000 03F3 for (i=0;i<4;i++)
00097b 976c      	SBIW R28,28
00097c e0e0      	LDI  R30,LOW(0)
00097d 83ec      	STD  Y+4,R30
00097e 83ed      	STD  Y+5,R30
00097f 83ee      	STD  Y+6,R30
000980 83ef      	STD  Y+7,R30
000981 931a      	ST   -Y,R17
000982 930a      	ST   -Y,R16
                 ;	DAC_zero_current -> Y+26
                 ;	DAC_measured_current -> Y+22
                 ;	Lower_Range_value -> Y+18
                 ;	Upper_Range_value -> Y+14
                 ;	tmp -> Y+10
                 ;	i -> R17
                 ;	j -> R16
                 ;	tmp_adc -> Y+6
                 ;	DAC_char_to_float -> Y+30
                 ;	DAC_val -> Y+2
000983 e000      	LDI  R16,0
000984 e010      	LDI  R17,LOW(0)
                 _0xC3:
000985 3014      	CPI  R17,4
000986 f4e0      	BRSH _0xC4
                 ; 0000 03F4         {
                 ; 0000 03F5          DAC_val.value_char[i]=Parameter_bank[88+i];
000987 2fe1      	MOV  R30,R17
000988 e0f0      	LDI  R31,0
000989 01bf      	MOVW R22,R30
00098a 01de      	MOVW R26,R28
00098b 9612      	ADIW R26,2
00098c 0fea      	ADD  R30,R26
00098d 1ffb      	ADC  R31,R27
00098e 010f      	MOVW R0,R30
00098f 01fb      	MOVW R30,R22
                +
000990 5ae8     +SUBI R30 , LOW ( - _Parameter_bank - ( 88 ) )
000991 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 88 ) )
                 	__ADDW1MN _Parameter_bank,88
000992 01df      	MOVW R26,R30
000993 940e 0e73 	CALL __EEPROMRDB
000995 01d0      	MOVW R26,R0
000996 93ec      	ST   X,R30
                 ; 0000 03F6          if(i==3)
000997 3013      	CPI  R17,3
000998 f441      	BRNE _0xC5
                 ; 0000 03F7                 {
                 ; 0000 03F8                 Upper_Range_value=DAC_val.value_float;
                +
000999 81ea     +LDD R30 , Y + 2
00099a 81fb     +LDD R31 , Y + 2 + 1
00099b 816c     +LDD R22 , Y + 2 + 2
00099c 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00099d 87ee     +STD Y + 14 , R30
00099e 87ff     +STD Y + 14 + 1 , R31
00099f 8b68     +STD Y + 14 + 2 , R22
0009a0 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
                 ; 0000 03F9                 }
                 ; 0000 03FA         }
                 _0xC5:
0009a1 5f1f      	SUBI R17,-1
0009a2 cfe2      	RJMP _0xC3
                 _0xC4:
                 ; 0000 03FB for (i=0;i<4;i++)
0009a3 e010      	LDI  R17,LOW(0)
                 _0xC7:
0009a4 3014      	CPI  R17,4
0009a5 f4e0      	BRSH _0xC8
                 ; 0000 03FC         {
                 ; 0000 03FD          DAC_val.value_char[i]=Parameter_bank[92+i];
0009a6 2fe1      	MOV  R30,R17
0009a7 e0f0      	LDI  R31,0
0009a8 01bf      	MOVW R22,R30
0009a9 01de      	MOVW R26,R28
0009aa 9612      	ADIW R26,2
0009ab 0fea      	ADD  R30,R26
0009ac 1ffb      	ADC  R31,R27
0009ad 010f      	MOVW R0,R30
0009ae 01fb      	MOVW R30,R22
                +
0009af 5ae4     +SUBI R30 , LOW ( - _Parameter_bank - ( 92 ) )
0009b0 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 92 ) )
                 	__ADDW1MN _Parameter_bank,92
0009b1 01df      	MOVW R26,R30
0009b2 940e 0e73 	CALL __EEPROMRDB
0009b4 01d0      	MOVW R26,R0
0009b5 93ec      	ST   X,R30
                 ; 0000 03FE          if(i==3)
0009b6 3013      	CPI  R17,3
0009b7 f441      	BRNE _0xC9
                 ; 0000 03FF                 {
                 ; 0000 0400                 Lower_Range_value=DAC_val.value_float;
                +
0009b8 81ea     +LDD R30 , Y + 2
0009b9 81fb     +LDD R31 , Y + 2 + 1
0009ba 816c     +LDD R22 , Y + 2 + 2
0009bb 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0009bc 8bea     +STD Y + 18 , R30
0009bd 8bfb     +STD Y + 18 + 1 , R31
0009be 8b6c     +STD Y + 18 + 2 , R22
0009bf 8b7d     +STD Y + 18 + 3 , R23
                 	__PUTD1S 18
                 ; 0000 0401                 }
                 ; 0000 0402         }
                 _0xC9:
0009c0 5f1f      	SUBI R17,-1
0009c1 cfe2      	RJMP _0xC7
                 _0xC8:
                 ; 0000 0403 
                 ; 0000 0404 for (i=0;i<4;i++)
0009c2 e010      	LDI  R17,LOW(0)
                 _0xCB:
0009c3 3014      	CPI  R17,4
0009c4 f4e0      	BRSH _0xCC
                 ; 0000 0405         {
                 ; 0000 0406          DAC_val.value_char[i]=Parameter_bank[105+i];
0009c5 2fe1      	MOV  R30,R17
0009c6 e0f0      	LDI  R31,0
0009c7 01bf      	MOVW R22,R30
0009c8 01de      	MOVW R26,R28
0009c9 9612      	ADIW R26,2
0009ca 0fea      	ADD  R30,R26
0009cb 1ffb      	ADC  R31,R27
0009cc 010f      	MOVW R0,R30
0009cd 01fb      	MOVW R30,R22
                +
0009ce 59e7     +SUBI R30 , LOW ( - _Parameter_bank - ( 105 ) )
0009cf 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 105 ) )
                 	__ADDW1MN _Parameter_bank,105
0009d0 01df      	MOVW R26,R30
0009d1 940e 0e73 	CALL __EEPROMRDB
0009d3 01d0      	MOVW R26,R0
0009d4 93ec      	ST   X,R30
                 ; 0000 0407          if(i==3)
0009d5 3013      	CPI  R17,3
0009d6 f441      	BRNE _0xCD
                 ; 0000 0408                 {
                 ; 0000 0409                 DAC_zero_current=DAC_val.value_float;
                +
0009d7 81ea     +LDD R30 , Y + 2
0009d8 81fb     +LDD R31 , Y + 2 + 1
0009d9 816c     +LDD R22 , Y + 2 + 2
0009da 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0009db 8fea     +STD Y + 26 , R30
0009dc 8ffb     +STD Y + 26 + 1 , R31
0009dd 8f6c     +STD Y + 26 + 2 , R22
0009de 8f7d     +STD Y + 26 + 3 , R23
                 	__PUTD1S 26
                 ; 0000 040A                 }
                 ; 0000 040B         }
                 _0xCD:
0009df 5f1f      	SUBI R17,-1
0009e0 cfe2      	RJMP _0xCB
                 _0xCC:
                 ; 0000 040C for (i=0;i<4;i++)
0009e1 e010      	LDI  R17,LOW(0)
                 _0xCF:
0009e2 3014      	CPI  R17,4
0009e3 f4e0      	BRSH _0xD0
                 ; 0000 040D         {
                 ; 0000 040E          DAC_val.value_char[i]=Parameter_bank[109+i];
0009e4 2fe1      	MOV  R30,R17
0009e5 e0f0      	LDI  R31,0
0009e6 01bf      	MOVW R22,R30
0009e7 01de      	MOVW R26,R28
0009e8 9612      	ADIW R26,2
0009e9 0fea      	ADD  R30,R26
0009ea 1ffb      	ADC  R31,R27
0009eb 010f      	MOVW R0,R30
0009ec 01fb      	MOVW R30,R22
                +
0009ed 59e3     +SUBI R30 , LOW ( - _Parameter_bank - ( 109 ) )
0009ee 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 109 ) )
                 	__ADDW1MN _Parameter_bank,109
0009ef 01df      	MOVW R26,R30
0009f0 940e 0e73 	CALL __EEPROMRDB
0009f2 01d0      	MOVW R26,R0
0009f3 93ec      	ST   X,R30
                 ; 0000 040F          if(i==3)
0009f4 3013      	CPI  R17,3
0009f5 f441      	BRNE _0xD1
                 ; 0000 0410                 {
                 ; 0000 0411                 DAC_measured_current=DAC_val.value_float;
                +
0009f6 81ea     +LDD R30 , Y + 2
0009f7 81fb     +LDD R31 , Y + 2 + 1
0009f8 816c     +LDD R22 , Y + 2 + 2
0009f9 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0009fa 8bee     +STD Y + 22 , R30
0009fb 8bff     +STD Y + 22 + 1 , R31
0009fc 8f68     +STD Y + 22 + 2 , R22
0009fd 8f79     +STD Y + 22 + 3 , R23
                 	__PUTD1S 22
                 ; 0000 0412                 }
                 ; 0000 0413         }
                 _0xD1:
0009fe 5f1f      	SUBI R17,-1
0009ff cfe2      	RJMP _0xCF
                 _0xD0:
                 ; 0000 0414 //коэффициент преобразования кода ЦАП в ток, равен отношению приращения тока к приращению битового кода АЦП
                 ; 0000 0415 if(adc_data<=0)tmp_adc=0;
000a00 91a0 0273 	LDS  R26,_adc_data
000a02 91b0 0274 	LDS  R27,_adc_data+1
000a04 9180 0275 	LDS  R24,_adc_data+2
000a06 9190 0276 	LDS  R25,_adc_data+3
000a08 940e 103c 	CALL __CPD02
000a0a f5ec      	BRGE _0x11B
                 ; 0000 0416 //if(adc_data>ADC_PV_calibration_point1)//для калиброванного значения на 4.8 мА
                 ; 0000 0417 //else
                 ; 0000 0418 else
                 ; 0000 0419 {
                 ; 0000 041A //CalculateCalibrationRates();
                 ; 0000 041B tmp_adc=(long)((float)((float)(adc_data)/calibrationK) - (float)calibrationB);
000a0b 91e0 0273 	LDS  R30,_adc_data
000a0d 91f0 0274 	LDS  R31,_adc_data+1
000a0f 9160 0275 	LDS  R22,_adc_data+2
000a11 9170 0276 	LDS  R23,_adc_data+3
000a13 940e 0f06 	CALL __CDF1
000a15 01df      	MOVW R26,R30
000a16 01cb      	MOVW R24,R22
000a17 91e0 0200 	LDS  R30,_calibrationK
000a19 91f0 0201 	LDS  R31,_calibrationK+1
000a1b 9160 0202 	LDS  R22,_calibrationK+2
000a1d 9170 0203 	LDS  R23,_calibrationK+3
000a1f 940e 0fd7 	CALL __DIVF21
000a21 91a0 0204 	LDS  R26,_calibrationB
000a23 91b0 0205 	LDS  R27,_calibrationB+1
000a25 9180 0206 	LDS  R24,_calibrationB+2
000a27 9190 0207 	LDS  R25,_calibrationB+3
000a29 940e 0f39 	CALL __SUBF12
000a2b 940e 0ecf 	CALL __CFD1
                +
000a2d 83ee     +STD Y + 6 , R30
000a2e 83ff     +STD Y + 6 + 1 , R31
000a2f 8768     +STD Y + 6 + 2 , R22
000a30 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 041C //tmp_adc=(long)((float)tmp_adc*1.118);
                 ; 0000 041D if(tmp_adc>0xffc0)tmp_adc=0xffc0;
                +
000a31 81ae     +LDD R26 , Y + 6
000a32 81bf     +LDD R27 , Y + 6 + 1
000a33 8588     +LDD R24 , Y + 6 + 2
000a34 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
000a35 3ca1     +CPI R26 , LOW ( 0xFFC1 )
000a36 efef     +LDI R30 , HIGH ( 0xFFC1 )
000a37 07be     +CPC R27 , R30
000a38 e0e0     +LDI R30 , BYTE3 ( 0xFFC1 )
000a39 078e     +CPC R24 , R30
000a3a e0e0     +LDI R30 , BYTE4 ( 0xFFC1 )
000a3b 079e     +CPC R25 , R30
                 	__CPD2N 0xFFC1
000a3c f044      	BRLT _0xD4
                +
000a3d ece0     +LDI R30 , LOW ( 0xFFC0 )
000a3e efff     +LDI R31 , HIGH ( 0xFFC0 )
000a3f e060     +LDI R22 , BYTE3 ( 0xFFC0 )
000a40 e070     +LDI R23 , BYTE4 ( 0xFFC0 )
                 	__GETD1N 0xFFC0
                +
000a41 83ee     +STD Y + 6 , R30
000a42 83ff     +STD Y + 6 + 1 , R31
000a43 8768     +STD Y + 6 + 2 , R22
000a44 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 041E if(tmp_adc<0x0000)tmp_adc=0x0000;
                 _0xD4:
000a45 85a9      	LDD  R26,Y+9
000a46 23aa      	TST  R26
000a47 f42a      	BRPL _0xD5
                 _0x11B:
                +
000a48 e0e0     +LDI R30 , 0
000a49 83ee     +STD Y + 6 , R30
000a4a 83ef     +STD Y + 6 + 1 , R30
000a4b 87e8     +STD Y + 6 + 2 , R30
000a4c 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
                 ; 0000 041F }
                 _0xD5:
                 ; 0000 0420 /*        {
                 ; 0000 0421         tmp_adc=(long)(adc_data-calibration_point1)*((float)(calibration_point2/(calibration_point2-calibration_point1)));//+ADC_PV_calibration_point;
                 ; 0000 0422         DAC_zero_current = 4.8;
                 ; 0000 0423         DAC_data=((long)(tmp_adc*((DAC_measured_current-DAC_zero_current)/16))+(signed int)((DAC_zero_current)/mamps_toDAC_default_ratio));
                 ; 0000 0424         }
                 ; 0000 0425 else
                 ; 0000 0426         {
                 ; 0000 0427          if(adc_data<=ADC_PV_zero_val)adc_data=0;
                 ; 0000 0428          else
                 ; 0000 0429                 {
                 ; 0000 042A                 tmp_adc=(long)(adc_data-ADC_PV_zero_val)*((float)(calibration_point2/(calibration_point2-ADC_PV_zero_val)));
                 ; 0000 042B                 }
                 ; 0000 042C 
                 ; 0000 042D         }
                 ; 0000 042E         */
                 ; 0000 042F DAC_data=((long)(tmp_adc*((DAC_measured_current-DAC_zero_current)/16))+(signed int)((DAC_zero_current)/mamps_toDAC_default_ratio));
                +
000a4d 8daa     +LDD R26 , Y + 26
000a4e 8dbb     +LDD R27 , Y + 26 + 1
000a4f 8d8c     +LDD R24 , Y + 26 + 2
000a50 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
                +
000a51 89ee     +LDD R30 , Y + 22
000a52 89ff     +LDD R31 , Y + 22 + 1
000a53 8d68     +LDD R22 , Y + 22 + 2
000a54 8d79     +LDD R23 , Y + 22 + 3
                 	__GETD1S 22
000a55 940e 0f39 	CALL __SUBF12
000a57 01df      	MOVW R26,R30
000a58 01cb      	MOVW R24,R22
                +
000a59 e0e0     +LDI R30 , LOW ( 0x41800000 )
000a5a e0f0     +LDI R31 , HIGH ( 0x41800000 )
000a5b e860     +LDI R22 , BYTE3 ( 0x41800000 )
000a5c e471     +LDI R23 , BYTE4 ( 0x41800000 )
                 	__GETD1N 0x41800000
000a5d 940e 0fd7 	CALL __DIVF21
                +
000a5f 81ae     +LDD R26 , Y + 6
000a60 81bf     +LDD R27 , Y + 6 + 1
000a61 8588     +LDD R24 , Y + 6 + 2
000a62 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000a63 940e 0e5b 	CALL __CDF2
000a65 940e 0f89 	CALL __MULF12
000a67 940e 0ecf 	CALL __CFD1
000a69 937f      	PUSH R23
000a6a 936f      	PUSH R22
000a6b 93ff      	PUSH R31
000a6c 93ef      	PUSH R30
                +
000a6d 8daa     +LDD R26 , Y + 26
000a6e 8dbb     +LDD R27 , Y + 26 + 1
000a6f 8d8c     +LDD R24 , Y + 26 + 2
000a70 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
                +
000a71 e0e8     +LDI R30 , LOW ( 0x39802008 )
000a72 e2f0     +LDI R31 , HIGH ( 0x39802008 )
000a73 e860     +LDI R22 , BYTE3 ( 0x39802008 )
000a74 e379     +LDI R23 , BYTE4 ( 0x39802008 )
                 	__GETD1N 0x39802008
000a75 940e 0fd7 	CALL __DIVF21
000a77 940e 0ecf 	CALL __CFD1
000a79 2766      	CLR  R22
000a7a 2777      	CLR  R23
000a7b 91af      	POP  R26
000a7c 91bf      	POP  R27
000a7d 918f      	POP  R24
000a7e 919f      	POP  R25
000a7f 940e 0e2f 	CALL __CWD1
000a81 940e 0e0c 	CALL __ADDD12
000a83 93e0 0277 	STS  _DAC_data,R30
000a85 93f0 0278 	STS  _DAC_data+1,R31
000a87 9360 0279 	STS  _DAC_data+2,R22
000a89 9370 027a 	STS  _DAC_data+3,R23
                 ; 0000 0430 if(DAC_data<=DAC_zero_current)DAC_data=DAC_zero_current;
                +
000a8b 8dea     +LDD R30 , Y + 26
000a8c 8dfb     +LDD R31 , Y + 26 + 1
000a8d 8d6c     +LDD R22 , Y + 26 + 2
000a8e 8d7d     +LDD R23 , Y + 26 + 3
                 	__GETD1S 26
000a8f 91a0 0277 	LDS  R26,_DAC_data
000a91 91b0 0278 	LDS  R27,_DAC_data+1
000a93 9180 0279 	LDS  R24,_DAC_data+2
000a95 9190 027a 	LDS  R25,_DAC_data+3
000a97 940e 0e5b 	CALL __CDF2
000a99 940e 101c 	CALL __CMPF12
000a9b f019      	BREQ PC+4
000a9c f010      	BRCS PC+3
000a9d 940c 0aa9 	JMP  _0xD6
                +
000a9f 8dea     +LDD R30 , Y + 26
000aa0 8dfb     +LDD R31 , Y + 26 + 1
000aa1 8d6c     +LDD R22 , Y + 26 + 2
000aa2 8d7d     +LDD R23 , Y + 26 + 3
                 	__GETD1S 26
000aa3 e7a7      	LDI  R26,LOW(_DAC_data)
000aa4 e0b2      	LDI  R27,HIGH(_DAC_data)
000aa5 940e 0ecf 	CALL __CFD1
000aa7 940e 0e50 	CALL __PUTDP1
                 ; 0000 0431 dynamic_variables[1]=(float)DAC_data*mamps_toDAC_default_ratio;//adc_data*mamps_toDAC_default_ratio;//current, mA - ток
                 _0xD6:
000aa9 91e0 0277 	LDS  R30,_DAC_data
000aab 91f0 0278 	LDS  R31,_DAC_data+1
000aad 9160 0279 	LDS  R22,_DAC_data+2
000aaf 9170 027a 	LDS  R23,_DAC_data+3
000ab1 940e 0f06 	CALL __CDF1
                +
000ab3 e0a8     +LDI R26 , LOW ( 0x39802008 )
000ab4 e2b0     +LDI R27 , HIGH ( 0x39802008 )
000ab5 e880     +LDI R24 , BYTE3 ( 0x39802008 )
000ab6 e399     +LDI R25 , BYTE4 ( 0x39802008 )
                 	__GETD2N 0x39802008
000ab7 940e 0f89 	CALL __MULF12
                +
000ab9 93e0 0265+STS _dynamic_variables + 4 , R30
000abb 93f0 0266+STS _dynamic_variables + 4 + 1 , R31
000abd 9360 0267+STS _dynamic_variables + 4 + 2 , R22
000abf 9370 0268+STS _dynamic_variables + 4 + 3 , R23
                 	__PUTD1MN _dynamic_variables,4
                 ; 0000 0432 dynamic_variables[2]=(float)(100*(dynamic_variables[1]-DAC_zero_current)/(DAC_measured_current-DAC_zero_current));
                +
000ac1 91e0 0265+LDS R30 , _dynamic_variables + 4
000ac3 91f0 0266+LDS R31 , _dynamic_variables + 4 + 1
000ac5 9160 0267+LDS R22 , _dynamic_variables + 4 + 2
000ac7 9170 0268+LDS R23 , _dynamic_variables + 4 + 3
                 	__GETD1MN _dynamic_variables,4
                +
000ac9 8daa     +LDD R26 , Y + 26
000aca 8dbb     +LDD R27 , Y + 26 + 1
000acb 8d8c     +LDD R24 , Y + 26 + 2
000acc 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
000acd 940e 0f39 	CALL __SUBF12
                +
000acf e0a0     +LDI R26 , LOW ( 0x42C80000 )
000ad0 e0b0     +LDI R27 , HIGH ( 0x42C80000 )
000ad1 ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
000ad2 e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
000ad3 940e 0f89 	CALL __MULF12
000ad5 937f      	PUSH R23
000ad6 936f      	PUSH R22
000ad7 93ff      	PUSH R31
000ad8 93ef      	PUSH R30
                +
000ad9 8daa     +LDD R26 , Y + 26
000ada 8dbb     +LDD R27 , Y + 26 + 1
000adb 8d8c     +LDD R24 , Y + 26 + 2
000adc 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
                +
000add 89ee     +LDD R30 , Y + 22
000ade 89ff     +LDD R31 , Y + 22 + 1
000adf 8d68     +LDD R22 , Y + 22 + 2
000ae0 8d79     +LDD R23 , Y + 22 + 3
                 	__GETD1S 22
000ae1 940e 0f39 	CALL __SUBF12
000ae3 91af      	POP  R26
000ae4 91bf      	POP  R27
000ae5 918f      	POP  R24
000ae6 919f      	POP  R25
000ae7 940e 0fd7 	CALL __DIVF21
                +
000ae9 93e0 0269+STS _dynamic_variables + 8 , R30
000aeb 93f0 026a+STS _dynamic_variables + 8 + 1 , R31
000aed 9360 026b+STS _dynamic_variables + 8 + 2 , R22
000aef 9370 026c+STS _dynamic_variables + 8 + 3 , R23
                 	__PUTD1MN _dynamic_variables,8
                 ; 0000 0433 if((Upper_Range_value-Lower_Range_value)==10)
                +
000af1 89aa     +LDD R26 , Y + 18
000af2 89bb     +LDD R27 , Y + 18 + 1
000af3 898c     +LDD R24 , Y + 18 + 2
000af4 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
                +
000af5 85ee     +LDD R30 , Y + 14
000af6 85ff     +LDD R31 , Y + 14 + 1
000af7 8968     +LDD R22 , Y + 14 + 2
000af8 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000af9 940e 0f39 	CALL __SUBF12
                +
000afb 30e0     +CPI R30 , LOW ( 0x41200000 )
000afc e0a0     +LDI R26 , HIGH ( 0x41200000 )
000afd 07fa     +CPC R31 , R26
000afe e2a0     +LDI R26 , BYTE3 ( 0x41200000 )
000aff 076a     +CPC R22 , R26
000b00 e4a1     +LDI R26 , BYTE4 ( 0x41200000 )
000b01 077a     +CPC R23 , R26
                 	__CPD1N 0x41200000
000b02 f419      	BRNE _0xD7
                 ; 0000 0434     {
                 ; 0000 0435     setlevel_0_10;
000b03 985f      	CBI  0xB,7
000b04 985e      	CBI  0xB,6
                 ; 0000 0436     rangeIndex = 0;
000b05 24aa      	CLR  R10
                 ; 0000 0437     }
                 ; 0000 0438 if((Upper_Range_value-Lower_Range_value)==20)
                 _0xD7:
                +
000b06 89aa     +LDD R26 , Y + 18
000b07 89bb     +LDD R27 , Y + 18 + 1
000b08 898c     +LDD R24 , Y + 18 + 2
000b09 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
                +
000b0a 85ee     +LDD R30 , Y + 14
000b0b 85ff     +LDD R31 , Y + 14 + 1
000b0c 8968     +LDD R22 , Y + 14 + 2
000b0d 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000b0e 940e 0f39 	CALL __SUBF12
                +
000b10 30e0     +CPI R30 , LOW ( 0x41A00000 )
000b11 e0a0     +LDI R26 , HIGH ( 0x41A00000 )
000b12 07fa     +CPC R31 , R26
000b13 eaa0     +LDI R26 , BYTE3 ( 0x41A00000 )
000b14 076a     +CPC R22 , R26
000b15 e4a1     +LDI R26 , BYTE4 ( 0x41A00000 )
000b16 077a     +CPC R23 , R26
                 	__CPD1N 0x41A00000
000b17 f421      	BRNE _0xDC
                 ; 0000 0439     {
                 ; 0000 043A     setlevel_0_20;
000b18 985f      	CBI  0xB,7
000b19 9a5e      	SBI  0xB,6
                 ; 0000 043B     rangeIndex = 1;
000b1a e0e1      	LDI  R30,LOW(1)
000b1b 2eae      	MOV  R10,R30
                 ; 0000 043C     }
                 ; 0000 043D if((Upper_Range_value-Lower_Range_value)==30)
                 _0xDC:
                +
000b1c 89aa     +LDD R26 , Y + 18
000b1d 89bb     +LDD R27 , Y + 18 + 1
000b1e 898c     +LDD R24 , Y + 18 + 2
000b1f 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
                +
000b20 85ee     +LDD R30 , Y + 14
000b21 85ff     +LDD R31 , Y + 14 + 1
000b22 8968     +LDD R22 , Y + 14 + 2
000b23 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000b24 940e 0f39 	CALL __SUBF12
                +
000b26 30e0     +CPI R30 , LOW ( 0x41F00000 )
000b27 e0a0     +LDI R26 , HIGH ( 0x41F00000 )
000b28 07fa     +CPC R31 , R26
000b29 efa0     +LDI R26 , BYTE3 ( 0x41F00000 )
000b2a 076a     +CPC R22 , R26
000b2b e4a1     +LDI R26 , BYTE4 ( 0x41F00000 )
000b2c 077a     +CPC R23 , R26
                 	__CPD1N 0x41F00000
000b2d f421      	BRNE _0xE1
                 ; 0000 043E     {
                 ; 0000 043F     setlevel_0_30;
000b2e 9a5f      	SBI  0xB,7
000b2f 985e      	CBI  0xB,6
                 ; 0000 0440     rangeIndex = 2;
000b30 e0e2      	LDI  R30,LOW(2)
000b31 2eae      	MOV  R10,R30
                 ; 0000 0441     }
                 ; 0000 0442 if((Upper_Range_value-Lower_Range_value)==50)
                 _0xE1:
                +
000b32 89aa     +LDD R26 , Y + 18
000b33 89bb     +LDD R27 , Y + 18 + 1
000b34 898c     +LDD R24 , Y + 18 + 2
000b35 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
                +
000b36 85ee     +LDD R30 , Y + 14
000b37 85ff     +LDD R31 , Y + 14 + 1
000b38 8968     +LDD R22 , Y + 14 + 2
000b39 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000b3a 940e 0f39 	CALL __SUBF12
                +
000b3c 30e0     +CPI R30 , LOW ( 0x42480000 )
000b3d e0a0     +LDI R26 , HIGH ( 0x42480000 )
000b3e 07fa     +CPC R31 , R26
000b3f e4a8     +LDI R26 , BYTE3 ( 0x42480000 )
000b40 076a     +CPC R22 , R26
000b41 e4a2     +LDI R26 , BYTE4 ( 0x42480000 )
000b42 077a     +CPC R23 , R26
                 	__CPD1N 0x42480000
000b43 f421      	BRNE _0xE6
                 ; 0000 0443     {
                 ; 0000 0444     setlevel_0_50;
000b44 9a5f      	SBI  0xB,7
000b45 9a5e      	SBI  0xB,6
                 ; 0000 0445     rangeIndex = 3;
000b46 e0e3      	LDI  R30,LOW(3)
000b47 2eae      	MOV  R10,R30
                 ; 0000 0446     }
                 ; 0000 0447 if(rangeIndexEep!=rangeIndex)
                 _0xE6:
000b48 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000b49 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000b4a 940e 0e73 	CALL __EEPROMRDB
000b4c 16ae      	CP   R10,R30
000b4d f149      	BREQ _0xEB
                 ; 0000 0448         {
                 ; 0000 0449          //CalculateCalibrationRates();
                 ; 0000 044A         calibrationB=calibrationBeep[rangeIndex];
000b4e 2dea      	MOV  R30,R10
000b4f e3a6      	LDI  R26,LOW(_calibrationBeep)
000b50 e0b1      	LDI  R27,HIGH(_calibrationBeep)
000b51 e0f0      	LDI  R31,0
000b52 940e 0e25 	CALL __LSLW2
000b54 0fae      	ADD  R26,R30
000b55 1fbf      	ADC  R27,R31
000b56 940e 0e6b 	CALL __EEPROMRDD
000b58 93e0 0204 	STS  _calibrationB,R30
000b5a 93f0 0205 	STS  _calibrationB+1,R31
000b5c 9360 0206 	STS  _calibrationB+2,R22
000b5e 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 044B         calibrationK=calibrationKeep[rangeIndex];
000b60 2dea      	MOV  R30,R10
000b61 e2a6      	LDI  R26,LOW(_calibrationKeep)
000b62 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000b63 e0f0      	LDI  R31,0
000b64 940e 0e25 	CALL __LSLW2
000b66 0fae      	ADD  R26,R30
000b67 1fbf      	ADC  R27,R31
000b68 940e 0e6b 	CALL __EEPROMRDD
000b6a 93e0 0200 	STS  _calibrationK,R30
000b6c 93f0 0201 	STS  _calibrationK+1,R31
000b6e 9360 0202 	STS  _calibrationK+2,R22
000b70 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 044C         rangeIndexEep=rangeIndex;
000b72 2dea      	MOV  R30,R10
000b73 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000b74 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000b75 940e 0e8f 	CALL __EEPROMWRB
                 ; 0000 044D 
                 ; 0000 044E         }
                 ; 0000 044F dynamic_variables[0]=(float)dynamic_variables[2]*(float)((Upper_Range_value-Lower_Range_value)/100);//100;////primary variable (PV) - виброскорость
                 _0xEB:
                +
000b77 89aa     +LDD R26 , Y + 18
000b78 89bb     +LDD R27 , Y + 18 + 1
000b79 898c     +LDD R24 , Y + 18 + 2
000b7a 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
                +
000b7b 85ee     +LDD R30 , Y + 14
000b7c 85ff     +LDD R31 , Y + 14 + 1
000b7d 8968     +LDD R22 , Y + 14 + 2
000b7e 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000b7f 940e 0f39 	CALL __SUBF12
000b81 01df      	MOVW R26,R30
000b82 01cb      	MOVW R24,R22
                +
000b83 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000b84 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000b85 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000b86 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000b87 940e 0fd7 	CALL __DIVF21
                +
000b89 91a0 0269+LDS R26 , _dynamic_variables + 8
000b8b 91b0 026a+LDS R27 , _dynamic_variables + 8 + 1
000b8d 9180 026b+LDS R24 , _dynamic_variables + 8 + 2
000b8f 9190 026c+LDS R25 , _dynamic_variables + 8 + 3
                 	__GETD2MN _dynamic_variables,8
000b91 940e 0f89 	CALL __MULF12
000b93 93e0 0261 	STS  _dynamic_variables,R30
000b95 93f0 0262 	STS  _dynamic_variables+1,R31
000b97 9360 0263 	STS  _dynamic_variables+2,R22
000b99 9370 0264 	STS  _dynamic_variables+3,R23
                 ; 0000 0450 }
000b9b 8119      	LDD  R17,Y+1
000b9c 8108      	LDD  R16,Y+0
000b9d 966e      	ADIW R28,30
000b9e 9508      	RET
                 ;
                 ;void CalculateCalibrationRates()
                 ; 0000 0453 {
                 _CalculateCalibrationRates:
                 ; 0000 0454 
                 ; 0000 0455 unsigned int calibration_div = 0xf2f7;//0xe4c0;//0xe600;
                 ; 0000 0456 unsigned int calibrationBasic5val = 0x0cc9;
                 ; 0000 0457 //unsigned int calibrationBasic95val = 0xe4c0;
                 ; 0000 0458 //#asm("cli");
                 ; 0000 0459 tmp_calibration =calibration_point2 - calibration_point1;
000b9f 940e 1044 	CALL __SAVELOCR4
                 ;	calibration_div -> R16,R17
                 ;	calibrationBasic5val -> R18,R19
                +
000ba1 ef07     +LDI R16 , LOW ( 62199 )
000ba2 ef12     +LDI R17 , HIGH ( 62199 )
                 	__GETWRN 16,17,62199
                +
000ba3 ec29     +LDI R18 , LOW ( 3273 )
000ba4 e03c     +LDI R19 , HIGH ( 3273 )
                 	__GETWRN 18,19,3273
                +
000ba5 2de7     +MOV R30 , R7
000ba6 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000ba7 19e5      	SUB  R30,R5
000ba8 09f6      	SBC  R31,R6
                +
000ba9 2ebe     +MOV R11 , R30
000baa 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 045A calibrationK = (float)(tmp_calibration/62199.00);//58560.00);//58880.00);
                +
000bab 2deb     +MOV R30 , R11
000bac 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
000bad 2766      	CLR  R22
000bae 2777      	CLR  R23
000baf 940e 0f06 	CALL __CDF1
000bb1 01df      	MOVW R26,R30
000bb2 01cb      	MOVW R24,R22
                +
000bb3 e0e0     +LDI R30 , LOW ( 0x4772F700 )
000bb4 eff7     +LDI R31 , HIGH ( 0x4772F700 )
000bb5 e762     +LDI R22 , BYTE3 ( 0x4772F700 )
000bb6 e477     +LDI R23 , BYTE4 ( 0x4772F700 )
                 	__GETD1N 0x4772F700
000bb7 940e 0fd7 	CALL __DIVF21
000bb9 93e0 0200 	STS  _calibrationK,R30
000bbb 93f0 0201 	STS  _calibrationK+1,R31
000bbd 9360 0202 	STS  _calibrationK+2,R22
000bbf 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 045B calibrationKeep[rangeIndex] =  calibrationK;
000bc1 2dea      	MOV  R30,R10
000bc2 e2a6      	LDI  R26,LOW(_calibrationKeep)
000bc3 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000bc4 e0f0      	LDI  R31,0
000bc5 940e 0e25 	CALL __LSLW2
000bc7 0fae      	ADD  R26,R30
000bc8 1fbf      	ADC  R27,R31
000bc9 91e0 0200 	LDS  R30,_calibrationK
000bcb 91f0 0201 	LDS  R31,_calibrationK+1
000bcd 9160 0202 	LDS  R22,_calibrationK+2
000bcf 9170 0203 	LDS  R23,_calibrationK+3
000bd1 940e 0e7f 	CALL __EEPROMWRD
                 ; 0000 045C //calibrK = ((tmp_calibration*1000/calibration_div)) ;
                 ; 0000 045D calibrationB = (float)((float)calibration_point1-(float)(calibrationK*calibrationBasic5val)) ;
                +
000bd3 2de5     +MOV R30 , R5
000bd4 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000bd5 940e 0e2f 	CALL __CWD1
000bd7 940e 0f06 	CALL __CDF1
000bd9 937f      	PUSH R23
000bda 936f      	PUSH R22
000bdb 93ff      	PUSH R31
000bdc 93ef      	PUSH R30
000bdd 01f9      	MOVW R30,R18
000bde 91a0 0200 	LDS  R26,_calibrationK
000be0 91b0 0201 	LDS  R27,_calibrationK+1
000be2 9180 0202 	LDS  R24,_calibrationK+2
000be4 9190 0203 	LDS  R25,_calibrationK+3
000be6 2766      	CLR  R22
000be7 2777      	CLR  R23
000be8 940e 0f06 	CALL __CDF1
000bea 940e 0f89 	CALL __MULF12
000bec 91af      	POP  R26
000bed 91bf      	POP  R27
000bee 918f      	POP  R24
000bef 919f      	POP  R25
000bf0 940e 0e5e 	CALL __SWAPD12
000bf2 940e 0f39 	CALL __SUBF12
000bf4 93e0 0204 	STS  _calibrationB,R30
000bf6 93f0 0205 	STS  _calibrationB+1,R31
000bf8 9360 0206 	STS  _calibrationB+2,R22
000bfa 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 045E calibrationBeep[rangeIndex] = calibrationB;
000bfc 2dea      	MOV  R30,R10
000bfd e3a6      	LDI  R26,LOW(_calibrationBeep)
000bfe e0b1      	LDI  R27,HIGH(_calibrationBeep)
000bff e0f0      	LDI  R31,0
000c00 940e 0e25 	CALL __LSLW2
000c02 0fae      	ADD  R26,R30
000c03 1fbf      	ADC  R27,R31
000c04 91e0 0204 	LDS  R30,_calibrationB
000c06 91f0 0205 	LDS  R31,_calibrationB+1
000c08 9160 0206 	LDS  R22,_calibrationB+2
000c0a 9170 0207 	LDS  R23,_calibrationB+3
000c0c 940e 0e7f 	CALL __EEPROMWRD
                 ; 0000 045F //#asm("sei");
                 ; 0000 0460 }
000c0e 940e 104b 	CALL __LOADLOCR4
000c10 9624      	ADIW R28,4
000c11 9508      	RET
                 ;
                 ;
                 ;void ResetDeviceSettings(char notreset)
                 ; 0000 0464 {
                 _ResetDeviceSettings:
                 ; 0000 0465 int i=0;
                 ; 0000 0466 for(i =0; i<139;i++)
000c12 931a      	ST   -Y,R17
000c13 930a      	ST   -Y,R16
                 ;	notreset -> Y+2
                 ;	i -> R16,R17
                +
000c14 e000     +LDI R16 , LOW ( 0 )
000c15 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000c16 e000     +LDI R16 , LOW ( 0 )
000c17 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xED:
                +
000c18 380b     +CPI R16 , LOW ( 139 )
000c19 e0e0     +LDI R30 , HIGH ( 139 )
000c1a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,139
000c1b f4c4      	BRGE _0xEE
                 ; 0000 0467         {
                 ; 0000 0468         if (i==98)i=100;
000c1c e6e2      	LDI  R30,LOW(98)
000c1d e0f0      	LDI  R31,HIGH(98)
000c1e 17e0      	CP   R30,R16
000c1f 07f1      	CPC  R31,R17
000c20 f419      	BRNE _0xEF
                +
000c21 e604     +LDI R16 , LOW ( 100 )
000c22 e010     +LDI R17 , HIGH ( 100 )
                 	__GETWRN 16,17,100
                 ; 0000 0469         else Parameter_bank[i]=Parameter_defaults[i];
000c23 c00d      	RJMP _0xF0
                 _0xEF:
000c24 01f8      	MOVW R30,R16
000c25 50e0      	SUBI R30,LOW(-_Parameter_bank)
000c26 40f0      	SBCI R31,HIGH(-_Parameter_bank)
000c27 010f      	MOVW R0,R30
000c28 e8aa      	LDI  R26,LOW(_Parameter_defaults)
000c29 e0b0      	LDI  R27,HIGH(_Parameter_defaults)
000c2a 0fa0      	ADD  R26,R16
000c2b 1fb1      	ADC  R27,R17
000c2c 940e 0e73 	CALL __EEPROMRDB
000c2e 01d0      	MOVW R26,R0
000c2f 940e 0e8f 	CALL __EEPROMWRB
                 ; 0000 046A         }
                 _0xF0:
                +
000c31 5f0f     +SUBI R16 , LOW ( - 1 )
000c32 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c33 cfe4      	RJMP _0xED
                 _0xEE:
                 ; 0000 046B         for (i=0; i<4; i++)
                +
000c34 e000     +LDI R16 , LOW ( 0 )
000c35 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF2:
                +
000c36 3004     +CPI R16 , LOW ( 4 )
000c37 e0e0     +LDI R30 , HIGH ( 4 )
000c38 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000c39 f59c      	BRGE _0xF3
                 ; 0000 046C         {
                 ; 0000 046D         calibrationBeep[i]=0;
000c3a 01f8      	MOVW R30,R16
000c3b e3a6      	LDI  R26,LOW(_calibrationBeep)
000c3c e0b1      	LDI  R27,HIGH(_calibrationBeep)
000c3d 940e 0e25 	CALL __LSLW2
000c3f 0fae      	ADD  R26,R30
000c40 1fbf      	ADC  R27,R31
                +
000c41 e0e0     +LDI R30 , LOW ( 0x0 )
000c42 e0f0     +LDI R31 , HIGH ( 0x0 )
000c43 e060     +LDI R22 , BYTE3 ( 0x0 )
000c44 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000c45 940e 0e7f 	CALL __EEPROMWRD
                 ; 0000 046E         calibrationKeep[i]=1;
000c47 01f8      	MOVW R30,R16
000c48 e2a6      	LDI  R26,LOW(_calibrationKeep)
000c49 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000c4a 940e 0e25 	CALL __LSLW2
000c4c 0fae      	ADD  R26,R30
000c4d 1fbf      	ADC  R27,R31
                +
000c4e e0e0     +LDI R30 , LOW ( 0x3F800000 )
000c4f e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000c50 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000c51 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000c52 940e 0e7f 	CALL __EEPROMWRD
                 ; 0000 046F         ADC_PV_calibration_point1[i] = 0x0cc9;//0x0bc0; //0x0cc0;
000c54 01f8      	MOVW R30,R16
000c55 e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000c56 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000c57 0fee      	LSL  R30
000c58 1fff      	ROL  R31
000c59 0fae      	ADD  R26,R30
000c5a 1fbf      	ADC  R27,R31
000c5b ece9      	LDI  R30,LOW(3273)
000c5c e0fc      	LDI  R31,HIGH(3273)
000c5d 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 0470         ADC_PV_calibration_point2[i] = 0xffc0;//0xe4c0; //0xf2c0;
000c5f 01f8      	MOVW R30,R16
000c60 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000c61 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000c62 0fee      	LSL  R30
000c63 1fff      	ROL  R31
000c64 0fae      	ADD  R26,R30
000c65 1fbf      	ADC  R27,R31
000c66 ece0      	LDI  R30,LOW(65472)
000c67 efff      	LDI  R31,HIGH(65472)
000c68 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 0471         }
                +
000c6a 5f0f     +SUBI R16 , LOW ( - 1 )
000c6b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c6c cfc9      	RJMP _0xF2
                 _0xF3:
                 ; 0000 0472         calibrationB=0;
                +
000c6d e0e0     +LDI R30 , LOW ( 0x0 )
000c6e e0f0     +LDI R31 , HIGH ( 0x0 )
000c6f e060     +LDI R22 , BYTE3 ( 0x0 )
000c70 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000c71 93e0 0204 	STS  _calibrationB,R30
000c73 93f0 0205 	STS  _calibrationB+1,R31
000c75 9360 0206 	STS  _calibrationB+2,R22
000c77 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 0473         calibrationK=1;
                +
000c79 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000c7a e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000c7b e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000c7c e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000c7d 93e0 0200 	STS  _calibrationK,R30
000c7f 93f0 0201 	STS  _calibrationK+1,R31
000c81 9360 0202 	STS  _calibrationK+2,R22
000c83 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 0474         calibration_point1=0x0cc9;//0x0bc0;//0x0cc0;
000c85 ece9      	LDI  R30,LOW(3273)
000c86 e0fc      	LDI  R31,HIGH(3273)
                +
000c87 2e5e     +MOV R5 , R30
000c88 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 0475         calibration_point2=0xffc0;//0xe4c0;//0xf2c0;
000c89 ece0      	LDI  R30,LOW(65472)
000c8a efff      	LDI  R31,HIGH(65472)
                +
000c8b 2e7e     +MOV R7 , R30
000c8c 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 0476         rangeIndexEep=1;
000c8d e2a4      	LDI  R26,LOW(_rangeIndexEep)
000c8e e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000c8f e0e1      	LDI  R30,LOW(1)
000c90 940e 0e8f 	CALL __EEPROMWRB
                 ; 0000 0477         rangeIndex=rangeIndexEep;
000c92 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000c93 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000c94 940e 0e73 	CALL __EEPROMRDB
000c96 2eae      	MOV  R10,R30
                 ; 0000 0478         //Upper_Range_value = 20;
                 ; 0000 0479         //Lower_Range_value = 0;
                 ; 0000 047A }
000c97 c0b6      	RJMP _0x2080001
                 ;
                 ;
                 ;void LoadCalibrationSettings(char flag)
                 ; 0000 047E {
                 _LoadCalibrationSettings:
                 ; 0000 047F //#asm("cli");
                 ; 0000 0480 int i=0;
                 ; 0000 0481 if(flag==0x01)
000c98 931a      	ST   -Y,R17
000c99 930a      	ST   -Y,R16
                 ;	flag -> Y+2
                 ;	i -> R16,R17
                +
000c9a e000     +LDI R16 , LOW ( 0 )
000c9b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000c9c 81aa      	LDD  R26,Y+2
000c9d 30a1      	CPI  R26,LOW(0x1)
000c9e f011      	BREQ PC+3
000c9f 940c 0cef 	JMP _0xF4
                 ; 0000 0482         {
                 ; 0000 0483         calibration_point1=ADC_PV_calibration_point1[rangeIndexEep];
000ca1 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000ca2 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000ca3 940e 0e73 	CALL __EEPROMRDB
000ca5 e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000ca6 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000ca7 e0f0      	LDI  R31,0
000ca8 0fee      	LSL  R30
000ca9 1fff      	ROL  R31
000caa 0fae      	ADD  R26,R30
000cab 1fbf      	ADC  R27,R31
000cac 940e 0e6f 	CALL __EEPROMRDW
                +
000cae 2e5e     +MOV R5 , R30
000caf 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 0484         calibration_point2=ADC_PV_calibration_point2[rangeIndexEep];
000cb0 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cb1 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000cb2 940e 0e73 	CALL __EEPROMRDB
000cb4 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000cb5 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000cb6 e0f0      	LDI  R31,0
000cb7 0fee      	LSL  R30
000cb8 1fff      	ROL  R31
000cb9 0fae      	ADD  R26,R30
000cba 1fbf      	ADC  R27,R31
000cbb 940e 0e6f 	CALL __EEPROMRDW
                +
000cbd 2e7e     +MOV R7 , R30
000cbe 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 0485         calibrationB=calibrationBeep[rangeIndexEep];
000cbf e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cc0 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000cc1 940e 0e73 	CALL __EEPROMRDB
000cc3 e3a6      	LDI  R26,LOW(_calibrationBeep)
000cc4 e0b1      	LDI  R27,HIGH(_calibrationBeep)
000cc5 e0f0      	LDI  R31,0
000cc6 940e 0e25 	CALL __LSLW2
000cc8 0fae      	ADD  R26,R30
000cc9 1fbf      	ADC  R27,R31
000cca 940e 0e6b 	CALL __EEPROMRDD
000ccc 93e0 0204 	STS  _calibrationB,R30
000cce 93f0 0205 	STS  _calibrationB+1,R31
000cd0 9360 0206 	STS  _calibrationB+2,R22
000cd2 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 0486         calibrationK=calibrationKeep[rangeIndexEep];
000cd4 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cd5 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000cd6 940e 0e73 	CALL __EEPROMRDB
000cd8 e2a6      	LDI  R26,LOW(_calibrationKeep)
000cd9 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000cda e0f0      	LDI  R31,0
000cdb 940e 0e25 	CALL __LSLW2
000cdd 0fae      	ADD  R26,R30
000cde 1fbf      	ADC  R27,R31
000cdf 940e 0e6b 	CALL __EEPROMRDD
000ce1 93e0 0200 	STS  _calibrationK,R30
000ce3 93f0 0201 	STS  _calibrationK+1,R31
000ce5 9360 0202 	STS  _calibrationK+2,R22
000ce7 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 0487         rangeIndex=rangeIndexEep;
000ce9 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cea e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000ceb 940e 0e73 	CALL __EEPROMRDB
000ced 2eae      	MOV  R10,R30
                 ; 0000 0488         }
                 ; 0000 0489 else
000cee c05f      	RJMP _0xF5
                 _0xF4:
                 ; 0000 048A         {
                 ; 0000 048B         rangeIndexEep = 1;
000cef e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cf0 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000cf1 e0e1      	LDI  R30,LOW(1)
000cf2 940e 0e8f 	CALL __EEPROMWRB
                 ; 0000 048C         rangeIndex = 1;
000cf4 2eae      	MOV  R10,R30
                 ; 0000 048D         for (i=0; i<4; i++)
                +
000cf5 e000     +LDI R16 , LOW ( 0 )
000cf6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF7:
                +
000cf7 3004     +CPI R16 , LOW ( 4 )
000cf8 e0e0     +LDI R30 , HIGH ( 4 )
000cf9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000cfa f59c      	BRGE _0xF8
                 ; 0000 048E             {
                 ; 0000 048F             calibrationBeep[i]=0;
000cfb 01f8      	MOVW R30,R16
000cfc e3a6      	LDI  R26,LOW(_calibrationBeep)
000cfd e0b1      	LDI  R27,HIGH(_calibrationBeep)
000cfe 940e 0e25 	CALL __LSLW2
000d00 0fae      	ADD  R26,R30
000d01 1fbf      	ADC  R27,R31
                +
000d02 e0e0     +LDI R30 , LOW ( 0x0 )
000d03 e0f0     +LDI R31 , HIGH ( 0x0 )
000d04 e060     +LDI R22 , BYTE3 ( 0x0 )
000d05 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000d06 940e 0e7f 	CALL __EEPROMWRD
                 ; 0000 0490             calibrationKeep[i]=1;
000d08 01f8      	MOVW R30,R16
000d09 e2a6      	LDI  R26,LOW(_calibrationKeep)
000d0a e0b1      	LDI  R27,HIGH(_calibrationKeep)
000d0b 940e 0e25 	CALL __LSLW2
000d0d 0fae      	ADD  R26,R30
000d0e 1fbf      	ADC  R27,R31
                +
000d0f e0e0     +LDI R30 , LOW ( 0x3F800000 )
000d10 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000d11 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000d12 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000d13 940e 0e7f 	CALL __EEPROMWRD
                 ; 0000 0491             ADC_PV_calibration_point1[i] = 0x0cc9;//0x0bc0; //0x0cc0;
000d15 01f8      	MOVW R30,R16
000d16 e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000d17 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000d18 0fee      	LSL  R30
000d19 1fff      	ROL  R31
000d1a 0fae      	ADD  R26,R30
000d1b 1fbf      	ADC  R27,R31
000d1c ece9      	LDI  R30,LOW(3273)
000d1d e0fc      	LDI  R31,HIGH(3273)
000d1e 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 0492             ADC_PV_calibration_point2[i] = 0xffc0;//0xe4c0; //0xf2c0;
000d20 01f8      	MOVW R30,R16
000d21 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000d22 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000d23 0fee      	LSL  R30
000d24 1fff      	ROL  R31
000d25 0fae      	ADD  R26,R30
000d26 1fbf      	ADC  R27,R31
000d27 ece0      	LDI  R30,LOW(65472)
000d28 efff      	LDI  R31,HIGH(65472)
000d29 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 0493             }
                +
000d2b 5f0f     +SUBI R16 , LOW ( - 1 )
000d2c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000d2d cfc9      	RJMP _0xF7
                 _0xF8:
                 ; 0000 0494         calibrationB=0;
                +
000d2e e0e0     +LDI R30 , LOW ( 0x0 )
000d2f e0f0     +LDI R31 , HIGH ( 0x0 )
000d30 e060     +LDI R22 , BYTE3 ( 0x0 )
000d31 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000d32 93e0 0204 	STS  _calibrationB,R30
000d34 93f0 0205 	STS  _calibrationB+1,R31
000d36 9360 0206 	STS  _calibrationB+2,R22
000d38 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 0495         calibrationK=1;
                +
000d3a e0e0     +LDI R30 , LOW ( 0x3F800000 )
000d3b e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000d3c e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000d3d e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000d3e 93e0 0200 	STS  _calibrationK,R30
000d40 93f0 0201 	STS  _calibrationK+1,R31
000d42 9360 0202 	STS  _calibrationK+2,R22
000d44 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 0496         calibration_point1=0x0cc9;//0x0bc0;//0x0cc0;
000d46 ece9      	LDI  R30,LOW(3273)
000d47 e0fc      	LDI  R31,HIGH(3273)
                +
000d48 2e5e     +MOV R5 , R30
000d49 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 0497         calibration_point2=0xffc0;//0xe4c0;//0xf2c0;
000d4a ece0      	LDI  R30,LOW(65472)
000d4b efff      	LDI  R31,HIGH(65472)
                +
000d4c 2e7e     +MOV R7 , R30
000d4d 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 0498         }
                 _0xF5:
                 ; 0000 0499   //      #asm("sei");
                 ; 0000 049A }
                 _0x2080001:
000d4e 8119      	LDD  R17,Y+1
000d4f 8108      	LDD  R16,Y+0
000d50 9623      	ADIW R28,3
000d51 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 049D {
                 _main:
                 ; 0000 049E // Declare your local variables here
                 ; 0000 049F //размещаем по адресу 0х00200(адрес указывается в словах, поэтому там будет в 2 раза меньше)
                 ; 0000 04A0 
                 ; 0000 04A1 int i,k=0;
                 ; 0000 04A2 int char_val=0x00,data, j = 0;
                 ; 0000 04A3 char dataH,dataL,crcok_flag=0;
                 ; 0000 04A4 //flash unsigned int* SERIAL = &serial_number;
                 ; 0000 04A5 crc = 0xffff;
000d52 9727      	SBIW R28,7
000d53 e0e0      	LDI  R30,LOW(0)
000d54 83e8      	ST   Y,R30
000d55 83e9      	STD  Y+1,R30
000d56 83ea      	STD  Y+2,R30
000d57 83eb      	STD  Y+3,R30
000d58 83ec      	STD  Y+4,R30
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	char_val -> R20,R21
                 ;	data -> Y+5
                 ;	j -> Y+3
                 ;	dataH -> Y+2
                 ;	dataL -> Y+1
                 ;	crcok_flag -> Y+0
                +
000d59 e020     +LDI R18 , LOW ( 0 )
000d5a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000d5b e040     +LDI R20 , LOW ( 0 )
000d5c e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000d5d efef      	LDI  R30,LOW(65535)
000d5e efff      	LDI  R31,HIGH(65535)
                +
000d5f 2ede     +MOV R13 , R30
000d60 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 04A6 //serial = 0xabcd;
                 ; 0000 04A7 //#asm
                 ; 0000 04A8 //    .CSEG
                 ; 0000 04A9 //    .org    0x00080
                 ; 0000 04AA //    .DW 0xabcd, 0x0123
                 ; 0000 04AB //    .org    0x00082
                 ; 0000 04AC //    RET
                 ; 0000 04AD //    .org    0x38
                 ; 0000 04AE //    serial1:  .BYTE 1
                 ; 0000 04AF //    .org    0x39
                 ; 0000 04B0 //    serial2:  .BYTE 1
                 ; 0000 04B1 //    .org    0x4a
                 ; 0000 04B2 //    serial3:  .BYTE 1
                 ; 0000 04B3    //.db 0xab, 0xcd , $ef , $77
                 ; 0000 04B4   //   .org    0x00084
                 ; 0000 04B5   //   RET
                 ; 0000 04B6 //
                 ; 0000 04B7    // .CSEG
                 ; 0000 04B8 //#endasm
                 ; 0000 04B9 //long serial = 0xabcdef12;
                 ; 0000 04BA //system_init(0);
                 ; 0000 04BB  #asm("wdr")
000d61 95a8      	wdr
                 ; 0000 04BC while ((data<=65534)|(j<=16382))
                 _0xF9:
000d62 81ad      	LDD  R26,Y+5
000d63 81be      	LDD  R27,Y+5+1
000d64 efee      	LDI  R30,LOW(65534)
000d65 efff      	LDI  R31,HIGH(65534)
000d66 940e 0e44 	CALL __LEW12U
000d68 2e0e      	MOV  R0,R30
000d69 81ab      	LDD  R26,Y+3
000d6a 81bc      	LDD  R27,Y+3+1
000d6b efee      	LDI  R30,LOW(16382)
000d6c e3ff      	LDI  R31,HIGH(16382)
000d6d 940e 0e3e 	CALL __LEW12
000d6f 29e0      	OR   R30,R0
000d70 f0d9      	BREQ _0xFB
                 ; 0000 04BD {
                 ; 0000 04BE     data= read_program_memory (j);
000d71 81eb      	LDD  R30,Y+3
000d72 81fc      	LDD  R31,Y+3+1
000d73 93fa      	ST   -Y,R31
000d74 93ea      	ST   -Y,R30
000d75 940e 034b 	CALL _read_program_memory
000d77 83ed      	STD  Y+5,R30
000d78 83fe      	STD  Y+5+1,R31
                 ; 0000 04BF     dataH = (int)data>>8;
000d79 940e 0e2a 	CALL __ASRW8
000d7b 83ea      	STD  Y+2,R30
                 ; 0000 04C0     dataL = data;
000d7c 81ed      	LDD  R30,Y+5
000d7d 83e9      	STD  Y+1,R30
                 ; 0000 04C1     CRC_update(dataH);
000d7e 81ea      	LDD  R30,Y+2
000d7f 93ea      	ST   -Y,R30
000d80 940e 0351 	CALL _CRC_update
                 ; 0000 04C2     CRC_update(dataL);
000d82 81e9      	LDD  R30,Y+1
000d83 93ea      	ST   -Y,R30
000d84 940e 0351 	CALL _CRC_update
                 ; 0000 04C3     //crc_rtu(data);
                 ; 0000 04C4     //j++;
                 ; 0000 04C5     j=j+2;
000d86 81eb      	LDD  R30,Y+3
000d87 81fc      	LDD  R31,Y+3+1
000d88 9632      	ADIW R30,2
000d89 83eb      	STD  Y+3,R30
000d8a 83fc      	STD  Y+3+1,R31
                 ; 0000 04C6 }
000d8b cfd6      	RJMP _0xF9
                 _0xFB:
                 ; 0000 04C7 crceep = crc;
                +
000d8c 2ded     +MOV R30 , R13
000d8d 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
000d8e e4a6      	LDI  R26,LOW(_crceep)
000d8f e0b1      	LDI  R27,HIGH(_crceep)
000d90 940e 0e87 	CALL __EEPROMWRW
                 ; 0000 04C8 //if(crc==crcstatic)system_init(1);
                 ; 0000 04C9 //else system_init(0);
                 ; 0000 04CA  system_init();
000d92 db72      	RCALL _system_init
                 ; 0000 04CB #asm
                 ; 0000 04CC     in   r30,spsr
000d93 b5ed          in   r30,spsr
                 ; 0000 04CD     in   r30,spdr
000d94 b5ee          in   r30,spdr
                 ; 0000 04CE #endasm
                 ; 0000 04CF //serial_address = *serial;
                 ; 0000 04D0 //normal_mode;
                 ; 0000 04D1 #asm("sei")
000d95 9478      	sei
                 ; 0000 04D2 setlevel_0_20;
000d96 985f      	CBI  0xB,7
000d97 9a5e      	SBI  0xB,6
                 ; 0000 04D3 if(crceep==crcstatic)
000d98 e4a6      	LDI  R26,LOW(_crceep)
000d99 e0b1      	LDI  R27,HIGH(_crceep)
000d9a 940e 0e6f 	CALL __EEPROMRDW
000d9c 010f      	MOVW R0,R30
000d9d e4a8      	LDI  R26,LOW(_crcstatic)
000d9e e0b1      	LDI  R27,HIGH(_crcstatic)
000d9f 940e 0e6f 	CALL __EEPROMRDW
000da1 15e0      	CP   R30,R0
000da2 05f1      	CPC  R31,R1
000da3 f589      	BRNE _0x100
                 ; 0000 04D4     {
                 ; 0000 04D5 
                 ; 0000 04D6        // Parameter_bank[107]=0x80;
                 ; 0000 04D7 //        Parameter_bank[10]=0xBF;
                 ; 0000 04D8 //        Parameter_bank[11]=0xBC;
                 ; 0000 04D9         LoadCalibrationSettings(CalibrationConfigChanged);
000da4 e2a5      	LDI  R26,LOW(_CalibrationConfigChanged)
000da5 e0b1      	LDI  R27,HIGH(_CalibrationConfigChanged)
000da6 940e 0e73 	CALL __EEPROMRDB
000da8 93ea      	ST   -Y,R30
000da9 deee      	RCALL _LoadCalibrationSettings
                 ; 0000 04DA         CalculateCalibrationRates();
000daa ddf4      	RCALL _CalculateCalibrationRates
                 ; 0000 04DB         transmit_SPI(DAC_data,2);
000dab 91e0 0277 	LDS  R30,_DAC_data
000dad 91f0 0278 	LDS  R31,_DAC_data+1
000daf 93fa      	ST   -Y,R31
000db0 93ea      	ST   -Y,R30
000db1 e0e2      	LDI  R30,LOW(2)
000db2 93ea      	ST   -Y,R30
000db3 940e 0436 	CALL _transmit_SPI
                 ; 0000 04DC         update_dynamic_vars();
000db5 dbc5      	RCALL _update_dynamic_vars
                 ; 0000 04DD         //enable_uart;
                 ; 0000 04DE         RxEn;
000db6 91e0 00c1 	LDS  R30,193
000db8 e0f0      	LDI  R31,0
000db9 7ce0      	ANDI R30,LOW(0xC0)
000dba 70f0      	ANDI R31,HIGH(0xC0)
000dbb 61e0      	ORI  R30,0x10
000dbc 93e0 00c1 	STS  193,R30
                 ; 0000 04DF         //PORTD=0x08;
                 ; 0000 04E0         Recieve;
000dbe 9a5b      	SBI  0xB,3
                 ; 0000 04E1         //disable_eints;
                 ; 0000 04E2         while (1)
                 _0x103:
                 ; 0000 04E3               {
                 ; 0000 04E4                 #asm("wdr")
000dbf 95a8      	wdr
                 ; 0000 04E5                 //delay_ms(20);
                 ; 0000 04E6                 //enable_SPI;
                 ; 0000 04E7 
                 ; 0000 04E8 
                 ; 0000 04E9         //        }
                 ; 0000 04EA         if(message_recieved)
000dc0 9bf4      	SBIS 0x1E,4
000dc1 c002      	RJMP _0x106
                 ; 0000 04EB                 {
                 ; 0000 04EC                  transmit_HART();
000dc2 940e 0472 	CALL _transmit_HART
                 ; 0000 04ED                 }
                 ; 0000 04EE         //else
                 ; 0000 04EF         //        {
                 ; 0000 04F0                 ADCSRA=0xcf;
                 _0x106:
000dc4 ecef      	LDI  R30,LOW(207)
000dc5 93e0 007a 	STS  122,R30
                 ; 0000 04F1                 update_dynamic_vars();
000dc7 dbb3      	RCALL _update_dynamic_vars
                 ; 0000 04F2                 PORTB.2=1;
000dc8 9a2a      	SBI  0x5,2
                 ; 0000 04F3                 transmit_SPI(DAC_data,2);
000dc9 91e0 0277 	LDS  R30,_DAC_data
000dcb 91f0 0278 	LDS  R31,_DAC_data+1
000dcd 93fa      	ST   -Y,R31
000dce 93ea      	ST   -Y,R30
000dcf e0e2      	LDI  R30,LOW(2)
000dd0 93ea      	ST   -Y,R30
000dd1 940e 0436 	CALL _transmit_SPI
                 ; 0000 04F4                 PORTB.2=0;
000dd3 982a      	CBI  0x5,2
                 ; 0000 04F5                // }
                 ; 0000 04F6         }
000dd4 cfea      	RJMP _0x103
                 ; 0000 04F7     }
                 ; 0000 04F8 else
                 _0x100:
                 ; 0000 04F9     {
                 ; 0000 04FA         RxEn;
000dd5 91e0 00c1 	LDS  R30,193
000dd7 e0f0      	LDI  R31,0
000dd8 7ce0      	ANDI R30,LOW(0xC0)
000dd9 70f0      	ANDI R31,HIGH(0xC0)
000dda 61e0      	ORI  R30,0x10
000ddb 93e0 00c1 	STS  193,R30
                 ; 0000 04FB         //PORTD=0x08;
                 ; 0000 04FC         Recieve;
000ddd 9a5b      	SBI  0xB,3
                 ; 0000 04FD //               Parameter_bank[107]=0x60;
                 ; 0000 04FE //               Parameter_bank[10]=(char)crc;
                 ; 0000 04FF //               Parameter_bank[11]=(char)(crc>>8);
                 ; 0000 0500 
                 ; 0000 0501         while (1)
                 _0x10E:
                 ; 0000 0502               {
                 ; 0000 0503               // DAC_zero_current=3.5;
                 ; 0000 0504 
                 ; 0000 0505                 #asm("wdr")
000dde 95a8      	wdr
                 ; 0000 0506                 if(message_recieved)
000ddf 9bf4      	SBIS 0x1E,4
000de0 c002      	RJMP _0x111
                 ; 0000 0507                 {
                 ; 0000 0508                  transmit_HART();
000de1 940e 0472 	CALL _transmit_HART
                 ; 0000 0509                 }
                 ; 0000 050A                 ADCSRA=0x0f;
                 _0x111:
000de3 e0ef      	LDI  R30,LOW(15)
000de4 93e0 007a 	STS  122,R30
                 ; 0000 050B                 adc_data=0;
                +
000de6 e0e0     +LDI R30 , LOW ( 0x0 )
000de7 e0f0     +LDI R31 , HIGH ( 0x0 )
000de8 e060     +LDI R22 , BYTE3 ( 0x0 )
000de9 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000dea 93e0 0273 	STS  _adc_data,R30
000dec 93f0 0274 	STS  _adc_data+1,R31
000dee 9360 0275 	STS  _adc_data+2,R22
000df0 9370 0276 	STS  _adc_data+3,R23
                 ; 0000 050C                 update_dynamic_vars();
000df2 db88      	RCALL _update_dynamic_vars
                 ; 0000 050D                 PORTB.2=1;
000df3 9a2a      	SBI  0x5,2
                 ; 0000 050E                 transmit_SPI(DAC_data,2);
000df4 91e0 0277 	LDS  R30,_DAC_data
000df6 91f0 0278 	LDS  R31,_DAC_data+1
000df8 93fa      	ST   -Y,R31
000df9 93ea      	ST   -Y,R30
000dfa e0e2      	LDI  R30,LOW(2)
000dfb 93ea      	ST   -Y,R30
000dfc 940e 0436 	CALL _transmit_SPI
                 ; 0000 050F                 PORTB.2=0;
000dfe 982a      	CBI  0x5,2
                 ; 0000 0510 
                 ; 0000 0511         }
000dff cfde      	RJMP _0x10E
                 ; 0000 0512     }
                 ; 0000 0513 }
                 _0x116:
000e00 cfff      	RJMP _0x116
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _Parameter_bank:
000000 00
000001 56
000002 b3
000003 04        	.DB  LOW(0x4B35600),HIGH(0x4B35600),BYTE3(0x4B35600),BYTE4(0x4B35600)
000004 01
000005 01
000006 01
000007 21        	.DB  LOW(0x21010101),HIGH(0x21010101),BYTE3(0x21010101),BYTE4(0x21010101)
000008 00
000009 00
00000a bf
00000b bc        	.DB  LOW(0xBCBF0000),HIGH(0xBCBF0000),BYTE3(0xBCBF0000),BYTE4(0xBCBF0000)
00000c 6d
00000d 00
00000e 00
00000f 00        	.DB  LOW(0x6D),HIGH(0x6D),BYTE3(0x6D),BYTE4(0x6D)
000010 00
000011 00
000012 00
000013 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000014 00
000015 00
000016 00
000017 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000018 00
000019 02
00001a 00
00001b 00        	.DB  LOW(0x200),HIGH(0x200),BYTE3(0x200),BYTE4(0x200)
00001c 00
00001d 00
00001e 00
00001f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000020 00
000021 00
000022 00
000023 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000024 00
000025 00
000026 00
000027 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000028 00
000029 00
00002a 00
00002b 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00002c 00
00002d 00
00002e 00
00002f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000030 00
000031 00
000032 00
000033 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000034 00
000035 00
000036 00
000037 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000038 00
000039 00
00003a 00
00003b 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00003c 00
00003d 00
00003e 00
00003f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000040 00
000041 00
000042 00
000043 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000044 00
000045 00
000046 00
000047 01        	.DB  LOW(0x1000000),HIGH(0x1000000),BYTE3(0x1000000),BYTE4(0x1000000)
000048 02
000049 03
00004a 42
00004b 48        	.DB  LOW(0x48420302),HIGH(0x48420302),BYTE3(0x48420302),BYTE4(0x48420302)
00004c 00
00004d 00
00004e 00
00004f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000050 00
000051 00
000052 3c
000053 23        	.DB  LOW(0x233C0000),HIGH(0x233C0000),BYTE3(0x233C0000),BYTE4(0x233C0000)
000054 d7
000055 0a
000056 00
000057 00        	.DB  LOW(0xAD7),HIGH(0xAD7),BYTE3(0xAD7),BYTE4(0xAD7)
000058 00
000059 00
00005a a0
00005b 41        	.DB  LOW(0x41A00000),HIGH(0x41A00000),BYTE3(0x41A00000),BYTE4(0x41A00000)
00005c 00
00005d 00
00005e 00
00005f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000060 f0
000061 0f
000062 05
000063 00        	.DB  LOW(0x50FF0),HIGH(0x50FF0),BYTE3(0x50FF0),BYTE4(0x50FF0)
000064 01
000065 00
000066 00
000067 00        	.DB  LOW(0x1),HIGH(0x1),BYTE3(0x1),BYTE4(0x1)
000068 00
000069 00
00006a 00
00006b 80        	.DB  LOW(0x80000000),HIGH(0x80000000),BYTE3(0x80000000),BYTE4(0x80000000)
00006c 40
00006d 00
00006e 00
00006f a0        	.DB  LOW(0xA0000040),HIGH(0xA0000040),BYTE3(0xA0000040),BYTE4(0xA0000040)
000070 41
000071 00
000072 00
000073 00        	.DB  LOW(0x41),HIGH(0x41),BYTE3(0x41),BYTE4(0x41)
000074 00
000075 00
000076 00
000077 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000078 00
000079 00
00007a 00
00007b 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00007c 00
00007d 00
00007e 00
00007f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000080 00
000081 00
000082 00
000083 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000084 00
000085 00
000086 00
000087 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000088 00 00     	.DW  0x0
                 _Parameter_defaults:
00008a 00
00008b 56
00008c b3
00008d 04        	.DB  LOW(0x4B35600),HIGH(0x4B35600),BYTE3(0x4B35600),BYTE4(0x4B35600)
00008e 01
00008f 01
000090 01
000091 21        	.DB  LOW(0x21010101),HIGH(0x21010101),BYTE3(0x21010101),BYTE4(0x21010101)
000092 00
000093 00
000094 bf
000095 bc        	.DB  LOW(0xBCBF0000),HIGH(0xBCBF0000),BYTE3(0xBCBF0000),BYTE4(0xBCBF0000)
000096 6d
000097 00
000098 00
000099 00        	.DB  LOW(0x6D),HIGH(0x6D),BYTE3(0x6D),BYTE4(0x6D)
00009a 00
00009b 00
00009c 00
00009d 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00009e 00
00009f 00
0000a0 00
0000a1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000a2 00
0000a3 02
0000a4 00
0000a5 00        	.DB  LOW(0x200),HIGH(0x200),BYTE3(0x200),BYTE4(0x200)
0000a6 00
0000a7 00
0000a8 00
0000a9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000aa 00
0000ab 00
0000ac 00
0000ad 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ae 00
0000af 00
0000b0 00
0000b1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000b2 00
0000b3 00
0000b4 00
0000b5 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000b6 00
0000b7 00
0000b8 00
0000b9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ba 00
0000bb 00
0000bc 00
0000bd 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000be 00
0000bf 00
0000c0 00
0000c1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000c2 00
0000c3 00
0000c4 00
0000c5 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000c6 00
0000c7 00
0000c8 00
0000c9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ca 00
0000cb 00
0000cc 00
0000cd 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ce 00
0000cf 00
0000d0 00
0000d1 01        	.DB  LOW(0x1000000),HIGH(0x1000000),BYTE3(0x1000000),BYTE4(0x1000000)
0000d2 02
0000d3 03
0000d4 42
0000d5 48        	.DB  LOW(0x48420302),HIGH(0x48420302),BYTE3(0x48420302),BYTE4(0x48420302)
0000d6 00
0000d7 00
0000d8 00
0000d9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000da 00
0000db 00
0000dc 3c
0000dd 23        	.DB  LOW(0x233C0000),HIGH(0x233C0000),BYTE3(0x233C0000),BYTE4(0x233C0000)
0000de d7
0000df 0a
0000e0 00
0000e1 00        	.DB  LOW(0xAD7),HIGH(0xAD7),BYTE3(0xAD7),BYTE4(0xAD7)
0000e2 00
0000e3 00
0000e4 a0
0000e5 41        	.DB  LOW(0x41A00000),HIGH(0x41A00000),BYTE3(0x41A00000),BYTE4(0x41A00000)
0000e6 00
0000e7 00
0000e8 00
0000e9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ea f0
0000eb 0f
0000ec 15
0000ed 06        	.DB  LOW(0x6150FF0),HIGH(0x6150FF0),BYTE3(0x6150FF0),BYTE4(0x6150FF0)
0000ee 0b
0000ef 00
0000f0 00
0000f1 00        	.DB  LOW(0xB),HIGH(0xB),BYTE3(0xB),BYTE4(0xB)
0000f2 00
0000f3 00
0000f4 00
0000f5 80        	.DB  LOW(0x80000000),HIGH(0x80000000),BYTE3(0x80000000),BYTE4(0x80000000)
0000f6 40
0000f7 00
0000f8 00
0000f9 a0        	.DB  LOW(0xA0000040),HIGH(0xA0000040),BYTE3(0xA0000040),BYTE4(0xA0000040)
0000fa 41
0000fb 00
0000fc 00
0000fd 00        	.DB  LOW(0x41),HIGH(0x41),BYTE3(0x41),BYTE4(0x41)
0000fe 00
0000ff 00
000100 00
000101 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000102 00
000103 00
000104 00
000105 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000106 00
000107 00
000108 00
000109 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00010a 00
00010b 00
00010c 00
00010d 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00010e 00
00010f 00
000110 00
000111 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000112 00 00     	.DW  0x0
                 _ADC_PV_calibration_point1:
000114           	.BYTE 0x8
                 _ADC_PV_calibration_point2:
00011c           	.BYTE 0x8
                 _rangeIndexEep:
000124           	.BYTE 0x1
                 _CalibrationConfigChanged:
000125           	.BYTE 0x1
                 _calibrationKeep:
000126           	.BYTE 0x10
                 _calibrationBeep:
000136           	.BYTE 0x10
                 _crceep:
000146 00 00     	.DW  0x0
                 _crcstatic:
000148 e3 15     	.DW  0x15E3
                 
                 	.DSEG
                 _calibrationK:
000200           	.BYTE 0x4
                 _calibrationB:
000204           	.BYTE 0x4
                 _rx_buffer0:
000208           	.BYTE 0x40
                 _com_data_rx:
000248           	.BYTE 0x19
                 _dynamic_variables:
000261           	.BYTE 0xC
                 _com_bytes_rx:
00026d           	.BYTE 0x1
                 _update_args_flag:
00026e           	.BYTE 0x1
                 _p_bank_addr:
00026f           	.BYTE 0x1
                 _rx_wr_index0:
000270           	.BYTE 0x1
                 _rx_rd_index0:
000271           	.BYTE 0x1
                 _rx_counter0:
000272           	.BYTE 0x1
                 _adc_data:
000273           	.BYTE 0x4
                 _DAC_data:
000277           	.BYTE 0x4
                 _SPI_tEnd:
00027b           	.BYTE 0x1
                 _checking_result:
00027c           	.BYTE 0x1
                 _preambula_bytes:
00027d           	.BYTE 0x1
                 _preambula_bytes_rec:
00027e           	.BYTE 0x1
                 _bytes_quantity_ans:
00027f           	.BYTE 0x1
                 _command_rx_val:
000280           	.BYTE 0x1
                 _Command_data:
000281           	.BYTE 0x19
                 _tx_buffer0:
00029a           	.BYTE 0x40
                 _tx_rd_index0:
0002da           	.BYTE 0x1
                 _tx_counter0:
0002db           	.BYTE 0x1
                 __seed_G101:
0002dc           	.BYTE 0x4
                 _p_S1030024:
0002e0           	.BYTE 0x2
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000e01 91e9      	ld   r30,y+
000e02 91f9      	ld   r31,y+
000e03 9630      	adiw r30,0
000e04 f031      	breq __delay_ms1
                 __delay_ms0:
                +
000e05 e98a     +LDI R24 , LOW ( 0x9A )
                +__DELAY_USB_LOOP :
000e06 958a     +DEC R24
000e07 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x9A
000e08 95a8      	wdr
000e09 9731      	sbiw r30,1
000e0a f7d1      	brne __delay_ms0
                 __delay_ms1:
000e0b 9508      	ret
                 
                 __ADDD12:
000e0c 0fea      	ADD  R30,R26
000e0d 1ffb      	ADC  R31,R27
000e0e 1f68      	ADC  R22,R24
000e0f 1f79      	ADC  R23,R25
000e10 9508      	RET
                 
                 __ANEGD1:
000e11 95f0      	COM  R31
000e12 9560      	COM  R22
000e13 9570      	COM  R23
000e14 95e1      	NEG  R30
000e15 4fff      	SBCI R31,-1
000e16 4f6f      	SBCI R22,-1
000e17 4f7f      	SBCI R23,-1
000e18 9508      	RET
                 
                 __ASRD12:
000e19 23ee      	TST  R30
000e1a 2e0e      	MOV  R0,R30
000e1b 01fd      	MOVW R30,R26
000e1c 01bc      	MOVW R22,R24
000e1d f031      	BREQ __ASRD12R
                 __ASRD12L:
000e1e 9575      	ASR  R23
000e1f 9567      	ROR  R22
000e20 95f7      	ROR  R31
000e21 95e7      	ROR  R30
000e22 940a      	DEC  R0
000e23 f7d1      	BRNE __ASRD12L
                 __ASRD12R:
000e24 9508      	RET
                 
                 __LSLW2:
000e25 0fee      	LSL  R30
000e26 1fff      	ROL  R31
000e27 0fee      	LSL  R30
000e28 1fff      	ROL  R31
000e29 9508      	RET
                 
                 __ASRW8:
000e2a 2fef      	MOV  R30,R31
000e2b 27ff      	CLR  R31
000e2c fde7      	SBRC R30,7
000e2d efff      	SER  R31
000e2e 9508      	RET
                 
                 __CWD1:
000e2f 2f6f      	MOV  R22,R31
000e30 0f66      	ADD  R22,R22
000e31 0b66      	SBC  R22,R22
000e32 2f76      	MOV  R23,R22
000e33 9508      	RET
                 
                 __LTB12U:
000e34 17ae      	CP   R26,R30
000e35 e0e1      	LDI  R30,1
000e36 f008      	BRLO __LTB12U1
000e37 27ee      	CLR  R30
                 __LTB12U1:
000e38 9508      	RET
                 
                 __GTB12U:
000e39 17ea      	CP   R30,R26
000e3a e0e1      	LDI  R30,1
000e3b f008      	BRLO __GTB12U1
000e3c 27ee      	CLR  R30
                 __GTB12U1:
000e3d 9508      	RET
                 
                 __LEW12:
000e3e 17ea      	CP   R30,R26
000e3f 07fb      	CPC  R31,R27
000e40 e0e1      	LDI  R30,1
000e41 f40c      	BRGE __LEW12T
000e42 27ee      	CLR  R30
                 __LEW12T:
000e43 9508      	RET
                 
                 __LEW12U:
000e44 17ea      	CP   R30,R26
000e45 07fb      	CPC  R31,R27
000e46 e0e1      	LDI  R30,1
000e47 f408      	BRSH __LEW12UT
000e48 27ee      	CLR  R30
                 __LEW12UT:
000e49 9508      	RET
                 
                 __GETD1P:
000e4a 91ed      	LD   R30,X+
000e4b 91fd      	LD   R31,X+
000e4c 916d      	LD   R22,X+
000e4d 917c      	LD   R23,X
000e4e 9713      	SBIW R26,3
000e4f 9508      	RET
                 
                 __PUTDP1:
000e50 93ed      	ST   X+,R30
000e51 93fd      	ST   X+,R31
000e52 936d      	ST   X+,R22
000e53 937c      	ST   X,R23
000e54 9508      	RET
                 
                 __GETW1PF:
000e55 9005      	LPM  R0,Z+
000e56 91f4      	LPM  R31,Z
000e57 2de0      	MOV  R30,R0
000e58 9508      	RET
                 
                 __CDF2U:
000e59 9468      	SET
000e5a c001      	RJMP __CDF2U0
                 __CDF2:
000e5b 94e8      	CLT
                 __CDF2U0:
000e5c d001      	RCALL __SWAPD12
000e5d d0a9      	RCALL __CDF1U0
                 
                 __SWAPD12:
000e5e 2e18      	MOV  R1,R24
000e5f 2f86      	MOV  R24,R22
000e60 2d61      	MOV  R22,R1
000e61 2e19      	MOV  R1,R25
000e62 2f97      	MOV  R25,R23
000e63 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000e64 2e1b      	MOV  R1,R27
000e65 2fbf      	MOV  R27,R31
000e66 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000e67 2e1a      	MOV  R1,R26
000e68 2fae      	MOV  R26,R30
000e69 2de1      	MOV  R30,R1
000e6a 9508      	RET
                 
                 __EEPROMRDD:
000e6b 9612      	ADIW R26,2
000e6c d002      	RCALL __EEPROMRDW
000e6d 01bf      	MOVW R22,R30
000e6e 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
000e6f 9611      	ADIW R26,1
000e70 d002      	RCALL __EEPROMRDB
000e71 2ffe      	MOV  R31,R30
000e72 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000e73 99f9      	SBIC EECR,EEWE
000e74 cffe      	RJMP __EEPROMRDB
000e75 93ff      	PUSH R31
000e76 b7ff      	IN   R31,SREG
000e77 94f8      	CLI
000e78 bda1      	OUT  EEARL,R26
000e79 bdb2      	OUT  EEARH,R27
000e7a 9af8      	SBI  EECR,EERE
000e7b b5e0      	IN   R30,EEDR
000e7c bfff      	OUT  SREG,R31
000e7d 91ff      	POP  R31
000e7e 9508      	RET
                 
                 __EEPROMWRD:
000e7f d007      	RCALL __EEPROMWRW
000e80 9612      	ADIW R26,2
000e81 010f      	MOVW R0,R30
000e82 01fb      	MOVW R30,R22
000e83 d003      	RCALL __EEPROMWRW
000e84 01f0      	MOVW R30,R0
000e85 9712      	SBIW R26,2
000e86 9508      	RET
                 
                 __EEPROMWRW:
000e87 d007      	RCALL __EEPROMWRB
000e88 9611      	ADIW R26,1
000e89 93ef      	PUSH R30
000e8a 2fef      	MOV  R30,R31
000e8b d003      	RCALL __EEPROMWRB
000e8c 91ef      	POP  R30
000e8d 9711      	SBIW R26,1
000e8e 9508      	RET
                 
                 __EEPROMWRB:
000e8f 9bf9      	SBIS EECR,EEWE
000e90 c002      	RJMP __EEPROMWRB1
000e91 95a8      	WDR
000e92 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000e93 b79f      	IN   R25,SREG
000e94 94f8      	CLI
000e95 bda1      	OUT  EEARL,R26
000e96 bdb2      	OUT  EEARH,R27
000e97 9af8      	SBI  EECR,EERE
000e98 b580      	IN   R24,EEDR
000e99 17e8      	CP   R30,R24
000e9a f019      	BREQ __EEPROMWRB0
000e9b bde0      	OUT  EEDR,R30
000e9c 9afa      	SBI  EECR,EEMWE
000e9d 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000e9e bf9f      	OUT  SREG,R25
000e9f 9508      	RET
                 
                 __ROUND_REPACK:
000ea0 2355      	TST  R21
000ea1 f442      	BRPL __REPACK
000ea2 3850      	CPI  R21,0x80
000ea3 f411      	BRNE __ROUND_REPACK0
000ea4 ffe0      	SBRS R30,0
000ea5 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000ea6 9631      	ADIW R30,1
000ea7 1f69      	ADC  R22,R25
000ea8 1f79      	ADC  R23,R25
000ea9 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000eaa e850      	LDI  R21,0x80
000eab 2757      	EOR  R21,R23
000eac f411      	BRNE __REPACK0
000ead 935f      	PUSH R21
000eae c0c8      	RJMP __ZERORES
                 __REPACK0:
000eaf 3f5f      	CPI  R21,0xFF
000eb0 f031      	BREQ __REPACK1
000eb1 0f66      	LSL  R22
000eb2 0c00      	LSL  R0
000eb3 9557      	ROR  R21
000eb4 9567      	ROR  R22
000eb5 2f75      	MOV  R23,R21
000eb6 9508      	RET
                 __REPACK1:
000eb7 935f      	PUSH R21
000eb8 2000      	TST  R0
000eb9 f00a      	BRMI __REPACK2
000eba c0c8      	RJMP __MAXRES
                 __REPACK2:
000ebb c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000ebc e850      	LDI  R21,0x80
000ebd 2e19      	MOV  R1,R25
000ebe 2215      	AND  R1,R21
000ebf 0f88      	LSL  R24
000ec0 1f99      	ROL  R25
000ec1 2795      	EOR  R25,R21
000ec2 0f55      	LSL  R21
000ec3 9587      	ROR  R24
                 
                 __UNPACK1:
000ec4 e850      	LDI  R21,0x80
000ec5 2e07      	MOV  R0,R23
000ec6 2205      	AND  R0,R21
000ec7 0f66      	LSL  R22
000ec8 1f77      	ROL  R23
000ec9 2775      	EOR  R23,R21
000eca 0f55      	LSL  R21
000ecb 9567      	ROR  R22
000ecc 9508      	RET
                 
                 __CFD1U:
000ecd 9468      	SET
000ece c001      	RJMP __CFD1U0
                 __CFD1:
000ecf 94e8      	CLT
                 __CFD1U0:
000ed0 935f      	PUSH R21
000ed1 dff2      	RCALL __UNPACK1
000ed2 3870      	CPI  R23,0x80
000ed3 f018      	BRLO __CFD10
000ed4 3f7f      	CPI  R23,0xFF
000ed5 f408      	BRCC __CFD10
000ed6 c0a0      	RJMP __ZERORES
                 __CFD10:
000ed7 e156      	LDI  R21,22
000ed8 1b57      	SUB  R21,R23
000ed9 f4aa      	BRPL __CFD11
000eda 9551      	NEG  R21
000edb 3058      	CPI  R21,8
000edc f40e      	BRTC __CFD19
000edd 3059      	CPI  R21,9
                 __CFD19:
000ede f030      	BRLO __CFD17
000edf efef      	SER  R30
000ee0 efff      	SER  R31
000ee1 ef6f      	SER  R22
000ee2 e77f      	LDI  R23,0x7F
000ee3 f977      	BLD  R23,7
000ee4 c01a      	RJMP __CFD15
                 __CFD17:
000ee5 2777      	CLR  R23
000ee6 2355      	TST  R21
000ee7 f0b9      	BREQ __CFD15
                 __CFD18:
000ee8 0fee      	LSL  R30
000ee9 1fff      	ROL  R31
000eea 1f66      	ROL  R22
000eeb 1f77      	ROL  R23
000eec 955a      	DEC  R21
000eed f7d1      	BRNE __CFD18
000eee c010      	RJMP __CFD15
                 __CFD11:
000eef 2777      	CLR  R23
                 __CFD12:
000ef0 3058      	CPI  R21,8
000ef1 f028      	BRLO __CFD13
000ef2 2fef      	MOV  R30,R31
000ef3 2ff6      	MOV  R31,R22
000ef4 2f67      	MOV  R22,R23
000ef5 5058      	SUBI R21,8
000ef6 cff9      	RJMP __CFD12
                 __CFD13:
000ef7 2355      	TST  R21
000ef8 f031      	BREQ __CFD15
                 __CFD14:
000ef9 9576      	LSR  R23
000efa 9567      	ROR  R22
000efb 95f7      	ROR  R31
000efc 95e7      	ROR  R30
000efd 955a      	DEC  R21
000efe f7d1      	BRNE __CFD14
                 __CFD15:
000eff 2000      	TST  R0
000f00 f40a      	BRPL __CFD16
000f01 df0f      	RCALL __ANEGD1
                 __CFD16:
000f02 915f      	POP  R21
000f03 9508      	RET
                 
                 __CDF1U:
000f04 9468      	SET
000f05 c001      	RJMP __CDF1U0
                 __CDF1:
000f06 94e8      	CLT
                 __CDF1U0:
000f07 9730      	SBIW R30,0
000f08 4060      	SBCI R22,0
000f09 4070      	SBCI R23,0
000f0a f0b1      	BREQ __CDF10
000f0b 2400      	CLR  R0
000f0c f026      	BRTS __CDF11
000f0d 2377      	TST  R23
000f0e f412      	BRPL __CDF11
000f0f 9400      	COM  R0
000f10 df00      	RCALL __ANEGD1
                 __CDF11:
000f11 2e17      	MOV  R1,R23
000f12 e17e      	LDI  R23,30
000f13 2011      	TST  R1
                 __CDF12:
000f14 f032      	BRMI __CDF13
000f15 957a      	DEC  R23
000f16 0fee      	LSL  R30
000f17 1fff      	ROL  R31
000f18 1f66      	ROL  R22
000f19 1c11      	ROL  R1
000f1a cff9      	RJMP __CDF12
                 __CDF13:
000f1b 2fef      	MOV  R30,R31
000f1c 2ff6      	MOV  R31,R22
000f1d 2d61      	MOV  R22,R1
000f1e 935f      	PUSH R21
000f1f df8a      	RCALL __REPACK
000f20 915f      	POP  R21
                 __CDF10:
000f21 9508      	RET
                 
                 __SWAPACC:
000f22 934f      	PUSH R20
000f23 01af      	MOVW R20,R30
000f24 01fd      	MOVW R30,R26
000f25 01da      	MOVW R26,R20
000f26 01ab      	MOVW R20,R22
000f27 01bc      	MOVW R22,R24
000f28 01ca      	MOVW R24,R20
000f29 2d40      	MOV  R20,R0
000f2a 2c01      	MOV  R0,R1
000f2b 2e14      	MOV  R1,R20
000f2c 914f      	POP  R20
000f2d 9508      	RET
                 
                 __UADD12:
000f2e 0fea      	ADD  R30,R26
000f2f 1ffb      	ADC  R31,R27
000f30 1f68      	ADC  R22,R24
000f31 9508      	RET
                 
                 __NEGMAN1:
000f32 95e0      	COM  R30
000f33 95f0      	COM  R31
000f34 9560      	COM  R22
000f35 5fef      	SUBI R30,-1
000f36 4fff      	SBCI R31,-1
000f37 4f6f      	SBCI R22,-1
000f38 9508      	RET
                 
                 __SUBF12:
000f39 935f      	PUSH R21
000f3a df81      	RCALL __UNPACK
000f3b 3890      	CPI  R25,0x80
000f3c f149      	BREQ __ADDF129
000f3d e850      	LDI  R21,0x80
000f3e 2615      	EOR  R1,R21
                 
                 __ADDF120:
000f3f 3870      	CPI  R23,0x80
000f40 f121      	BREQ __ADDF128
                 __ADDF121:
000f41 2f57      	MOV  R21,R23
000f42 1b59      	SUB  R21,R25
000f43 f113      	BRVS __ADDF129
000f44 f412      	BRPL __ADDF122
000f45 dfdc      	RCALL __SWAPACC
000f46 cffa      	RJMP __ADDF121
                 __ADDF122:
000f47 3158      	CPI  R21,24
000f48 f018      	BRLO __ADDF123
000f49 27aa      	CLR  R26
000f4a 27bb      	CLR  R27
000f4b 2788      	CLR  R24
                 __ADDF123:
000f4c 3058      	CPI  R21,8
000f4d f028      	BRLO __ADDF124
000f4e 2fab      	MOV  R26,R27
000f4f 2fb8      	MOV  R27,R24
000f50 2788      	CLR  R24
000f51 5058      	SUBI R21,8
000f52 cff9      	RJMP __ADDF123
                 __ADDF124:
000f53 2355      	TST  R21
000f54 f029      	BREQ __ADDF126
                 __ADDF125:
000f55 9586      	LSR  R24
000f56 95b7      	ROR  R27
000f57 95a7      	ROR  R26
000f58 955a      	DEC  R21
000f59 f7d9      	BRNE __ADDF125
                 __ADDF126:
000f5a 2d50      	MOV  R21,R0
000f5b 2551      	EOR  R21,R1
000f5c f062      	BRMI __ADDF127
000f5d dfd0      	RCALL __UADD12
000f5e f438      	BRCC __ADDF129
000f5f 9567      	ROR  R22
000f60 95f7      	ROR  R31
000f61 95e7      	ROR  R30
000f62 9573      	INC  R23
000f63 f413      	BRVC __ADDF129
000f64 c01e      	RJMP __MAXRES
                 __ADDF128:
000f65 dfbc      	RCALL __SWAPACC
                 __ADDF129:
000f66 df43      	RCALL __REPACK
000f67 915f      	POP  R21
000f68 9508      	RET
                 __ADDF127:
000f69 1bea      	SUB  R30,R26
000f6a 0bfb      	SBC  R31,R27
000f6b 0b68      	SBC  R22,R24
000f6c f051      	BREQ __ZERORES
000f6d f410      	BRCC __ADDF1210
000f6e 9400      	COM  R0
000f6f dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000f70 2366      	TST  R22
000f71 f3a2      	BRMI __ADDF129
000f72 0fee      	LSL  R30
000f73 1fff      	ROL  R31
000f74 1f66      	ROL  R22
000f75 957a      	DEC  R23
000f76 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000f77 27ee      	CLR  R30
000f78 27ff      	CLR  R31
000f79 2766      	CLR  R22
000f7a 2777      	CLR  R23
000f7b 915f      	POP  R21
000f7c 9508      	RET
                 
                 __MINRES:
000f7d efef      	SER  R30
000f7e efff      	SER  R31
000f7f e76f      	LDI  R22,0x7F
000f80 ef7f      	SER  R23
000f81 915f      	POP  R21
000f82 9508      	RET
                 
                 __MAXRES:
000f83 efef      	SER  R30
000f84 efff      	SER  R31
000f85 e76f      	LDI  R22,0x7F
000f86 e77f      	LDI  R23,0x7F
000f87 915f      	POP  R21
000f88 9508      	RET
                 
                 __MULF12:
000f89 935f      	PUSH R21
000f8a df31      	RCALL __UNPACK
000f8b 3870      	CPI  R23,0x80
000f8c f351      	BREQ __ZERORES
000f8d 3890      	CPI  R25,0x80
000f8e f341      	BREQ __ZERORES
000f8f 2401      	EOR  R0,R1
000f90 9408      	SEC
000f91 1f79      	ADC  R23,R25
000f92 f423      	BRVC __MULF124
000f93 f31c      	BRLT __ZERORES
                 __MULF125:
000f94 2000      	TST  R0
000f95 f33a      	BRMI __MINRES
000f96 cfec      	RJMP __MAXRES
                 __MULF124:
000f97 920f      	PUSH R0
000f98 931f      	PUSH R17
000f99 932f      	PUSH R18
000f9a 933f      	PUSH R19
000f9b 934f      	PUSH R20
000f9c 2711      	CLR  R17
000f9d 2722      	CLR  R18
000f9e 2799      	CLR  R25
000f9f 9f68      	MUL  R22,R24
000fa0 01a0      	MOVW R20,R0
000fa1 9f8f      	MUL  R24,R31
000fa2 2d30      	MOV  R19,R0
000fa3 0d41      	ADD  R20,R1
000fa4 1f59      	ADC  R21,R25
000fa5 9f6b      	MUL  R22,R27
000fa6 0d30      	ADD  R19,R0
000fa7 1d41      	ADC  R20,R1
000fa8 1f59      	ADC  R21,R25
000fa9 9f8e      	MUL  R24,R30
000faa d027      	RCALL __MULF126
000fab 9fbf      	MUL  R27,R31
000fac d025      	RCALL __MULF126
000fad 9f6a      	MUL  R22,R26
000fae d023      	RCALL __MULF126
000faf 9fbe      	MUL  R27,R30
000fb0 d01d      	RCALL __MULF127
000fb1 9faf      	MUL  R26,R31
000fb2 d01b      	RCALL __MULF127
000fb3 9fae      	MUL  R26,R30
000fb4 0d11      	ADD  R17,R1
000fb5 1f29      	ADC  R18,R25
000fb6 1f39      	ADC  R19,R25
000fb7 1f49      	ADC  R20,R25
000fb8 1f59      	ADC  R21,R25
000fb9 2fe3      	MOV  R30,R19
000fba 2ff4      	MOV  R31,R20
000fbb 2f65      	MOV  R22,R21
000fbc 2f52      	MOV  R21,R18
000fbd 914f      	POP  R20
000fbe 913f      	POP  R19
000fbf 912f      	POP  R18
000fc0 911f      	POP  R17
000fc1 900f      	POP  R0
000fc2 2366      	TST  R22
000fc3 f02a      	BRMI __MULF122
000fc4 0f55      	LSL  R21
000fc5 1fee      	ROL  R30
000fc6 1fff      	ROL  R31
000fc7 1f66      	ROL  R22
000fc8 c002      	RJMP __MULF123
                 __MULF122:
000fc9 9573      	INC  R23
000fca f24b      	BRVS __MULF125
                 __MULF123:
000fcb ded4      	RCALL __ROUND_REPACK
000fcc 915f      	POP  R21
000fcd 9508      	RET
                 
                 __MULF127:
000fce 0d10      	ADD  R17,R0
000fcf 1d21      	ADC  R18,R1
000fd0 1f39      	ADC  R19,R25
000fd1 c002      	RJMP __MULF128
                 __MULF126:
000fd2 0d20      	ADD  R18,R0
000fd3 1d31      	ADC  R19,R1
                 __MULF128:
000fd4 1f49      	ADC  R20,R25
000fd5 1f59      	ADC  R21,R25
000fd6 9508      	RET
                 
                 __DIVF21:
000fd7 935f      	PUSH R21
000fd8 dee3      	RCALL __UNPACK
000fd9 3870      	CPI  R23,0x80
000fda f421      	BRNE __DIVF210
000fdb 2011      	TST  R1
                 __DIVF211:
000fdc f40a      	BRPL __DIVF219
000fdd cf9f      	RJMP __MINRES
                 __DIVF219:
000fde cfa4      	RJMP __MAXRES
                 __DIVF210:
000fdf 3890      	CPI  R25,0x80
000fe0 f409      	BRNE __DIVF218
                 __DIVF217:
000fe1 cf95      	RJMP __ZERORES
                 __DIVF218:
000fe2 2401      	EOR  R0,R1
000fe3 9408      	SEC
000fe4 0b97      	SBC  R25,R23
000fe5 f41b      	BRVC __DIVF216
000fe6 f3d4      	BRLT __DIVF217
000fe7 2000      	TST  R0
000fe8 cff3      	RJMP __DIVF211
                 __DIVF216:
000fe9 2f79      	MOV  R23,R25
000fea 931f      	PUSH R17
000feb 932f      	PUSH R18
000fec 933f      	PUSH R19
000fed 934f      	PUSH R20
000fee 2411      	CLR  R1
000fef 2711      	CLR  R17
000ff0 2722      	CLR  R18
000ff1 2733      	CLR  R19
000ff2 2744      	CLR  R20
000ff3 2755      	CLR  R21
000ff4 e290      	LDI  R25,32
                 __DIVF212:
000ff5 17ae      	CP   R26,R30
000ff6 07bf      	CPC  R27,R31
000ff7 0786      	CPC  R24,R22
000ff8 0741      	CPC  R20,R17
000ff9 f030      	BRLO __DIVF213
000ffa 1bae      	SUB  R26,R30
000ffb 0bbf      	SBC  R27,R31
000ffc 0b86      	SBC  R24,R22
000ffd 0b41      	SBC  R20,R17
000ffe 9408      	SEC
000fff c001      	RJMP __DIVF214
                 __DIVF213:
001000 9488      	CLC
                 __DIVF214:
001001 1f55      	ROL  R21
001002 1f22      	ROL  R18
001003 1f33      	ROL  R19
001004 1c11      	ROL  R1
001005 1faa      	ROL  R26
001006 1fbb      	ROL  R27
001007 1f88      	ROL  R24
001008 1f44      	ROL  R20
001009 959a      	DEC  R25
00100a f751      	BRNE __DIVF212
00100b 01f9      	MOVW R30,R18
00100c 2d61      	MOV  R22,R1
00100d 914f      	POP  R20
00100e 913f      	POP  R19
00100f 912f      	POP  R18
001010 911f      	POP  R17
001011 2366      	TST  R22
001012 f032      	BRMI __DIVF215
001013 0f55      	LSL  R21
001014 1fee      	ROL  R30
001015 1fff      	ROL  R31
001016 1f66      	ROL  R22
001017 957a      	DEC  R23
001018 f243      	BRVS __DIVF217
                 __DIVF215:
001019 de86      	RCALL __ROUND_REPACK
00101a 915f      	POP  R21
00101b 9508      	RET
                 
                 __CMPF12:
00101c 2399      	TST  R25
00101d f09a      	BRMI __CMPF120
00101e 2377      	TST  R23
00101f f042      	BRMI __CMPF121
001020 1797      	CP   R25,R23
001021 f048      	BRLO __CMPF122
001022 f429      	BRNE __CMPF121
001023 17ae      	CP   R26,R30
001024 07bf      	CPC  R27,R31
001025 0786      	CPC  R24,R22
001026 f020      	BRLO __CMPF122
001027 f031      	BREQ __CMPF123
                 __CMPF121:
001028 9498      	CLZ
001029 9488      	CLC
00102a 9508      	RET
                 __CMPF122:
00102b 9498      	CLZ
00102c 9408      	SEC
00102d 9508      	RET
                 __CMPF123:
00102e 9418      	SEZ
00102f 9488      	CLC
001030 9508      	RET
                 __CMPF120:
001031 2377      	TST  R23
001032 f7c2      	BRPL __CMPF122
001033 1797      	CP   R25,R23
001034 f398      	BRLO __CMPF121
001035 f7a9      	BRNE __CMPF122
001036 17ea      	CP   R30,R26
001037 07fb      	CPC  R31,R27
001038 0768      	CPC  R22,R24
001039 f388      	BRLO __CMPF122
00103a f399      	BREQ __CMPF123
00103b cfec      	RJMP __CMPF121
                 
                 __CPD02:
00103c 2400      	CLR  R0
00103d 160a      	CP   R0,R26
00103e 060b      	CPC  R0,R27
00103f 0608      	CPC  R0,R24
001040 0609      	CPC  R0,R25
001041 9508      	RET
                 
                 __SAVELOCR6:
001042 935a      	ST   -Y,R21
                 __SAVELOCR5:
001043 934a      	ST   -Y,R20
                 __SAVELOCR4:
001044 933a      	ST   -Y,R19
                 __SAVELOCR3:
001045 932a      	ST   -Y,R18
                 __SAVELOCR2:
001046 931a      	ST   -Y,R17
001047 930a      	ST   -Y,R16
001048 9508      	RET
                 
                 __LOADLOCR6:
001049 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00104a 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00104b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00104c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00104d 8119      	LDD  R17,Y+1
00104e 8108      	LD   R16,Y
00104f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega168P register use summary:
r0 :  77 r1 :  31 r2 :   0 r3 :   0 r4 :   0 r5 :   6 r6 :   6 r7 :   5 
r8 :   5 r9 :   0 r10:  15 r11:   2 r12:   2 r13:   4 r14:   4 r15:   0 
r16:  90 r17: 150 r18:  33 r19:  59 r20:  29 r21:  78 r22: 157 r23: 125 
r24:  69 r25:  58 r26: 376 r27: 201 r28:  20 r29:   1 r30: 952 r31: 468 
x  :  27 y  : 328 z  :  68 
Registers used: 30 out of 35 (85.7%)

ATmega168P instruction use summary:
adc   :  67 add   :  55 adiw  :  29 and   :   6 andi  :  15 asr   :   1 
bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   1 
break :   0 breq  :  30 brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  20 brlt  :   4 brmi  :   9 brne  :  52 brpl  :   8 
brsh  :  14 brtc  :   1 brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 
bst   :   0 call  : 132 cbi   :  20 cbr   :   1 clc   :   3 clh   :   0 
cli   :   8 cln   :   0 clr   :  62 cls   :   0 clt   :   3 clv   :   0 
clz   :   2 com   :   8 cp    :  28 cpc   :  38 cpi   :  68 cpse  :   0 
dec   :  12 des   :   0 eor   :  32 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :  16 inc   :   2 jmp   :  35 ld    :  73 
ldd   : 158 ldi   : 515 lds   : 107 lpm   :  39 lsl   :  22 lsr   :   2 
mov   : 205 movw  : 107 mul   :  17 muls  :   0 mulsu :   0 neg   :   2 
nop   :   0 or    :   5 ori   :   5 out   :  38 pop   :  32 push  :  31 
rcall :  41 ret   :  52 reti  :   6 rjmp  :  73 rol   :  35 ror   :  15 
sbc   :  15 sbci  :  86 sbi   :  26 sbic  :   1 sbis  :   5 sbiw  :  17 
sbr   :   0 sbrc  :   1 sbrs  :   1 sec   :   4 seh   :   0 sei   :   6 
sen   :   0 ser   :   9 ses   :   0 set   :   3 sev   :   0 sez   :   1 
sleep :   0 spm   :   0 st    :  90 std   :  78 sts   : 146 sub   :  14 
subi  : 124 swap  :   0 tst   :  19 wdr   :   7 
Instructions used: 80 out of 112 (71.4%)

ATmega168P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0020a0   6882   1470   8352   16384  51.0%
[.dseg] 0x000100 0x0002e2      0    226    226    1024  22.1%
[.eseg] 0x000000 0x00014a      0    330    330     512  64.5%

Assembly complete, 0 errors, 16 warnings
